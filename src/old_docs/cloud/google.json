[
  {
    "keyword": "Analyze Sentiment",
    "arguments": "text_file: str,file_type: str = text,json_file: str = None,lang=None",
    "description": "Analyze sentiment in a text file :param text_file: source text file :param json_file: json target to save result, defaults to None :param lang: language code of the source, defaults to None :return: analysis response"
  },
  {
    "keyword": "Annotate Image",
    "arguments": "image_uri: str,json_file: str = None",
    "description": "Annotate image :param image_file: source image file :param json_file: json target to save result, defaults to None :return: detection response"
  },
  {
    "keyword": "Annotate Video",
    "arguments": "video_uri: str = None,video_file: str = None,json_file: str = None,features: list = None",
    "description": "Annotate video Possible values for features: FEATURE_UNSPECIFIED, Unspecified. LABEL_DETECTION, Label detection. Detect objects, such as dog or flower. SHOT_CHANGE_DETECTION, Shot change detection. EXPLICIT_CONTENT_DETECTION, Explicit content detection. SPEECH_TRANSCRIPTION, Speech transcription. TEXT_DETECTION, OCR text detection and tracking. OBJECT_TRACKING, Object detection and tracking. LOGO_RECOGNITION, Logo detection, tracking, and recognition. If video_uri is given then that is used even if video_file is None. :param video_uri: Google Cloud Storage URI :param video_file: filepath to video :param json_file: json target to save result, defaults to None :param features: list of annotation features to detect, defaults to [\"LABEL_DETECTION\", \"SHOT_CHANGE_DETECTION\"] :return: annotate result"
  },
  {
    "keyword": "Classify Text",
    "arguments": "text_file,json_file,lang=None",
    "description": "Classify text :param text_file: source text file :param json_file: json target to save result, defaults to None :param lang: language code of the source, defaults to None :return: classify response"
  },
  {
    "keyword": "Clear Values",
    "arguments": "sheet_id: str,sheet_range: str",
    "description": "Clear cell values for range of cells within a sheet :param sheet_id: target sheet :param sheet_range: target sheet range"
  },
  {
    "keyword": "Create Bucket",
    "arguments": "bucket_name: str",
    "description": "Create Google Cloud Storage bucket :param bucket_name: name as string :return: bucket"
  },
  {
    "keyword": "Create Sheet",
    "arguments": "title: str",
    "description": "Create empty sheet with a title :param title: name as string :return: created sheet_id"
  },
  {
    "keyword": "Delete Bucket",
    "arguments": "bucket_name: str",
    "description": "Delete Google Cloud Storage bucket Bucket needs to be empty before it can be deleted. :param bucket_name: name as string"
  },
  {
    "keyword": "Delete Files",
    "arguments": "bucket_name: str,files: typing.Any",
    "description": "Delete files in the bucket Files need to be object name in the bucket. :param bucket_name: name as string :param files: single file, list of files or comma separated list of files :return: list of files which could not be deleted, or True if all were deleted"
  },
  {
    "keyword": "Detect Document",
    "arguments": "image_file: str,json_file: str = None",
    "description": "Detect document :param image_file: source image file :param json_file: json target to save result, defaults to None :return: detection response"
  },
  {
    "keyword": "Detect Labels",
    "arguments": "image_file: str,json_file: str = None",
    "description": "Detect labels in the image :param image_file: source image file :param json_file: json target to save result, defaults to None :return: detection response"
  },
  {
    "keyword": "Detect Text",
    "arguments": "image_file: str,json_file: str = None",
    "description": "Detect text in the image :param image_file: source image file :param json_file: json target to save result, defaults to None :return: detection response"
  },
  {
    "keyword": "Download Files",
    "arguments": "bucket_name: str,files: typing.Any",
    "description": "Download files from a bucket Example files: files = {\"mytestimg\": \"image1.png\", \"mydoc\": \"google.pdf :param bucket_name: name as string :param files: list of object names or dictionary of object names and target files :return: list of files which could not be downloaded, or True if all were downloaded"
  },
  {
    "keyword": "Face Detection",
    "arguments": "image_uri: str,json_file: str = None",
    "description": "Detect faces :param image_uri: Google Cloud Storage URI :param json_file: json target to save result, defaults to None :return: detection response"
  },
  {
    "keyword": "Get Bucket",
    "arguments": "bucket_name: str",
    "description": "Get Google Cloud Storage bucket :param bucket_name: name as string :return: bucket"
  },
  {
    "keyword": "Get Values",
    "arguments": "sheet_id: str,sheet_range: str,value_render_option: str = UNFORMATTED_VALUE,datetime_render_option: str = FORMATTED_STRING",
    "description": "Get values from the range in the sheet :param sheet_id: target sheet :param sheet_range: target sheet range :param value_render_option: how values should be represented in the output defaults to \"UNFORMATTED_VALUE\" :param datetime_render_option: ow dates, times, and durations should be represented in the outpu, defaults to \"FORMATTED_STRING"
  },
  {
    "keyword": "Init Natural Language Client",
    "arguments": "service_credentials_file: str = None,use_robocloud_vault: bool = False",
    "description": "Initialize Google Cloud Natural Language client :param service_credentials_file: filepath to credentials JSON :param use_robocloud_vault: use json stored into Robocloud Vault"
  },
  {
    "keyword": "Init Sheets Client",
    "arguments": "service_credentials_file: str = None,use_robocloud_vault: bool = False",
    "description": "Initialize Google Sheets client :param service_credentials_file: filepath to credentials JSON :param use_robocloud_vault: use json stored into Robocloud Vault"
  },
  {
    "keyword": "Init Speech To Text Client",
    "arguments": "service_credentials_file: str = None,use_robocloud_vault: bool = False",
    "description": "Initialize Google Cloud Speech to Text client :param service_credentials_file: filepath to credentials JSON :param use_robocloud_vault: use json stored into Robocloud Vault"
  },
  {
    "keyword": "Init Storage Client",
    "arguments": "service_credentials_file: str = None,use_robocloud_vault: bool = False",
    "description": "Initialize Google Cloud Storage client :param service_credentials_file: filepath to credentials JSON :param use_robocloud_vault: use json stored into Robocloud Vault"
  },
  {
    "keyword": "Init Text To Speech Client",
    "arguments": "service_credentials_file: str = None,use_robocloud_vault: bool = False",
    "description": "Initialize Google Cloud Text to Speech client :param service_credentials_file: filepath to credentials JSON :param use_robocloud_vault: use json stored into Robocloud Vault"
  },
  {
    "keyword": "Init Translation Client",
    "arguments": "service_credentials_file: str = None,project_identifier: str = None,use_robocloud_vault: bool = False",
    "description": "Initialize Google Cloud Translation client :param service_credentials_file: filepath to credentials JSON :param project_identifier: identifier for Translation project :param use_robocloud_vault: use json stored into Robocloud Vault"
  },
  {
    "keyword": "Init Video Intelligence Client",
    "arguments": "service_credentials_file: str = None,use_robocloud_vault: bool = False",
    "description": "Initialize Google Cloud Video Intelligence client :param service_credentials_file: filepath to credentials JSON :param use_robocloud_vault: use json stored into Robocloud Vault"
  },
  {
    "keyword": "Init Vision Client",
    "arguments": "service_credentials_file: str = None,use_robocloud_vault: bool = False",
    "description": "Initialize Google Cloud Vision client :param service_credentials_file: filepath to credentials JSON :param use_robocloud_vault: use json stored into Robocloud Vault"
  },
  {
    "keyword": "Insert Values",
    "arguments": "sheet_id: str,sheet_range: str,values: list,major_dimension: str = COLUMNS,value_input_option: str = USER_ENTERED",
    "description": "Insert values into sheet cells :param sheet_id: target sheet :param sheet_range: target sheet range :param values: list of values to insert into sheet :param major_dimension: major dimension of the values, default COLUMNS :param value_input_option: controls whether input strings are parsed or not, default USER_ENTERED"
  },
  {
    "keyword": "List Buckets",
    "arguments": "",
    "description": "List Google Cloud Storage buckets :return: list of buckets"
  },
  {
    "keyword": "List Files",
    "arguments": "bucket_name: str",
    "description": "List files in the bucket :param bucket_name: name as string :return: list of object names in the bucket"
  },
  {
    "keyword": "List Supported Voices",
    "arguments": "language_code: str = None",
    "description": "List supported voices for the speech :param language_code: voice languages to list, defaults to None (all) :return: list of supported voices"
  },
  {
    "keyword": "Recognize",
    "arguments": "audio_file_uri,encoding: str = FLAC,language_code: str = en_US,audio_channel_count=2",
    "description": "Recognize text in the audio file :param audio_file_uri: Google Cloud Storage URI :return: recognized texts"
  },
  {
    "keyword": "Set Robocloud Vault",
    "arguments": "vault_name,vault_secret_key",
    "description": "Set Robocloud Vault name and secret key name :param vault_name: Robocloud Vault name :param vault_secret_key: Rococloud Vault secret key name"
  },
  {
    "keyword": "Synthesize Speech",
    "arguments": "text,language=en-US,name=en-US-Standard-B,gender=MALE,encoding=MP3,target_file=synthesized.mp3",
    "description": "Synthesize speech synchronously :param text: input text to synthesize :param language: voice language, defaults to \"en-US\" :param name: voice name, defaults to \"en-US-Standard-B\" :param gender: voice gender, defaults to \"MALE\" :param encoding: result encoding type, defaults to \"MP3\" :param target_file: save synthesized output to file, defaults to \"synthesized.mp3\" :return: synthesized output in bytes"
  },
  {
    "keyword": "Translate",
    "arguments": "text: typing.Any,source_language: str = None,target_language: str = None",
    "description": "Translate text :param text: text to translate :param source_language: language code, defaults to None :param target_language: language code, defaults to None :return: translated text"
  },
  {
    "keyword": "Upload File",
    "arguments": "bucket_name: str,filename: str,target_name: str",
    "description": "Upload a file into a bucket :param bucket_name: name as string :param filename: filepath to upload file :param target_name: target object name"
  },
  {
    "keyword": "Upload Files",
    "arguments": "bucket_name: str,files: dict",
    "description": "Upload files into a bucket Example files: files = {\"mytestimg\": \"image1.png\", \"mydoc\": \"google.pdf\"} :param bucket_name: name as string :param files: dictionary of object names and filepaths"
  }
]