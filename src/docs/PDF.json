{
    "keywordspec": {
        "version": "",
        "scope": "test case",
        "namedargs": "yes",
        "doc": "Autosphere Framework library for PDF management.",
        "init": {
            "arguments": {
                "arg": "outdir: str = ."
            },
            "doc": "Args:\n    orientation (str): \"portrait\" (\"P\") or \"landscape\" (\"L\").\n        Default to \"portrait\".\n    unit (str): \"pt\", \"mm\", \"cm\" or \"in\". Default to \"mm\".\n    format (str): \"a3\", \"a4\", \"a5\", \"letter\" or \"legal\".\n        Default to \"a4\".\n    font_cache_dir (Path or str): directory where pickle files\n        for TTF font files are kept.\n        The default is `True`, meaning the current folder.",
            "_lineno": "401"
        },
        "kw": [
            {
                "arguments": {
                    "arg": [
                        "family",
                        "style=",
                        "fname=None",
                        "uni=False"
                    ]
                },
                "doc": "Add a TrueType or Type1 font",
                "_name": "Add Font",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\fpdf\\fpdf.py",
                "_lineno": "736"
            },
            {
                "arguments": {
                    "arg": [
                        "imagefile",
                        "source=None",
                        "target=None",
                        "coverage=0.2"
                    ]
                },
                "doc": "Add image to PDF which can be new or existing PDF.\n\nResult will be always written to `target_pdf` so that needs\nto be given for the keyword.\n\n:param imagefile: filepath to image file to add into PDF\n:param source: filepath to source, if not given add image to currently\n    active PDF\n:param target: filepath of target PDF\n:param coverage: [description], defaults to 0.2\n:raises ValueError: [description]\n\nExample:\n    | Add Image To PDF | C:\\Users\\MM\\Desktop\\test.png | C:\\Users\\MM\\Downloads\\sample.pdf | C:\\Users\\MM\\Documents\\sample.pdf |",
                "_name": "Add Image To Pdf",
                "_lineno": "1261"
            },
            {
                "arguments": "",
                "doc": "Create a new internal link",
                "_name": "Add Link",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\fpdf\\fpdf.py",
                "_lineno": "969"
            },
            {
                "arguments": {
                    "arg": [
                        "orientation=",
                        "format=",
                        "same=False"
                    ]
                },
                "doc": "Start a new page, if same page format will be same as previous",
                "_name": "Add Page",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\fpdf\\fpdf.py",
                "_lineno": "454"
            },
            {
                "arguments": {
                    "arg": "pages: int = 1"
                },
                "doc": "Adds pages into PDF documents.\n\n:param pages: number of pages to add, defaults to 1\nExample:\n    | Add Pages |\n    | Add Pages | pages=3 |",
                "_name": "Add Pages",
                "_lineno": "519"
            },
            {
                "arguments": {
                    "arg": [
                        "pages: int = 1",
                        "source_pdf: str = None",
                        "target_pdf: str = None"
                    ]
                },
                "doc": "Add empty pages into current source document\n\n:param pages: number of pages to add, defaults to 1\n:param source_pdf: filepath to the source pdf\n:param target_pdf: filename to the target pdf, stored by default\n    to `output_directory`\nExample:\n    | Add Pages To Document | 3 | C:\\Users\\MM\\Downloads\\source.pdf | C:\\Users\\MM\\Downloads\\target.pdf |\n    | Add Pages To Document | pages=3 | source_pdf=C:\\Users\\MM\\Downloads\\source.pdf | target_pdf=C:\\Users\\MM\\Downloads\\target.pdf |",
                "_name": "Add Pages To Document",
                "_lineno": "530"
            },
            {
                "arguments": {
                    "arg": "alias"
                },
                "doc": "Define an alias for total number of pages",
                "_name": "Alias Nb Pages",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\fpdf\\fpdf.py",
                "_lineno": "431"
            },
            {
                "arguments": {
                    "arg": [
                        "w",
                        "h=0",
                        "txt=",
                        "border=0",
                        "ln=0",
                        "align=",
                        "fill=False",
                        "link="
                    ]
                },
                "doc": "Prints a cell (rectangular area) with optional borders, background color and\ncharacter string. The upper-left corner of the cell corresponds to the current\nposition. The text can be aligned or centered. After the call, the current\nposition moves to the right or to the next line. It is possible to put a link\non the text.\n\nIf automatic page breaking is enabled and the cell goes beyond the limit, a\npage break is performed before outputting.\n\nArgs:\n    w (int): Cell width. If 0, the cell extends up to the right margin.\n    h (int): Cell height. Default value: 0.\n    txt (str): String to print. Default value: empty string.\n    border: Indicates if borders must be drawn around the cell.\n        The value can be either a number (`0`: no border ; `1`: frame)\n        or a string containing some or all of the following characters\n        (in any order):\n        `L`: left ; `T`: top ; `R`: right ; `B`: bottom. Default value: 0.\n    ln (int): Indicates where the current position should go after the call.\n        Possible values are: `0`: to the right ; `1`: to the beginning of the\n        next line ; `2`: below. Putting 1 is equivalent to putting 0 and calling\n        `ln` just after. Default value: 0.\n    align (str): Allows to center or align the text. Possible values are:\n        `L` or empty string: left align (default value) ; `C`: center ;\n        `R`: right align\n    fill (bool): Indicates if the cell background must be painted (`True`)\n        or transparent (`False`). Default value: False.\n    link (str): optional link to add on the image, internal\n        (identifier returned by `add_link`) or external URL.\n\nReturns: a boolean indicating if page break was triggered",
                "_name": "Cell",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\fpdf\\fpdf.py",
                "_lineno": "1098"
            },
            {
                "arguments": "",
                "doc": "Terminate document",
                "_name": "Close",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\fpdf\\fpdf.py",
                "_lineno": "439"
            },
            {
                "arguments": "",
                "doc": "Close all opened PDF file descriptors.",
                "_name": "Close All Pdf Documents",
                "_lineno": "422"
            },
            {
                "arguments": {
                    "arg": "source_pdf: str = None"
                },
                "doc": "Close PDF file descriptor for certain file.\n\n:param source_pdf: filepath\n:raises ValueError: if file descriptor for the file is not found\nExample:\n    | Close PDF Document | C:\\Users\\MM\\Downloads\\source.pdf |\n    | Close PDF Document | source_pdf=C:\\Users\\MM\\Downloads\\source.pdf |",
                "_name": "Close Pdf Document",
                "_lineno": "434"
            },
            {
                "arguments": {
                    "arg": [
                        "txt",
                        "x",
                        "y",
                        "w=1.5",
                        "h=5"
                    ]
                },
                "doc": "Barcode 3of9",
                "_name": "Code 39",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\fpdf\\fpdf.py",
                "_lineno": "2588"
            },
            {
                "arguments": {
                    "arg": [
                        "x1",
                        "y1",
                        "x2",
                        "y2",
                        "dash_length=1",
                        "space_length=1"
                    ]
                },
                "doc": "Draw a dashed line between two points.\n\nArgs:\n    x1 (int): Abscissa of first point\n    y1 (int): Ordinate of first point\n    x2 (int): Abscissa of second point\n    y2 (int): Ordinate of second point\n    dash_length (int): Length of the dash\n    space_length (int): Length of the space between 2 dashes",
                "_name": "Dashed Line",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\fpdf\\fpdf.py",
                "_lineno": "640"
            },
            {
                "arguments": {
                    "arg": "source_pdf: str = None"
                },
                "doc": "Get PDFMiner format XML dump of the PDF\n\n:param source_pdf: filepath\n:return: XML content\nExample:\n    | ${res} | Dump Pdf As Xml | C:\\Users\\MM\\Downloads\\source.pdf |",
                "_name": "Dump Pdf As Xml",
                "_lineno": "1351"
            },
            {
                "arguments": {
                    "arg": [
                        "x",
                        "y",
                        "w",
                        "h",
                        "style=None"
                    ]
                },
                "doc": "Outputs an ellipse.\nIt can be drawn (border only), filled (with no border) or both.\n\nArgs:\n    x (int): Abscissa of upper-left bounging box.\n    y (int): Ordinate of upper-left bounging box.\n    w (int): Width.\n    h (int): Height.\n    style (int): Style of rendering. Possible values are:\n        * `D` or empty string: draw border. This is the default value.\n        * `F`: fill\n        * `DF` or `FD`: draw and fill",
                "_name": "Ellipse",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\fpdf\\fpdf.py",
                "_lineno": "680"
            },
            {
                "arguments": {
                    "arg": [
                        "source_pdf: str = None",
                        "target_pdf: str = None",
                        "pages: typing.Any = None"
                    ]
                },
                "doc": "Extract pages from source PDF and save to target PDF document.\n\nPage numbers starting from 1.\n\n:param source_pdf: filepath to the source pdf\n:param target_pdf: filename to the target pdf, stored by default\n    to `output_directory`\n:param pages: page numbers to extract from PDF (numbers start from 0)\n    if None then extracts all pages\nExample:\n    | Extract Pages From PDF | C:\\Users\\MM\\Downloads\\source.pdf | C:\\Users\\MM\\Downloads\\target.pdf | 2 |\n    | Extract Pages From PDF | source_pdf=C:\\Users\\MM\\Downloads\\source.pdf | target_pdf=C:\\Users\\MM\\Downloads\\target.pdf | pages=2 |",
                "_name": "Extract Pages From Pdf",
                "_lineno": "661"
            },
            {
                "arguments": "",
                "doc": "Footer to be implemented in your own inherited class",
                "_name": "Footer",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\fpdf\\fpdf.py",
                "_lineno": "522"
            },
            {
                "arguments": "",
                "doc": "Return all figures in the PDF document.\n\nPDF needs to be parsed before elements can be found.\n\n:return: dictionary of figures divided into pages\nExample:\n    | ${res} | Get All Figures |",
                "_name": "Get All Figures",
                "_lineno": "1184"
            },
            {
                "arguments": {
                    "arg": "source_pdf: str = None"
                },
                "doc": "Get information from PDF document.\n\n:param source_pdf: filepath to the source pdf\n:return: dictionary of PDF information\nExample:\n    | ${res} | Get Info | source_pdf=C:\\Users\\MM\\Downloads\\content.pdf |",
                "_name": "Get Info",
                "_lineno": "631"
            },
            {
                "arguments": {
                    "arg": [
                        "source_pdf: str = None",
                        "replace_none_value: bool = False"
                    ]
                },
                "doc": "Get input fields in the PDF.\n\nStores input fields internally so that they can be used without\nparsing PDF again.\n\nParameter `replace_none_value` is for convience to visualize fields.\n\n:param source_pdf: source filepath, defaults to None\n:param replace_none_value: if value is None replace it with key name,\n    defaults to False\n:return: dictionary of input key values or `None`\nExample:\n    | ${InputDictionary} | Get Input Fields | source_pdf=C:\\Users\\MM\\Downloads\\source.pdf | replace_none_value=False/True |",
                "_name": "Get Input Fields",
                "_lineno": "963"
            },
            {
                "arguments": {
                    "arg": "source_pdf: str = None"
                },
                "doc": "Get number of pages in the document.\n\n:param source_pdf: filepath to the source pdf\n:raises PdfReadError: if file is encrypted or other restrictions are in place\nExample:\n    | ${res} | source_pdf=C:\\Users\\MM\\Downloads\\content.pdf |",
                "_name": "Get Number Of Pages",
                "_lineno": "853"
            },
            {
                "arguments": "",
                "doc": "Get output directory where target files are saved to.\n\n:return: absolute filepath as string\nExample:\n    | ${res} | Get Output Directory |",
                "_name": "Get Output Directory",
                "_lineno": "463"
            },
            {
                "arguments": {
                    "arg": [
                        "s",
                        "normalized=False"
                    ]
                },
                "doc": "Get width of a string in the current font",
                "_name": "Get String Width",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\fpdf\\fpdf.py",
                "_lineno": "554"
            },
            {
                "arguments": {
                    "arg": [
                        "source_pdf: str = None",
                        "pages: typing.Any = None"
                    ]
                },
                "doc": "Get text from set of pages in source PDF document.\n\nPDF needs to be parsed before text can be read.\n\n:param source_pdf: filepath to the source pdf\n:param pages: page numbers to get text (numbers start from 0)\n:return: dictionary of pages and their texts\nExample:\n    | ${res} | Get Text From Pdf | source_pdf=C:\\Users\\MM\\Downloads\\htmlToPdf.pdf | pages=1 |",
                "_name": "Get Text From Pdf",
                "_lineno": "691"
            },
            {
                "arguments": {
                    "arg": [
                        "locator: str",
                        "pagenum: int = 1",
                        "direction: str = right",
                        "strict: bool = False",
                        "regexp: str = None"
                    ]
                },
                "doc": "Get closest text (value) to anchor element.\n\nPDF needs to be parsed before elements can be found.\n\n:param locator: element to set anchor to\n:param pagenum: page number where search if performed on, default 1 (first)\n:param direction: in which direction to search for text,\n    directions  'top', 'bottom', 'left' or 'right', defaults to 'right'\n:param strict: if element margins should be used for matching points,\n    used when direction is 'top' or 'bottom', default `False`\n:param regexp: expected format of value to match, defaults to None\n:return: closest matching text or `None`\nExample:\n    | ${res} | Get Value From Anchor | locator=text:Hi | pagenum=1 | direction=top | strict=False | regexp=*PUBLIC* |",
                "_name": "Get Value From Anchor",
                "_lineno": "1074"
            },
            {
                "arguments": "",
                "doc": "Get x position",
                "_name": "Get X",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\fpdf\\fpdf.py",
                "_lineno": "1731"
            },
            {
                "arguments": "",
                "doc": "Get y position",
                "_name": "Get Y",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\fpdf\\fpdf.py",
                "_lineno": "1739"
            },
            {
                "arguments": "",
                "doc": "Header to be implemented in your own inherited class",
                "_name": "Header",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\fpdf\\fpdf.py",
                "_lineno": "519"
            },
            {
                "arguments": {
                    "arg": [
                        "content: str = None",
                        "filename: str = None",
                        "variables: dict = None",
                        "create_dirs: bool = True",
                        "exists_ok: bool = True"
                    ]
                },
                "doc": "Use HTML content to generate PDF file.\n\n:param content: HTML content\n:param filename: filepath where to save PDF document\n:param variables: dictionary of variables to fill into template, defaults to {}\n:param create_dirs: directory structure is created if it is missing,\n default `True`\n:param exists_ok: file is overwritten if it exists, default `True`\nExample:\n    | Html To Pdf | content=C:\\Users\\MM\\Downloads\\content.html | filename=C:\\Users\\MM\\Downloads\\htmlToPdf.pdf |",
                "_name": "Html To Pdf",
                "_lineno": "588"
            },
            {
                "arguments": {
                    "arg": [
                        "name",
                        "x=None",
                        "y=None",
                        "w=0",
                        "h=0",
                        "type=",
                        "link=",
                        "title=None",
                        "alt_text=None"
                    ]
                },
                "doc": "Put an image on the page.\n\nThe size of the image on the page can be specified in different ways:\n* explicit width and height (expressed in user units)\n* one explicit dimension, the other being calculated automatically\n  in order to keep the original proportions\n* no explicit dimension, in which case the image is put at 72 dpi.\n\n**Remarks**:\n* if an image is used several times, only one copy is embedded in the file.\n* when using an animated GIF, only the first frame is used.\n\nArgs:\n    name: either a string representing a file path to an image, or a instance of\n    `PIL.Image.Image`\n    x (int): optional horizontal position where to put the image on the page.\n        If not specified or equal to None, the current abscissa is used.\n    y (int): optional vertical position where to put the image on the page.\n        If not specified or equal to None, the current ordinate is used.\n        After the call, the current ordinate is moved to the bottom of the image\n    w (int): optional width of the image. If not specified or equal to zero,\n        it is automatically calculated from the image size.\n        Pass `pdf.epw` to scale horizontally to the full page width.\n    h (int): optional height of the image. If not specified or equal to zero,\n        it is automatically calculated from the image size.\n        Pass `pdf.eph` to scale horizontally to the full page height.\n    type (str): [**DEPRECATED**] unused, will be removed in a later version.\n    link (str): optional link to add on the image, internal\n        (identifier returned by `add_link`) or external URL.\n    title (str): optional. Currently, never seem rendered by PDF readers.\n    alt_text (str): optional alternative text describing the image,\n        for accessibility purposes. Displayed by some PDF readers on hover.",
                "_name": "Image",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\fpdf\\fpdf.py",
                "_lineno": "1596"
            },
            {
                "arguments": {
                    "arg": [
                        "txt",
                        "x",
                        "y",
                        "w=1",
                        "h=10"
                    ]
                },
                "doc": "Barcode I2of5 (numeric), adds a 0 if odd length",
                "_name": "Interleaved 2 Of 5",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\fpdf\\fpdf.py",
                "_lineno": "2532"
            },
            {
                "arguments": {
                    "arg": "source_pdf: str = None"
                },
                "doc": "Check if PDF is encrypted.\n\nReturns True even if PDF was decrypted.\n\n:param source_pdf: filepath to the source pdf\n:return: True if file is encrypted\nExample:\n    | ${res} | source_pdf=C:\\Users\\MM\\Downloads\\content.pdf |",
                "_name": "Is Pdf Encrypted",
                "_lineno": "761"
            },
            {
                "arguments": {
                    "arg": [
                        "x1",
                        "y1",
                        "x2",
                        "y2"
                    ]
                },
                "doc": "Draw a line between two points.\n\nArgs:\n    x1 (int): Abscissa of first point\n    y1 (int): Ordinate of first point\n    x2 (int): Abscissa of second point\n    y2 (int): Ordinate of second point",
                "_name": "Line",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\fpdf\\fpdf.py",
                "_lineno": "582"
            },
            {
                "arguments": {
                    "arg": [
                        "x",
                        "y",
                        "w",
                        "h",
                        "link",
                        "alt_text=None"
                    ]
                },
                "doc": "Puts a link on a rectangular area of the page.\nText or image links are generally put via [cell](#fpdf.FPDF.cell),\n[write](#fpdf.FPDF.write) or [image](#fpdf.FPDF.image),\nbut this method can be useful for instance to define a clickable area inside an image.\n\nArgs:\n    x (int): horizontal position (from the left) to the left side of the link rectangle\n    y (int): vertical position (from the top) to the bottom side of the link rectangle\n    w (int): width of the link rectangle\n    h (int): width of the link rectangle\n    link (str): either an URL or a integer returned by `add_link`, defining an internal link to a page\n    alt_text (str): optional textual description of the link, for accessibility purposes",
                "_name": "Link",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\fpdf\\fpdf.py",
                "_lineno": "984"
            },
            {
                "arguments": {
                    "arg": "h=None"
                },
                "doc": "Line Feed.\nThe current abscissa goes back to the left margin and the ordinate increases by\nthe amount passed as parameter.\n\nArgs:\n    h (int): The height of the break.\n        By default, the value equals the height of the last printed cell.",
                "_name": "Ln",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\fpdf\\fpdf.py",
                "_lineno": "1718"
            },
            {
                "arguments": {
                    "arg": [
                        "w",
                        "h",
                        "txt=",
                        "border=0",
                        "align=J",
                        "fill=False",
                        "split_only=False",
                        "link=",
                        "ln=0",
                        "max_line_height=None"
                    ]
                },
                "doc": "This method allows printing text with line breaks. They can be automatic (as\n        soon as the text reaches the right border of the cell) or explicit (via the\n        `\n` character). As many cells as necessary are stacked, one below the other.\n        Text can be aligned, centered or justified. The cell block can be framed and\n        the background painted.\n\n        Args:\n            w (int): cells width. If 0, they extend up to the right margin of the page.\n            h (int): cells height.\n            txt (str): strign to print.\n            border: Indicates if borders must be drawn around the cell.\n                The value can be either a number (`0`: no border ; `1`: frame)\n                or a string containing some or all of the following characters\n                (in any order):\n                `L`: left ; `T`: top ; `R`: right ; `B`: bottom. Default value: 0.\n            align (str): Allows to center or align the text. Possible values are:\n                `L` or empty string: left align (default value) ; `C`: center ;\n                `R`: right align\n            fill (bool): Indicates if the cell background must be painted (`True`)\n                or transparent (`False`). Default value: False.\n            split_only (bool): if `True`, does not output anything, only perform\n                word-wrapping and return the resulting multi-lines array of strings.\n            link (str): optional link to add on the image, internal\n                (identifier returned by `add_link`) or external URL.\n            ln (int): Indicates where the current position should go after the call.\n                Possible values are: `0`: to the bottom right ; `1`: to the beginning\n                of the next line ; `2`: below with the same horizontal offset ;\n                `3`: to the right with the same vertical offset. Default value: 0.\n            max_line_height (int): optional maximum height of each sub-cell generated\n\n        Using `ln=3` and `maximum height=pdf.font_size` is useful to build tables\n        with multiline text in cells.\n\n        Returns: a boolean indicating if page break was triggered.",
                "_name": "Multi Cell",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\fpdf\\fpdf.py",
                "_lineno": "1285"
            },
            {
                "arguments": {
                    "arg": "txt"
                },
                "doc": "Check that text input is in the correct format/encoding",
                "_name": "Normalize Text",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\fpdf\\fpdf.py",
                "_lineno": "1783"
            },
            {
                "arguments": "",
                "doc": "Begin document",
                "_name": "Open",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\fpdf\\fpdf.py",
                "_lineno": "435"
            },
            {
                "arguments": {
                    "arg": "source_pdf: str = None"
                },
                "doc": "Open PDF document.\n\nAlso opens file for reading.\n\n:param source_pdf: filepath to the source pdf\n:raises ValueError: if PDF is already open\nExample:\n    | Open PDF Document | C:\\Users\\MM\\Downloads\\null.pdf |",
                "_name": "Open Pdf Document",
                "_lineno": "472"
            },
            {
                "arguments": {
                    "arg": [
                        "name=",
                        "dest="
                    ]
                },
                "doc": "Output PDF to some destination.\nThe method first calls [close](close.md) if necessary to terminate the document.\n\nBy default the bytearray buffer is returned.\nIf a `name` is given, the PDF is written to a new file.\n\nArgs:\n    name (str): optional File object or file path where to save the PDF under\n    dest (str): [**DEPRECATED**] unused, will be removed in a later version",
                "_name": "Output",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\fpdf\\fpdf.py",
                "_lineno": "1753"
            },
            {
                "arguments": "",
                "doc": "Get current page number",
                "_name": "Page No",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\fpdf\\fpdf.py",
                "_lineno": "525"
            },
            {
                "arguments": {
                    "arg": [
                        "pages: int",
                        "source_pdf: str = None",
                        "target_pdf: str = None",
                        "clockwise: bool = True",
                        "angle: int = 90"
                    ]
                },
                "doc": "Rotate pages in source PDF document and save to target PDF document.\n\n:param source_pdf: filepath to the source pdf\n:param target_pdf: filename to the target pdf, stored by default\n    to `output_directory`\n:param pages: page numbers to extract from PDF (numbers start from 0)\n:param clockwise: directorion that page will be rotated to, default True\n:param angle: number of degrees to rotate, default 90\nExample:\n    | Page Rotate | source_pdf=C:\\Users\\MM\\Downloads\\content.pdf | target_pdf=C:\\Users\\MM\\Downloads\\rotatedContent.pdf | pages=1 | clockwise=True | angel=90 |",
                "_name": "Page Rotate",
                "_lineno": "720"
            },
            {
                "arguments": {
                    "arg": "source_pdf: str = None"
                },
                "doc": "Parse source PDF into entities which can be\nused for text searches for example.\n\n:param source_pdf: source\nExample:\n    | Parse Pdf | source_pdf=C:\\Users\\MM\\Downloads\\content.pdf |",
                "_name": "Parse Pdf",
                "_lineno": "865"
            },
            {
                "arguments": {
                    "arg": [
                        "source_pdf: str = None",
                        "target_pdf: str = None",
                        "password: str = None"
                    ]
                },
                "doc": "Decrypt PDF with password.\n\n:param source_pdf: filepath to the source pdf\n:param target_pdf: filepath to the decrypted pdf\n:param password: password as a string\n:return: True if decrypt was successful, else False or Exception\n:raises ValueError: on decryption errors\nExample:\n    | Pdf Decrypt | source_pdf=C:\\Users\\MM\\Downloads\\content.pdf | target_pdf=C:\\Users\\MM\\Downloads\\decryptedContent.pdf |\n    password=PassW0rD |",
                "_name": "Pdf Decrypt",
                "_lineno": "808"
            },
            {
                "arguments": {
                    "arg": [
                        "source_pdf: str = None",
                        "target_pdf: str = None",
                        "user_pwd: str =",
                        "owner_pwd: str = None",
                        "use_128bit: bool = True"
                    ]
                },
                "doc": "Encrypt PDF document.\n\n:param source_pdf: filepath to the source pdf\n:param target_pdf: filename to the target pdf, stored by default\n    to `output_directory`\n:param user_pwd: allows opening and reading PDF with restrictions\n:param owner_pwd: allows opening PDF without any restrictions, by\n    default same `user_pwd`\n:param use_128bit: whether to 128bit encryption, when false 40bit\n    encryption is used, default True\nExample:\n    | Pdf Encrypt | source_pdf=C:\\Users\\MM\\Downloads\\content.pdf | target_pdf=C:\\Users\\MM\\Downloads\\encrypetdPdt.pdf |\n    user_pwd=UserPaSsW0rd | owner_pwd=0wneRpAssW0rd | use_128bit=True |",
                "_name": "Pdf Encrypt",
                "_lineno": "775"
            },
            {
                "arguments": {
                    "arg": "h"
                },
                "doc": "",
                "_name": "Perform Page Break If Need Be",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\fpdf\\fpdf.py",
                "_lineno": "1260"
            },
            {
                "arguments": {
                    "arg": [
                        "point_list",
                        "fill=False"
                    ]
                },
                "doc": "Outputs a polygon defined by three or more points.\n\nArgs:\n    point_list (list of tuples): List of Abscissa and Ordinate of\n                                polygon that should be drawn\n    fill (bool): If true polygon will be filled",
                "_name": "Polygon",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\fpdf\\fpdf.py",
                "_lineno": "622"
            },
            {
                "arguments": {
                    "arg": [
                        "point_list",
                        "fill=False",
                        "polygon=False"
                    ]
                },
                "doc": "Draws lines between two or more points.\n\nArgs:\n    point_list (list of tuples): List of Abscissa and Ordinate of\n                                segments that should be drawn\n    fill (bool): If true then polyline should be filled\n    polygon (bool): If true, close path before stroking",
                "_name": "Polyline",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\fpdf\\fpdf.py",
                "_lineno": "598"
            },
            {
                "arguments": {
                    "arg": [
                        "x",
                        "y",
                        "w",
                        "h",
                        "style=None"
                    ]
                },
                "doc": "Outputs a rectangle.\nIt can be drawn (border only), filled (with no border) or both.\n\nArgs:\n    x (int): Abscissa of upper-left bounging box.\n    y (int): Ordinate of upper-left bounging box.\n    w (int): Width.\n    h (int): Height.\n    style (int): Style of rendering. Possible values are:\n        * `D` or empty string: draw border. This is the default value.\n        * `F`: fill\n        * `DF` or `FD`: draw and fill",
                "_name": "Rect",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\fpdf\\fpdf.py",
                "_lineno": "657"
            },
            {
                "arguments": {
                    "arg": [
                        "x",
                        "y",
                        "w",
                        "h"
                    ]
                },
                "doc": "",
                "_name": "Rect Clip",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\fpdf\\fpdf.py",
                "_lineno": "2649"
            },
            {
                "arguments": {
                    "arg": [
                        "text: str",
                        "replace: str"
                    ]
                },
                "doc": "Replace text content with something else in the PDF.\n\n\n:param text: this text will be replaced\n:param replace: used to replace `text`\nExample:\n    | Replace Text | tex=PUBLIC | replace=PRIVATE |",
                "_name": "Replace Text",
                "_lineno": "1243"
            },
            {
                "arguments": {
                    "arg": [
                        "angle",
                        "x=None",
                        "y=None"
                    ]
                },
                "doc": ".. deprecated:: 2.1.0\n  Use `rotation` instead.",
                "_name": "Rotate",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\fpdf\\fpdf.py",
                "_lineno": "1032"
            },
            {
                "arguments": {
                    "arg": [
                        "angle",
                        "x=None",
                        "y=None"
                    ]
                },
                "doc": "This method allows to perform a rotation around a given center.\n\nThe rotation affects all elements which are printed inside the indented context\n(with the exception of clickable areas).\n\nNotes\n-----\n\nOnly the rendering is altered. The `get_x()` and `get_y()` methods are not\naffected, nor the automatic page break mechanism.",
                "_name": "Rotation",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\fpdf\\fpdf.py",
                "_lineno": "1064"
            },
            {
                "arguments": {
                    "arg": [
                        "source: str = None",
                        "target: str = None",
                        "use_modified_reader: bool = False"
                    ]
                },
                "doc": "Save current over itself or to `target_pdf`\n\n:param source: filepath to source PDF :param target: filepath to target PDF :param use_modified_reader: needs\nto be set to `True` if using modified PDF reader Example: | Save Pdf |\nsource=C:\\Users\\MM\\Desktop\\test.png | target=C:\\Users\\MM\\Downloads\\sample.pdf |\nuse_modified_reader=True |",
                "_name": "Save Pdf",
                "_lineno": "1313"
            },
            {
                "arguments": {
                    "arg": "locator: str"
                },
                "doc": "Sets anchor point in the document for further searches.\n\nPDF needs to be parsed before elements can be found.\n\n:param locator: element to search for\n:return: True if element was found\nExample:\n    | ${res} | Set Anchor To Element | locator=text:Hi |",
                "_name": "Set Anchor To Element",
                "_lineno": "1028"
            },
            {
                "arguments": {
                    "arg": "author"
                },
                "doc": "Author of document",
                "_name": "Set Author",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\fpdf\\fpdf.py",
                "_lineno": "408"
            },
            {
                "arguments": {
                    "arg": [
                        "auto",
                        "margin=0"
                    ]
                },
                "doc": "Set auto page break mode and triggering bottom margin.\nBy default, the mode is on and the bottom margin is 2 cm.\n\nArgs:\n    auto (bool): enable or disable this mode\n    margin (int): optional bottom margin (distance from the bottom of the page)\n        in the unit specified to FPDF constructor",
                "_name": "Set Auto Page Break",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\fpdf\\fpdf.py",
                "_lineno": "354"
            },
            {
                "arguments": {
                    "arg": "compress"
                },
                "doc": "Set page compression",
                "_name": "Set Compression",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\fpdf\\fpdf.py",
                "_lineno": "387"
            },
            {
                "arguments": {
                    "arg": "date=None"
                },
                "doc": "Sets Creation of Date time, or current time if None given.",
                "_name": "Set Creation Date",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\fpdf\\fpdf.py",
                "_lineno": "420"
            },
            {
                "arguments": {
                    "arg": "creator"
                },
                "doc": "Creator of document",
                "_name": "Set Creator",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\fpdf\\fpdf.py",
                "_lineno": "416"
            },
            {
                "arguments": {
                    "arg": [
                        "zoom",
                        "layout=continuous"
                    ]
                },
                "doc": "Set display mode in viewer\n\nArgs:\n    zoom: either 'fullpage', 'fullwidth', 'real', 'default',\n        or a number, interpreted as a percentage.\n    layout (str): either \"single\", \"continuous\" or \"two\".",
                "_name": "Set Display Mode",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\fpdf\\fpdf.py",
                "_lineno": "368"
            },
            {
                "arguments": {
                    "arg": [
                        "opt",
                        "value"
                    ]
                },
                "doc": "Set document option",
                "_name": "Set Doc Option",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\fpdf\\fpdf.py",
                "_lineno": "424"
            },
            {
                "arguments": {
                    "arg": [
                        "r",
                        "g=-1",
                        "b=-1"
                    ]
                },
                "doc": "Set color for all stroking operations",
                "_name": "Set Draw Color",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\fpdf\\fpdf.py",
                "_lineno": "529"
            },
            {
                "arguments": {
                    "arg": [
                        "field_name: str",
                        "value: typing.Any",
                        "save: bool = False"
                    ]
                },
                "doc": "Set value for field with given name.\n\nTries to match on field identifier and its label.\n\nException is thrown if field can't be found or more than 1 field matches\nthe given `field_name`.\n\n:param field_name: field to update\n:param value: new value for the field\nExample:\n    | Set Field Value | field_name=Age | value=18 |",
                "_name": "Set Field Value",
                "_lineno": "1200"
            },
            {
                "arguments": {
                    "arg": [
                        "r",
                        "g=-1",
                        "b=-1"
                    ]
                },
                "doc": "Set color for all filling operations",
                "_name": "Set Fill Color",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\fpdf\\fpdf.py",
                "_lineno": "538"
            },
            {
                "arguments": {
                    "arg": [
                        "family=None",
                        "style=",
                        "size=0"
                    ]
                },
                "doc": "Sets the font used to print character strings.\nIt is mandatory to call this method at least once before printing text.\n\nDefault encoding is not specified, but all text writing methods accept only\nunicode for external fonts and one byte encoding for standard.\n\nStandard fonts use `Latin-1` encoding by default, but Windows\nencoding `cp1252` (Western Europe) can be used with\n[set_doc_option](set_doc_option.md) (\"core_fonts_encoding\", encoding).\n\nThe font specified is retained from page to page.\nThe method can be called before the first page is created.\n\nArgs:\n    family (str): name of a font added with `FPDF.add_font`,\n        or name of one of the 14 standard \"PostScript\" fonts:\n        Courier (fixed-width), Helvetica (sans serif), Times (serif),\n        Symbol (symbolic) or ZapfDingbats (symbolic)\n        If an empty string is provided, the current family is retained.\n    style (str): empty string (by default) or a combination\n        of one or several letters among B (bold), I (italic) and U (underline).\n        Bold and italic styles do not apply to Symbol and ZapfDingbats fonts.\n    size (int): in points. The default value is the current size.",
                "_name": "Set Font",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\fpdf\\fpdf.py",
                "_lineno": "859"
            },
            {
                "arguments": {
                    "arg": "size"
                },
                "doc": "Set font size in points",
                "_name": "Set Font Size",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\fpdf\\fpdf.py",
                "_lineno": "952"
            },
            {
                "arguments": {
                    "arg": "keywords"
                },
                "doc": "Keywords of document",
                "_name": "Set Keywords",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\fpdf\\fpdf.py",
                "_lineno": "412"
            },
            {
                "arguments": {
                    "arg": "lang"
                },
                "doc": "A language identifier specifying the natural language for all text in the document\nexcept where overridden by language specifications for structure elements or marked content.\nA language identifier can either be the empty text string, to indicate that the language is unknown,\nor a Language-Tag as defined in RFC 3066, \"Tags for the Identification of Languages\".",
                "_name": "Set Lang",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\fpdf\\fpdf.py",
                "_lineno": "395"
            },
            {
                "arguments": {
                    "arg": "margin"
                },
                "doc": "Sets the document left margin.\nAlso sets the current FPDF.x on the page to this minimum horizontal position.\n\nArgs:\n    margin (int): margin in the unit specified to FPDF constructor",
                "_name": "Set Left Margin",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\fpdf\\fpdf.py",
                "_lineno": "324"
            },
            {
                "arguments": {
                    "arg": "width"
                },
                "doc": "Set line width",
                "_name": "Set Line Width",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\fpdf\\fpdf.py",
                "_lineno": "575"
            },
            {
                "arguments": {
                    "arg": [
                        "link",
                        "y=0",
                        "page=-1"
                    ]
                },
                "doc": "Set destination of internal link",
                "_name": "Set Link",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\fpdf\\fpdf.py",
                "_lineno": "975"
            },
            {
                "arguments": {
                    "arg": "margin"
                },
                "doc": "Sets the document right, left, top & bottom margins to the same value.\n\nArgs:\n    margin (int): margin in the unit specified to FPDF constructor",
                "_name": "Set Margin",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\fpdf\\fpdf.py",
                "_lineno": "295"
            },
            {
                "arguments": {
                    "arg": [
                        "left",
                        "top",
                        "right=-1"
                    ]
                },
                "doc": "Sets the document left, top & optionaly right margins to the same value.\nBy default, they equal 1 cm.\nAlso sets the current FPDF.y on the page to this minimum vertical position.\n\nArgs:\n    left (int): left margin in the unit specified to FPDF constructor\n    top (int): top margin in the unit specified to FPDF constructor\n    right (int): optional right margin in the unit specified to FPDF constructor",
                "_name": "Set Margins",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\fpdf\\fpdf.py",
                "_lineno": "305"
            },
            {
                "arguments": {
                    "arg": "outdir: str = ."
                },
                "doc": "Set output directory where target files are saved to.\n\n:param outdir: output directory path, default to current directory\nExample:\n    | Set Output Directory | C:\\Users\\MM\\Documents\\ |\n    | Set Output Directory | outdir=C:\\Users\\MM\\Documents\\ |",
                "_name": "Set Output Directory",
                "_lineno": "453"
            },
            {
                "arguments": {
                    "arg": "margin"
                },
                "doc": "Sets the document right margin.\n\nArgs:\n    margin (int): margin in the unit specified to FPDF constructor",
                "_name": "Set Right Margin",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\fpdf\\fpdf.py",
                "_lineno": "345"
            },
            {
                "arguments": {
                    "arg": "factor"
                },
                "doc": "Set from stretch factor percents (default: 100.0)",
                "_name": "Set Stretching",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\fpdf\\fpdf.py",
                "_lineno": "961"
            },
            {
                "arguments": {
                    "arg": "subject"
                },
                "doc": "Subject of document",
                "_name": "Set Subject",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\fpdf\\fpdf.py",
                "_lineno": "404"
            },
            {
                "arguments": {
                    "arg": [
                        "r",
                        "g=-1",
                        "b=-1"
                    ]
                },
                "doc": "Set color for text",
                "_name": "Set Text Color",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\fpdf\\fpdf.py",
                "_lineno": "547"
            },
            {
                "arguments": {
                    "arg": "title"
                },
                "doc": "Title of document",
                "_name": "Set Title",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\fpdf\\fpdf.py",
                "_lineno": "391"
            },
            {
                "arguments": {
                    "arg": "margin"
                },
                "doc": "Sets the document top margin.\n\nArgs:\n    margin (int): margin in the unit specified to FPDF constructor",
                "_name": "Set Top Margin",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\fpdf\\fpdf.py",
                "_lineno": "336"
            },
            {
                "arguments": {
                    "arg": "x"
                },
                "doc": "Set x position",
                "_name": "Set X",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\fpdf\\fpdf.py",
                "_lineno": "1735"
            },
            {
                "arguments": {
                    "arg": [
                        "x",
                        "y"
                    ]
                },
                "doc": "Set x and y positions",
                "_name": "Set Xy",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\fpdf\\fpdf.py",
                "_lineno": "1748"
            },
            {
                "arguments": {
                    "arg": "y"
                },
                "doc": "Set y position and reset x",
                "_name": "Set Y",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\fpdf\\fpdf.py",
                "_lineno": "1743"
            },
            {
                "arguments": {
                    "arg": "source_pdf: str = None"
                },
                "doc": "Switch library's current fileobject to already open file\nor open file if not opened.\n\n:param source_pdf: filepath\n:raises ValueError: if PDF filepath is not given and there are no active\n    file to activate\nExample:\n    | Switch To PDF Document | C:\\Users\\MM\\Downloads\\null.pdf |",
                "_name": "Switch To Pdf Document",
                "_lineno": "494"
            },
            {
                "arguments": {
                    "arg": [
                        "template: str = None",
                        "filename: str = None",
                        "variables: dict = None",
                        "create_dirs: bool = True",
                        "exists_ok: bool = True"
                    ]
                },
                "doc": "Use HTML template file to generate PDF file.\n\n:param template: filepath to HTML template\n:param filename: filepath where to save PDF document\n:param variables: dictionary of variables to fill into template, defaults to {}\n:param create_dirs: directory structure is created if it is missing,\n default `True`\n:param exists_ok: file is overwritten if it exists, default `True`\nExample:\n    | Template Html To Pdf | template=C:\\Users\\MM\\Downloads\\htmlFile.html | filename=C:\\Users\\MM\\Downloads\\htmlToPdf.pdf |",
                "_name": "Template Html To Pdf",
                "_lineno": "558"
            },
            {
                "arguments": {
                    "arg": [
                        "x",
                        "y",
                        "txt="
                    ]
                },
                "doc": "Output a string",
                "_name": "Text",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\fpdf\\fpdf.py",
                "_lineno": "1013"
            },
            {
                "arguments": "",
                "doc": "Ensures that all rendering performed in this context appear on a single page\nby performing page break beforehand if need be.\n\nNote that using this method means to duplicate the FPDF `bytearray` buffer:\nwhen generating large PDFs, doubling memory usage may be troublesome.",
                "_name": "Unbreakable",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\fpdf\\fpdf.py",
                "_lineno": "2666"
            },
            {
                "arguments": {
                    "arg": [
                        "source_pdf: str = None",
                        "target_pdf: str = None",
                        "newvals: dict = None"
                    ]
                },
                "doc": "Update field values in PDF if it has fields.\n\n:param source_pdf: source PDF with fields to update\n:param target_pdf: updated target PDF\n:param newvals: dictionary with key values to update\n Example:\n    | Update Field Values | source_pdf=C:\\Users\\MM\\Downloads\\source.pdf | target_pdf=C:\\Users\\MM\\Downloads\\target.pdf |\n    newvals={'b': '2', 'd': '4'} |",
                "_name": "Update Field Values",
                "_lineno": "915"
            },
            {
                "arguments": {
                    "arg": [
                        "h",
                        "txt=",
                        "link="
                    ]
                },
                "doc": "Output text in flowing mode",
                "_name": "Write",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\fpdf\\fpdf.py",
                "_lineno": "1526"
            },
            {
                "arguments": {
                    "arg": [
                        "text",
                        "*args",
                        "**kwargs"
                    ]
                },
                "doc": "Parse HTML and convert it to PDF",
                "_name": "Write Html",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\fpdf\\html.py",
                "_lineno": "409"
            }
        ],
        "_name": "PDF",
        "_type": "LIBRARY",
        "_format": "ROBOT",
        "_scope": "TEST",
        "_namedargs": "true",
        "_generated": "2021-03-19T11:04:13Z",
        "_specversion": "2",
        "_source": "C:\\Program Files\\Autosphere\\Process Studio\\App\\Python\\Lib\\site-packages\\Autosphere\\PDF.py",
        "_lineno": "391"
    }
}