[
  {
    "keyword": "Boot Time In Seconds From Epoch",
    "arguments": "",
    "description": "Get machine boot time :return: boot time in seconds from Epoch Example: .. code-block:: robotframework ${epoch} Boot Time In Seconds From Epoch"
  },
  {
    "keyword": "Get Boot Time",
    "arguments": "as_datetime: bool = False,datetime_format: str = %Y-%m-%d %H:%M:%S",
    "description": "Get computer boot time in seconds from Epoch or in datetime string. :param as_datetime: if True returns datetime string, otherwise seconds, defaults to False :param datetime_format: datetime string format, defaults to \"%Y-%m-%d %H:%M:%S\" :return: seconds from Epoch or datetime string Example: .. code-block:: robotframework ${boottime} Get Boot Time ${boottime} Get Boot Time as_datetime=True ${boottime} Get Boot Time as_datetime=True datetime_format=%d.%m.%Y"
  },
  {
    "keyword": "Get Machine Name",
    "arguments": "",
    "description": "Get machine name :return: machine name as string Example: .. code-block:: robotframework ${machine} Get Machine Name"
  },
  {
    "keyword": "Get Memory Stats",
    "arguments": "humanized: bool = True",
    "description": "Get computer memory stats and return those in bytes or in humanized memory format. :param humanized: if False returns memory information in bytes, defaults to True :return: memory information in dictionary format Example: .. code-block:: robotframework &{mem} Get Memory Stats &{mem} Get Memory Stats humanized=False"
  },
  {
    "keyword": "Get Username",
    "arguments": "",
    "description": "Get username of logged in user :return: username as string Example: .. code-block:: robotframework ${user} Get Username"
  },
  {
    "keyword": "Kill Process",
    "arguments": "process_name: str",
    "description": "Kill process by name :param process_name: name of the process :return: True if succeeds False if not Example: .. code-block:: robotframework ${process} Process Exists calc strict=False ${status} Kill Process ${process.name()}"
  },
  {
    "keyword": "Kill Process By Pid",
    "arguments": "pid: int",
    "description": "Kill process by pid :param pid: process identifier Example: .. code-block:: robotframework ${process} Process Exists calc strict=False ${status} Kill Process ${process.pid}"
  },
  {
    "keyword": "Process Exists",
    "arguments": "process_name: str,strict: bool = True",
    "description": "Check if process exists by its name :param process_name: search for this process :param strict: defines how match is made, default True which means that process name needs to be exact match and False does inclusive matching :return: process instance or False Example: .. code-block:: robotframework ${process} Process Exists calc ${process} Process Exists calc strict=False"
  },
  {
    "keyword": "Put System To Sleep",
    "arguments": "",
    "description": "Puts system to sleep mode Example: .. code-block:: robotframework Put System To Sleep"
  }
]