{
    "keywordspec": {
        "version": "",
        "scope": "global",
        "namedargs": "yes",
        "doc": "Library handling different database operations.",
        "kw": [
            {
                "arguments": {
                    "arg": [
                        "name",
                        "params=None",
                        "sanstran=False"
                    ]
                },
                "doc": "Call stored procedure with name and params.\n\n:param name: procedure name\n:param params: parameters for the procedure as a list, defaults to None\n:param sanstran: run command without an explicit transaction commit or rollback,\n defaults to False\n\nExample:\n\n.. code-block:: robotframework\n\n    @{params}     Create List   FirstParam   SecondParam   ThirdParam\n    @{results}    Call Stored Procedure   mystpr  ${params}",
                "_name": "Call Stored Procedure",
                "_lineno": "268"
            },
            {
                "arguments": {
                    "arg": [
                        "module_name=None",
                        "database=None",
                        "username=None",
                        "password=None",
                        "host=None",
                        "port=None",
                        "charset=None",
                        "config_file=db.cfg"
                    ]
                },
                "doc": "Connect to database using DB API 2.0 module.\n\n:param module_name: database module to use\n:param database: name of the database\n:param username: of the user accessing the database\n:param password: of the user accessing the database\n:param host: SQL server address\n:param port: SQL server port\n:param charset: for example, \"utf-8\", defaults to None\n:param config_file: location of configuration file, defaults to \"db.cfg\"\n\n\nExample:\n\n.. code-block:: robotframework\n\n    Connect To Database  pymysql  database  username  password  host  port\n    Connect To Database  ${CURDIR}${/}resources${/}dbconfig.cfg",
                "_name": "Connect To Database",
                "_lineno": "115"
            },
            {
                "arguments": {
                    "arg": "table"
                },
                "doc": "Get description of the SQL table\n\n:param table: name of the SQL table\n\nExample:\n\n.. code-block:: robotframework\n\n    Connect To Database    pymysql  mydb  user  pass  127.0.0.1\n    ${db_description}      Description  mytable",
                "_name": "Description",
                "_lineno": "307"
            },
            {
                "arguments": "",
                "doc": "Close connection to SQL database\n\nExample:\n\n.. code-block:: robotframework\n\n    Connect To Database    pymysql  mydb  user  pass  127.0.0.1\n    ${result}              Query   Select firstname, lastname FROM table\n    Disconnect From Database",
                "_name": "Disconnect From Database",
                "_lineno": "329"
            },
            {
                "arguments": {
                    "arg": [
                        "filename",
                        "sanstran=False"
                    ]
                },
                "doc": "Execute content of SQL script as SQL commands.\n\n:param filename: filepath to SQL script to execute\n:param sanstran: run command without an explicit transaction commit or rollback,\n defaults to False\n\nExample:\n\n.. code-block:: robotframework\n\n    Execute SQL Script   script.sql",
                "_name": "Execute Sql Script",
                "_lineno": "345"
            },
            {
                "arguments": {
                    "arg": [
                        "table",
                        "conditions=None"
                    ]
                },
                "doc": "Get number of rows in a table. Conditions can be given\nas arguments for WHERE clause.\n\n:param table: name of the SQL table\n:param conditions: restrictions for selections, defaults to None\n\nExample:\n\n.. code-block:: robotframework\n\n    ${count}   Get Number Of Rows  tablename\n    ${count}   Get Number Of Rows  tablename  column1=5 and column2='x'",
                "_name": "Get Number Of Rows",
                "_lineno": "512"
            },
            {
                "arguments": {
                    "arg": [
                        "table",
                        "columns=None",
                        "conditions=None",
                        "as_table=True"
                    ]
                },
                "doc": "Get rows from table. Columns and conditions can be\nset to filter result.\n\n:param table: name of the SQL table\n:param columns: name of columns to return, defaults to `None`\n means that all columns are returned\n:param conditions: limiting result by WHERE clause, defaults to `None`\n:param as_table: if result should be instance of ``Table``, defaults to `True`\n `False` means that return type would be `list`\n\nExample:\n\n.. code-block:: robotframework\n\n    @{res}   Get Rows  tablename  arvo\n    @{res}   Get Rows  tablename  arvo  columns=id,name\n    @{res}   Get Rows  tablename  columns=id  conditions=column1='newvalue'\n    @{res}   Get Rows  tablename  conditions=column2='updatedvalue'",
                "_name": "Get Rows",
                "_lineno": "485"
            },
            {
                "arguments": {
                    "arg": [
                        "statement",
                        "assertion=None",
                        "sanstran=False",
                        "as_table=True"
                    ]
                },
                "doc": "Make a SQL query.\n\n:param statement: SQL statement to execute\n:param assertion: assert on query result, row_count or columns.\n Works only for SELECT statements Defaults to None.\n:param sanstran: run command without an explicit transaction commit or rollback,\n defaults to False\n:param as_table: if result should be instance of ``Table``, defaults to `True`\n `False` means that return type would be `list`\n\nExample:\n\n.. code-block:: robotframework\n\n    @{res}   Query   Select firstname, lastname FROM table\n    FOR  ${row}  IN  @{RES}\n        Log   ${row}\n    END\n    @{res}   Query  Select * FROM table  row_count > ${EXPECTED}\n    @{res}   Query  Select * FROM table  'arvo' in columns\n    @{res}   Query  Select * FROM table  columns == ['id', 'arvo']",
                "_name": "Query",
                "_lineno": "398"
            },
            {
                "arguments": {
                    "arg": "autocommit=True"
                },
                "doc": "Set database auto commit mode.\n\n:param autocommit: boolean value for auto commit, defaults to True\n\nExample:\n\n.. code-block:: robotframework\n\n    Set Auto Commit             # auto commit is set on\n    Set Auto Commit   False     # auto commit is turned off",
                "_name": "Set Auto Commit",
                "_lineno": "470"
            }
        ],
        "_name": "Database",
        "_type": "LIBRARY",
        "_format": "ROBOT",
        "_scope": "GLOBAL",
        "_namedargs": "true",
        "_generated": "2021-03-19T11:01:00Z",
        "_specversion": "2",
        "_source": "C:\\Program Files\\Autosphere\\Process Studio\\App\\Python\\Lib\\site-packages\\Autosphere\\Database.py",
        "_lineno": "103"
    }
}