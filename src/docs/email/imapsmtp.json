{
    "keywordspec": {
        "version": "",
        "scope": "test case",
        "namedargs": "yes",
        "doc": "Autosphere Framework library providing SMTP and IMAP operations for\nspecified mail server.\n\nProper initialization needs `smtp_server` and `imap_server` defined.",
        "init": {
            "arguments": {
                "arg": [
                    "smtp_server: str = None",
                    "smtp_port: int = 587",
                    "imap_server: str = None",
                    "imap_port: int = 993",
                    "account: str = None",
                    "password: str = None"
                ]
            },
            "doc": "Initialize self.  See help(type(self)) for accurate signature.",
            "_lineno": "69"
        },
        "kw": [
            {
                "arguments": {
                    "arg": [
                        "account: str = None",
                        "password: str = None",
                        "smtp_server: str = None",
                        "imap_server: str = None",
                        "smtp_port: int = None",
                        "imap_port: int = None"
                    ]
                },
                "doc": "Authorize user to SMTP and IMAP servers.\n\nWill use separately set credentials or those given in keyword call.\n\n:param account: user account as string, defaults to None\n:param password: user password as string, defaults to None\n:param smtp_server: SMTP server address, defaults to None\n:param imap_server: IMAP server address, defaults to None\n:param smtp_port: SMTP server port, defaults to None (587 for SMTP)\n:param imap_port: IMAP server port, defaults to None\n\nExample:\n\n.. code-block:: robotframework\n\n    Authorize    ${username}   ${password}  smtp_server=smtp.gmail.com  smtp_port=587",
                "_name": "Authorize",
                "_lineno": "226"
            },
            {
                "arguments": {
                    "arg": [
                        "account: str = None",
                        "password: str = None",
                        "imap_server: str = None",
                        "imap_port: int = None"
                    ]
                },
                "doc": "Authorize to IMAP server.\n\nCan be called without giving any parameters if library\nhas been initialized with necessary information and/or\nkeyword ``set_credentials`` has been used.\n\n:param account: IMAP account name, defaults to None\n:param password: IMAP account password, defaults to None\n:param imap_server: IMAP server address, defaults to None\n:param imap_port: IMAP server port, defaults to None\n\nExample:\n\n.. code-block:: robotframework\n\n    Authorize IMAP    ${username}   ${password}  imap.gmail.com  993",
                "_name": "Authorize Imap",
                "_lineno": "180"
            },
            {
                "arguments": {
                    "arg": [
                        "account: str = None",
                        "password: str = None",
                        "smtp_server: str = None",
                        "smtp_port: int = None"
                    ]
                },
                "doc": "Authorize to SMTP server.\n\nCan be called without giving any parameters if library\nhas been initialized with necessary information and/or\nkeyword ``set_credentials`` has been used.\n\n:param account: SMTP account name, defaults to None\n:param password: SMTP account password, defaults to None\n:param smtp_server: SMTP server address, defaults to None\n:param smtp_port: SMTP server port, defaults to None (587 for SMTP)\n\nExample:\n\n.. code-block:: robotframework\n\n    Authorize SMTP    ${username}   ${password}  smtp.gmail.com  587",
                "_name": "Authorize Smtp",
                "_lineno": "126"
            },
            {
                "arguments": {
                    "arg": "folder_name: str = None"
                },
                "doc": "Create email folder\n\n:param folder_name: name for the new folder\n:return: True if operation was successful, False if not\n\nExample:\n\n.. code-block:: robotframework\n\n    Create Folder   filtered",
                "_name": "Create Folder",
                "_lineno": "834"
            },
            {
                "arguments": {
                    "arg": "folder_name: str = None"
                },
                "doc": "Delete email folder\n\n:param folder_name: current folder name\n:return: True if operation was successful, False if not\n\nExample:\n\n.. code-block:: robotframework\n\n    Delete Folder   filtered",
                "_name": "Delete Folder",
                "_lineno": "805"
            },
            {
                "arguments": {
                    "arg": "criterion: str ="
                },
                "doc": "Delete single message from server based on criterion.\n\nIf criterion does not return exactly 1 message then delete is not done.\n\n:param criterion: filter messages based on this, defaults to \"\"\n:return: True if success, False if not\n\nExample:\n\n.. code-block:: robotframework\n\n    Delete Message  SUBJECT \"Greetings Autosphere developer\"",
                "_name": "Delete Message",
                "_lineno": "500"
            },
            {
                "arguments": {
                    "arg": "criterion: str ="
                },
                "doc": "Delete messages from server based on criterion.\n\n:param criterion: filter messages based on this, defaults to \"\"\n:return: True if success, False if not\n\nExample:\n\n.. code-block:: robotframework\n\n    Delete Messages  SUBJECT Greetings",
                "_name": "Delete Messages",
                "_lineno": "529"
            },
            {
                "arguments": {
                    "arg": [
                        "criterion: str =",
                        "actions: list = None",
                        "source_folder: str = None",
                        "target_folder: str = None",
                        "labels: str = None",
                        "limit: int = None",
                        "overwrite: bool = False"
                    ]
                },
                "doc": "Do actions to messages matching criterion and if given,\nsource folder\n\nActions can be:\n\n- msg_copy\n- msg_delete\n- msg_flag\n- msg_unflag\n- msg_read\n- msg_unread\n- msg_save\n- msg_attachment_save\n- glabel_add\n- glabel_remove\n\nResult object contains following attributes:\n\n- actions_done, number of messages on which action was performed\n- message_count, number of messages matching criterion\n- ids, message ids matching criterion\n- uids, dictionary of message uids and message content\n\n:param criterion: perform actions on messages matching this\n:param actions: list of actions to perform on matching messages\n:param source_folder: look for messages in this folder, default all folders\n:param target_folder: can be file path or email folder\n (for example action: msg_copy)\n:param labels: comma separated list of labels (for example action: glabel_add)\n:param limit:  maximum number of messages (for example action: msg_delete)\n:param overwrite: to control if file should overwrite\n (for example action: msg_attachment_save)\n:return: result object\n\nExample:\n\n.. code-block:: robotframework\n\n    ${actions}=   Create List  msg_unflag  msg_read  msg_save  msg_attachment_save\n    Do Message Actions    SUBJECT \"Order confirmation\"\n    ...                   ${actions}\n    ...                   source_folder=XXX\n    ...                   target_folder=${CURDIR}\n    ...                   overwrite=True",
                "_name": "Do Message Actions",
                "_lineno": "981"
            },
            {
                "arguments": {
                    "arg": [
                        "criterion: str = None",
                        "unflag: bool = False"
                    ]
                },
                "doc": "Mark messages as `flagged`\n\n:param criterion: mark messages matching criterion\n:param unflag: to mark messages as not `flagged`\n:return: successful operations (int), matching messages (int)\n\nExample:\n\n.. code-block:: robotframework\n\n    ${flagged}  ${oftotal}    Flag Messages   SUBJECT Autosphere\n    ${unflagged}  ${oftotal}  Flag Messages   SUBJECT Autosphere  unflag=True",
                "_name": "Flag Messages",
                "_lineno": "863"
            },
            {
                "arguments": {
                    "arg": [
                        "subdirectory: str = None",
                        "pattern: str = None"
                    ]
                },
                "doc": "Get list of folders on the server\n\n:param subdirectory: list subdirectories for this folder\n:param pattern: list folders matching this pattern\n:return: list of folders\n\nExample:\n\n.. code-block:: robotframework\n\n    @{folders}  Get Folder List\n    @{folders}  Get Folder List  pattern=important\n    @{folders}  Get Folder List  subdirectory=sub",
                "_name": "Get Folder List",
                "_lineno": "715"
            },
            {
                "arguments": {
                    "arg": "criterion: str ="
                },
                "doc": "Return list of messages matching criterion.\n\n:param criterion: list emails matching this, defaults to \"\"\n:return: list of messages or False\n\nExample:\n\n.. code-block:: robotframework\n\n    @{emails}  List Messages  SUBJECT \"Autosphere task\"\n    FOR  ${email}  IN  @{EMAILS}\n        Log  ${email}[Subject]\n        Log  ${email}[From]\n        Log  ${email}[Date]\n        Log  ${email}[Delivered-To]\n        Log  ${email}[Received]\n        Log  ${email}[Has-Attachments]\n    END",
                "_name": "List Messages",
                "_lineno": "579"
            },
            {
                "arguments": {
                    "arg": [
                        "criterion: str = None",
                        "unread: bool = False"
                    ]
                },
                "doc": "Mark messages as `read`\n\n:param criterion: mark messages matching criterion\n:param unread: to mark messages as not `read`\n:return: successful operations (int), matching messages (int)\n\nExample:\n\n.. code-block:: robotframework\n\n    ${read}  ${oftotal}  Mark As Read   SUBJECT Autosphere",
                "_name": "Mark As Read",
                "_lineno": "907"
            },
            {
                "arguments": {
                    "arg": "criterion: str = None"
                },
                "doc": "Mark messages as not `read`\n\n:param criterion: mark messages matching criterion\n:return: successful operations (int), matching messages (int)\n\nExample:\n\n.. code-block:: robotframework\n\n    ${unread}  ${oftotal}  Mark As Unread   SUBJECT Autosphere",
                "_name": "Mark As Unread",
                "_lineno": "934"
            },
            {
                "arguments": {
                    "arg": [
                        "criterion: str = None",
                        "target_folder: str = None",
                        "source_folder: str = None"
                    ]
                },
                "doc": "Move messages from source folder to target folder\n\n:param criterion: move messages matching criterion\n:param source_folder: location of the messages, default `INBOX`\n:param target_folder: where messages should be move into\n\nExample:\n\n.. code-block:: robotframework\n\n    ${result}=    Move Messages\n    ...    criterion=SUBJECT \"order confirmation 32\"\n    ...    target_folder=yyy\n\n    ${result}=    Move Messages\n    ...    criterion=ALL\n    ...    source_folder=yyy\n    ...    target_folder=XXX",
                "_name": "Move Messages",
                "_lineno": "1049"
            },
            {
                "arguments": {
                    "arg": [
                        "labels",
                        "criterion",
                        "source_folder: str = None"
                    ]
                },
                "doc": "Remove GMail labels to messages matching criterion and if given,\nsource folder\n\n:param labels: comma separated list of labels to remove\n:param criterion: unlabel messages matching criterion\n:param source_folder: look for messages in this folder, default all folders\n:return: status of the operation\n\nExample:\n\n.. code-block:: robotframework\n\n    Remove Gmail Labels  wip  SUBJECT \"order confirmation\"\n    Remove Gmail Labels  wip  SUBJECT \"order confirmation\"  customerfolder",
                "_name": "Remove Gmail Labels",
                "_lineno": "960"
            },
            {
                "arguments": {
                    "arg": [
                        "oldname: str = None",
                        "newname: str = None",
                        "suppress_error: bool = False"
                    ]
                },
                "doc": "Rename email folder\n\n:param oldname: current folder name\n:param newname: new name for the folder\n:param suppress_error: to silence warning message, defaults to False\n:return: True if operation was successful, False if not\n\nExample:\n\n.. code-block:: robotframework\n\n    Rename Folder   subfolder   filtered",
                "_name": "Rename Folder",
                "_lineno": "770"
            },
            {
                "arguments": {
                    "arg": [
                        "message",
                        "target_folder",
                        "overwrite"
                    ]
                },
                "doc": "Save mail attachment into local folder\n\n:param message: message item\n:param target_folder: local folder for saving attachments to (needs to exist),\n    defaults to user's home directory if None\n:param overwrite: overwrite existing file is True, defaults to False\n\nExample:\n\n.. code-block:: robotframework\n\n    @{emails}  List Messages  SUBJECT \"Autosphere task\"\n    FOR  ${email}  IN  @{EMAILS}\n        Run Keyword If   ${email}[Has-Attachments] == True\n        ...              Save Attachment  ${email}  target_folder=${CURDIR}  overwrite=True\n    END",
                "_name": "Save Attachment",
                "_lineno": "634"
            },
            {
                "arguments": {
                    "arg": [
                        "criterion: str =",
                        "target_folder: str = None",
                        "overwrite: bool = False"
                    ]
                },
                "doc": "Save mail attachments into local folder.\n\n:param criterion: attachments are saved for mails matching this, defaults to \"\"\n:param target_folder: local folder for saving attachments to (needs to exist),\n    defaults to user's home directory if None\n:param overwrite: overwrite existing file is True, defaults to False\n:return: list of saved attachments or False\n\nExample:\n\n.. code-block:: robotframework\n\n    ${numsaved}  Save Attachments   SUBJECT \"Autosphere task\"\n    ...          target_folder=${CURDIR}${/}messages  overwrite=True",
                "_name": "Save Attachments",
                "_lineno": "606"
            },
            {
                "arguments": {
                    "arg": [
                        "criterion: str =",
                        "target_folder: str = None"
                    ]
                },
                "doc": "Save messages based on criteria and store them to target folder\nwith attachment files.\n\nDoes not save message if `target_folder` is not given.\n\n:param criterion: filter messages based on this, defaults to \"\"\n:param target_folder: path to folder where message are saved, defaults to None\n:return: True if success, False if not\n\nExample:\n\n.. code-block:: robotframework\n\n    Save Messages  SUBJECT Important message  target_folder=${USERDIR}${/}messages",
                "_name": "Save Messages",
                "_lineno": "548"
            },
            {
                "arguments": {
                    "arg": "folder_name: str = INBOX"
                },
                "doc": "Select folder by name\n\nReturns number of messages in the folder or\nexception if folder does not exist on the server.\n\n:param folder_name: name of the folder to select\n:return: message count in the selected folder\n\nExample:\n\n.. code-block:: robotframework\n\n    Select Folder   subfolder",
                "_name": "Select Folder",
                "_lineno": "745"
            },
            {
                "arguments": {
                    "arg": [
                        "sender: str",
                        "recipients: str",
                        "subject: str =",
                        "body: str =",
                        "attachments: str = None",
                        "html: bool = False",
                        "images: str = None"
                    ]
                },
                "doc": "Send SMTP email\n\nValid sender values:\n    - First Lastname <address@domain>\n    - address@domain\n\n:param sender: who is sending, ie. 'from'\n:param recipients: who is receiving, ie. 'to'\n:param subject: mail subject field\n:param body: mail body content\n:param attachments: list of filepaths to attach, defaults to []\n:param html: if message content is in HTML, default `False`\n:param images: list of filepaths for inline use, defaults to []\n\nExample:\n\n.. code-block:: robotframework\n\n    Send Message  sender@domain.com  recipient@domain.com\n    ...           subject=Greetings Software Robot Developer\n    ...           body=${email_body}\n    ...           attachments:${CURDIR}${/}report.pdf",
                "_name": "Send Message",
                "_lineno": "272"
            },
            {
                "arguments": "",
                "doc": "Send hello message to SMTP server.\n\nRequired step when creating SMTP connection.\n\n.. code-block:: robotframework\n\n    Send SMTP Hello",
                "_name": "Send Smtp Hello",
                "_lineno": "258"
            },
            {
                "arguments": {
                    "arg": [
                        "account: str = None",
                        "password: str = None"
                    ]
                },
                "doc": "Set credentials\n\n:param account: user account as string, defaults to None\n:param password: user password as string, defaults to None\n\nExample:\n\n.. code-block:: robotframework\n\n    Set Credentials   ${username}   ${password}\n    Authorize",
                "_name": "Set Credentials",
                "_lineno": "107"
            },
            {
                "arguments": {
                    "arg": "criterion: str = None"
                },
                "doc": "Mark messages as not `flagged`\n\n:param criterion: mark messages matching criterion\n:return: successful operations (int), matching messages (int)\n\nExample:\n\n.. code-block:: robotframework\n\n    ${unflagged}  ${oftotal}  Unflag Messages   SUBJECT Autosphere",
                "_name": "Unflag Messages",
                "_lineno": "891"
            },
            {
                "arguments": {
                    "arg": [
                        "criterion: str =",
                        "timeout: float = 5.0",
                        "interval: float = 1.0"
                    ]
                },
                "doc": "Wait for email matching `criterion` to arrive into mailbox.\n\n:param criterion: message filter to wait for, defaults to \"\"\n:param timeout: total time in seconds to wait for email, defaults to 5.0\n:param interval: time in seconds for new check, defaults to 1.0\n:return: list of messages or False\n\nExample:\n\n.. code-block:: robotframework\n\n    @{emails}  Wait For Message  SUBJECT \"Autosphere task\"  timeout=300  interval=10",
                "_name": "Wait For Message",
                "_lineno": "672"
            }
        ],
        "_name": "ImapSmtp",
        "_type": "LIBRARY",
        "_format": "ROBOT",
        "_scope": "TEST",
        "_namedargs": "true",
        "_generated": "2021-03-19T10:25:09Z",
        "_specversion": "2",
        "_source": "C:\\Program Files\\Autosphere\\Process Studio\\App\\Python\\Lib\\site-packages\\Autosphere\\Email\\ImapSmtp.py",
        "_lineno": "62"
    }
}