[
  {
    "keyword": "Add To Archive",
    "arguments": "files: typing.Any,archive_name: str,folder: str = None",
    "description": "Add file(s) to the archive This keyword adds file or list of files into existing archive. Files can be added to archive structure with relative path using argument folder. :param files: name of the file, or list of files, to add :param archive_name: filename of the archive :param folder: name of the folder for added file (relative path in the archive) Example: .. code-block:: robotframework Add To Archive extrafile.txt myfiles.zip Add To Archive stat.png archive.tar.gz images @{files} Create List filename1.txt filename2.txt Add To Archive ${files} files.tar"
  },
  {
    "keyword": "Archive Folder With Tar",
    "arguments": "folder: str,archive_name: str,recursive: bool = False,include: str = None,exclude: str = None",
    "description": "Create a tar/tar.gz archive of a folder This keyword creates an TAR or TAR.GZ archive of a local folder. Type of archive is determined by the file extension. By default subdirectories are not included, but they can included using recursive argument. To include only certain files, like TXT files, the argument include can be used. Similarly to exclude certain file, like dotfiles, the argument exclude can be used. :param folder: name of the folder to archive :param archive_name: filename of the archive :param recursive: should sub directories be included, defaults is False :param include: define file pattern to include in the package, defaults to None (means all files) :param exclude: define file pattern to exclude from the package, defaults is None Example: .. code-block:: robotframework Archive Folder With TAR ${CURDIR}${/}documents documents.tar Archive Folder With TAR ${CURDIR}${/}tasks tasks.tar.gz include=*.robot Archive Folder With TAR ${CURDIR}${/}tasks tasks.tar exclude=/.* Archive Folder With TAR ${CURDIR}${/}documents documents.tar recursive=True"
  },
  {
    "keyword": "Archive Folder With Zip",
    "arguments": "folder: str,archive_name: str,recursive: bool = False,include: str = None,exclude: str = None,compression: str = stored",
    "description": "Create a zip archive of a folder This keyword creates an ZIP archive of a local folder. By default subdirectories are not included, but they can included using recursive argument. To include only certain files, like TXT files, the argument include can be used. Similarly to exclude certain file, like dotfiles, the argument exclude can be used. Compression methods: stored, default deflated bzip2 lzma :param folder: name of the folder to archive :param archive_name: filename of the archive :param recursive: should sub directories be included, defaults is False :param include: define file pattern to include in the package, defaults to None (means all files) :param exclude: define file pattern to exclude from the package, defaults is None :param compression: type of package compression method, defaults to \"stored\" Example: .. code-block:: robotframework Archive Folder With Zip ${CURDIR}${/}documents mydocs.zip Archive Folder With Zip ${CURDIR}${/}tasks robottasks.zip include=*.robot Archive Folder With Zip ${CURDIR}${/}tasks no_dotfiles.zip exclude=/.* Archive Folder With Zip ${CURDIR}${/}documents documents.zip recursive=True Archive Folder With Zip ${CURDIR} packagelzma.zip compression=lzma Archive Folder With Zip ${CURDIR} bzipped.zip compression=bzip2"
  },
  {
    "keyword": "Extract Archive",
    "arguments": "archive_name: str,path: str = None,members: typing.Any = None",
    "description": "Extract files from archive into local directory This keyword supports extracting files from zip, tar and tar.gz archives. By default file is extracted into current working directory, but path argument can be set to define extraction path. :param archive_name: filename of the archive :param path: filepath to extract file into, default is current working directory :param members: list of files to extract from, default is None (all files in archive are extracted) Example: .. code-block:: robotframework Extract Archive myfiles.zip ${CURDIR}${/}extracted @{files} Create List filename1.txt filename2.txt Extract Archive archive.tar C:${/}myfiles${/} ${files}"
  },
  {
    "keyword": "Extract File From Archive",
    "arguments": "filename: str,archive_name: str,path: str = None",
    "description": "Extract a file from archive into local directory This keyword supports extracting a file from zip, tar and tar.gz archives. By default file is extracted into current working directory, but path argument can be set to define extraction path. :param filename: name of the file to extract :param archive_name: filename of the archive :param path: filepath to extract file into, default is current working directory Example: .. code-block:: robotframework Extract File From Archive extrafile.txt myfiles.zip Extract File From Archive background.png images.tar.gz ${CURDIR}${/}extracted"
  },
  {
    "keyword": "Get Archive Info",
    "arguments": "archive_name: str",
    "description": "Get information about the archive Returns following file attributes in a dictionary: filename filemode size mtime last modification time in format %d.%m.%Y %H:%M:%S :param archive_name: filename of the archive Example: .. code-block:: robotframework &{archiveinfo} Get Archive Info myfiles.zip"
  },
  {
    "keyword": "List Archive",
    "arguments": "archive_name: str",
    "description": "List files in an archive Returns list of file, where each file in a list is a dictionary with following attributes: name size mtime last modification time in format %d.%m.%Y %H:%M:%S :param archive_name: filename of the archive Example: .. code-block:: robotframework @{files} List Archive myfiles.zip FOR ${file} IN ${files} Log ${file}[filename] Log ${file}[size] Log ${file}[mtime] END"
  }
]