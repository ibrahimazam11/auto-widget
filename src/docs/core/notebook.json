{
   "keywordspec": {
      "version": "",
      "scope": "global",
      "namedargs": "yes",
      "doc": "Documentation for library ``notebook``.",
      "kw": [
         {
            "arguments": {
               "arg": [
                  "*objs",
                  "include=None",
                  "exclude=None",
                  "metadata=None",
                  "transient=None",
                  "display_id=None",
                  "**kwargs"
               ]
            },
            "doc": "Display a Python object in all frontends.\n\nBy default all representations will be computed and sent to the frontends.\nFrontends can decide which representation is used and how.\n\nIn terminal IPython this will be similar to using :func:`print`, for use in richer\nfrontends see Jupyter notebook examples with rich display logic.\n\nParameters\n----------\nobjs : tuple of objects\n    The Python objects to display.\nraw : bool, optional\n    Are the objects to be displayed already mimetype-keyed dicts of raw display data,\n    or Python objects that need to be formatted before display? [default: False]\ninclude : list, tuple or set, optional\n    A list of format type strings (MIME types) to include in the\n    format data dict. If this is set *only* the format types included\n    in this list will be computed.\nexclude : list, tuple or set, optional\n    A list of format type strings (MIME types) to exclude in the format\n    data dict. If this is set all format types will be computed,\n    except for those included in this argument.\nmetadata : dict, optional\n    A dictionary of metadata to associate with the output.\n    mime-type keys in this dictionary will be associated with the individual\n    representation formats, if they exist.\ntransient : dict, optional\n    A dictionary of transient data to associate with the output.\n    Data in this dict should not be persisted to files (e.g. notebooks).\ndisplay_id : str, bool optional\n    Set an id for the display.\n    This id can be used for updating this display area later via update_display.\n    If given as `True`, generate a new `display_id`\nkwargs: additional keyword-args, optional\n    Additional keyword-arguments are passed through to the display publisher.\n\nReturns\n-------\n\nhandle: DisplayHandle\n    Returns a handle on updatable displays for use with :func:`update_display`,\n    if `display_id` is given. Returns :any:`None` if no `display_id` is given\n    (default).\n\nExamples\n--------\n\n>>> class Json(object):\n...     def __init__(self, json):\n...         self.json = json\n...     def _repr_pretty_(self, pp, cycle):\n...         import json\n...         pp.text(json.dumps(self.json, indent=2))\n...     def __repr__(self):\n...         return str(self.json)\n...\n\n>>> d = Json({1:2, 3: {4:5}})\n\n>>> print(d)\n{1: 2, 3: {4: 5}}\n\n>>> display(d)\n{\n  \"1\": 2,\n  \"3\": {\n    \"4\": 5\n  }\n}\n\n>>> def int_formatter(integer, pp, cycle):\n...     pp.text('I'*integer)\n\n>>> plain = get_ipython().display_formatter.formatters['text/plain']\n>>> plain.for_type(int, int_formatter)\n<function _repr_pprint at 0x...>\n>>> display(7-5)\nII\n\n>>> del plain.type_printers[int]\n>>> display(7-5)\n2\n\nSee Also\n--------\n\n:func:`update_display`\n\nNotes\n-----\n\nIn Python, objects can declare their textual representation using the\n`__repr__` method. IPython expands on this idea and allows objects to declare\nother, rich representations including:\n\n  - HTML\n  - JSON\n  - PNG\n  - JPEG\n  - SVG\n  - LaTeX\n\nA single object can declare some or all of these representations; all are\nhandled by IPython's display system.\n\nThe main idea of the first approach is that you have to implement special\ndisplay methods when you define your class, one for each representation you\nwant to use. Here is a list of the names of the special methods and the\nvalues they must return:\n\n  - `_repr_html_`: return raw HTML as a string, or a tuple (see below).\n  - `_repr_json_`: return a JSONable dict, or a tuple (see below).\n  - `_repr_jpeg_`: return raw JPEG data, or a tuple (see below).\n  - `_repr_png_`: return raw PNG data, or a tuple (see below).\n  - `_repr_svg_`: return raw SVG data as a string, or a tuple (see below).\n  - `_repr_latex_`: return LaTeX commands in a string surrounded by \"$\",\n                    or a tuple (see below).\n  - `_repr_mimebundle_`: return a full mimebundle containing the mapping\n                         from all mimetypes to data.\n                         Use this for any mime-type not listed above.\n\nThe above functions may also return the object's metadata alonside the\ndata.  If the metadata is available, the functions will return a tuple\ncontaining the data and metadata, in that order.  If there is no metadata\navailable, then the functions will return the data only.\n\nWhen you are directly writing your own classes, you can adapt them for\ndisplay in IPython by following the above approach. But in practice, you\noften need to work with existing classes that you can't easily modify.\n\nYou can refer to the documentation on integrating with the display system in\norder to register custom formatters for already existing types\n(:ref:`integrating_rich_display`).\n\n.. versionadded:: 5.4 display available without import\n.. versionadded:: 6.1 display available without import\n\nSince IPython 5.4 and 6.1 :func:`display` is automatically made available to\nthe user without import. If you are using display in a document that might\nbe used in a pure python context or with older version of IPython, use the\nfollowing import at the top of your file::\n\n    from IPython.display import display",
            "_name": "Display",
            "_source": "C:\\Program Files\\Autosphere\\Process Tray\\App\\Python\\lib\\site-packages\\IPython\\core\\display.py",
            "_lineno": "131"
         },
         {
            "arguments": {
               "arg": [
                  "audio"
               ]
            },
            "doc": "Display IPython Audio object in the notebook\n\n:param audio: path to the audio file",
            "_name": "Notebook Audio",
            "_lineno": "133"
         },
         {
            "arguments": {
               "arg": [
                  "directory",
                  "recursive=False"
               ]
            },
            "doc": "Display IPython FileLinks object in the notebook\n\n:param directory: location of the directory\n:param recursive: if all subdirectories should be shown also, defaults to False",
            "_name": "Notebook Dir",
            "_lineno": "86"
         },
         {
            "arguments": {
               "arg": [
                  "filepath"
               ]
            },
            "doc": "Display IPython FileLink object in the notebook\n\n:param filepath: location of the file",
            "_name": "Notebook File",
            "_lineno": "76"
         },
         {
            "arguments": {
               "arg": [
                  "image"
               ]
            },
            "doc": "Display IPython Image object in the notebook\n\n:param image: path to the image file",
            "_name": "Notebook Image",
            "_lineno": "113"
         },
         {
            "arguments": {
               "arg": [
                  "json_object"
               ]
            },
            "doc": "Display IPython JSON object in the notebook\n\n:param json_object: item to show",
            "_name": "Notebook Json",
            "_lineno": "143"
         },
         {
            "arguments": {
               "arg": [
                  "arg=None",
                  "**kwargs"
               ]
            },
            "doc": "Display IPython Markdown object in the notebook\n\nValid parameters are `text`, `image`, `link` or `table`.\n\n:param text: string to output (can contain markdown)\n:param image: path to the image file\n:param link: path to the link\n:param table: `Autosphere.Table` object to print",
            "_name": "Notebook Print",
            "_lineno": "55"
         },
         {
            "arguments": {
               "arg": [
                  "table",
                  "count: int = 20"
               ]
            },
            "doc": "Display Autosphere.Table as IPython Markdown object in the notebook\n\n:param table: `Autosphere.Table` object to print",
            "_name": "Notebook Table",
            "_lineno": "97"
         },
         {
            "arguments": {
               "arg": [
                  "video"
               ]
            },
            "doc": "Display IPython Video object in the notebook\n\n:param video: path to the video file",
            "_name": "Notebook Video",
            "_lineno": "123"
         },
         {
            "arguments": {
               "arg": [
                  "f"
               ]
            },
            "doc": "",
            "_name": "Print Precheck",
            "_lineno": "36"
         },
         {
            "arguments": {
               "arg": [
                  "wrapped",
                  "assigned=('__module__', '__name__', '__qualname__', '__doc__', '__annotations__')",
                  "updated=('__dict__',)"
               ]
            },
            "doc": "Decorator factory to apply update_wrapper() to a wrapper function\n\nReturns a decorator that invokes update_wrapper() with the decorated\nfunction as the wrapper argument and the arguments to wraps() as the\nremaining arguments. Default arguments are as for update_wrapper().\nThis is a convenience function to simplify applying partial() to\nupdate_wrapper().",
            "_name": "Wraps",
            "_source": "C:\\Program Files\\Autosphere\\Process Tray\\App\\Python\\lib\\functools.py",
            "_lineno": "63"
         }
      ],
      "_name": "notebook",
      "_type": "LIBRARY",
      "_format": "ROBOT",
      "_scope": "GLOBAL",
      "_namedargs": "true",
      "_generated": "2021-03-30T11:11:52Z",
      "_specversion": "2",
      "_source": "C:\\Program Files\\Autosphere\\Process Studio\\App\\Python\\Lib\\site-packages\\Autosphere\\core\\notebook.py",
      "_lineno": "1"
   }
}