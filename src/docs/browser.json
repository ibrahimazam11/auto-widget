{
    "keywordspec": {
        "version": "5.1.1",
        "scope": "global",
        "namedargs": "yes",
        "doc": "Autosphere Framework library for Browser operations.\n\nExtends functionality of SeleniumLibrary, for more information see\nhttps://robotframework.org/SeleniumLibrary/SeleniumLibrary.html",
        "init": {
            "arguments": {
                "arg": [
                    "*args",
                    "**kwargs"
                ]
            },
            "doc": "SeleniumLibrary can be imported with several optional arguments.\n\n- ``timeout``:\n  Default value for `timeouts` used with ``Wait ...`` keywords.\n- ``implicit_wait``:\n  Default value for `implicit wait` used when locating elements.\n- ``run_on_failure``:\n  Default action for the `run-on-failure functionality`.\n- ``screenshot_root_directory``:\n  Path to folder where possible screenshots are created or EMBED.\n  See `Set Screenshot Directory` keyword for further details about EMBED.\n  If not given, the directory where the log file is written is used.\n- ``plugins``:\n  Allows extending the SeleniumLibrary with external Python classes.\n- ``event_firing_webdriver``:\n  Class for wrapping Selenium with\n  [https://seleniumhq.github.io/selenium/docs/api/py/webdriver_support/selenium.webdriver.support.event_firing_webdriver.html#module-selenium.webdriver.support.event_firing_webdriver|EventFiringWebDriver]",
            "_lineno": "58"
        },
        "kw": [
            {
                "arguments": {
                    "arg": [
                        "name: str",
                        "value: str",
                        "path: str = None",
                        "domain: str = None",
                        "secure: bool = None",
                        "expiry: str = None"
                    ]
                },
                "doc": "Adds a cookie to your current session.\n\n``name`` and ``value`` are required, ``path``, ``domain``, ``secure``\nand ``expiry`` are optional.  Expiry supports the same formats as\nthe [http://robotframework.org/robotframework/latest/libraries/DateTime.html|DateTime]\nlibrary or an epoch timestamp.\n\nExample:\n| `Add Cookie` | foo | bar |                            |\n| `Add Cookie` | foo | bar | domain=example.com         |\n| `Add Cookie` | foo | bar | expiry=2027-09-28 16:21:35 | # Expiry as timestamp.     |\n| `Add Cookie` | foo | bar | expiry=1822137695          | # Expiry as epoch seconds. |\n\nPrior to SeleniumLibrary 3.0 setting expiry did not work.",
                "_name": "Add Cookie",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\cookie.py",
                "_lineno": "143"
            },
            {
                "arguments": {
                    "arg": [
                        "strategy_name: str",
                        "strategy_keyword: str",
                        "persist: bool = False"
                    ]
                },
                "doc": "Adds a custom location strategy.\n\nSee `Custom locators` for information on how to create and use\ncustom strategies. `Remove Location Strategy` can be used to\nremove a registered strategy.\n\nLocation strategies are automatically removed after leaving the\ncurrent scope by default. Setting ``persist`` to a true value (see\n`Boolean arguments`) will cause the location strategy to stay\nregistered throughout the life of the test.",
                "_name": "Add Location Strategy",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "_lineno": "1116"
            },
            {
                "arguments": {
                    "arg": [
                        "text: str =",
                        "action: str = ACCEPT",
                        "timeout: timedelta = None"
                    ]
                },
                "doc": "Verifies that an alert is present and by default, accepts it.\n\nFails if no alert is present. If ``text`` is a non-empty string,\nthen it is used to verify alert's message. The alert is accepted\nby default, but that behavior can be controlled by using the\n``action`` argument same way as with `Handle Alert`.\n\n``timeout`` specifies how long to wait for the alert to appear.\nIf it is not given, the global default `timeout` is used instead.\n\n``action`` and ``timeout`` arguments are new in SeleniumLibrary 3.0.\nIn earlier versions, the alert was always accepted and a timeout was\nhardcoded to one second.",
                "_name": "Alert Should Be Present",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\alert.py",
                "_lineno": "52"
            },
            {
                "arguments": {
                    "arg": [
                        "action: str = ACCEPT",
                        "timeout: timedelta = None"
                    ]
                },
                "doc": "Verifies that no alert is present.\n\nIf the alert actually exists, the ``action`` argument determines\nhow it should be handled. By default, the alert is accepted, but\nit can be also dismissed or left open the same way as with the\n`Handle Alert` keyword.\n\n``timeout`` specifies how long to wait for the alert to appear.\nBy default, is not waited for the alert at all, but a custom time can\nbe given if alert may be delayed. See the `time format` section\nfor information about the syntax.\n\nNew in SeleniumLibrary 3.0.",
                "_name": "Alert Should Not Be Present",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\alert.py",
                "_lineno": "79"
            },
            {
                "arguments": {
                    "arg": [
                        "locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]",
                        "id: str"
                    ]
                },
                "doc": "Assigns a temporary ``id`` to the element specified by ``locator``.\n\nThis is mainly useful if the locator is complicated and/or slow XPath\nexpression and it is needed multiple times. Identifier expires when\nthe page is reloaded.\n\nSee the `Locating elements` section for details about the locator\nsyntax.\n\nExample:\n| `Assign ID to Element` | //ul[@class='example' and ./li[contains(., 'Stuff')]] | my id |\n| `Page Should Contain Element` | my id |",
                "_name": "Assign Id To Element",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "_lineno": "221"
            },
            {
                "arguments": {
                    "arg": [
                        "port: int",
                        "alias: str = None"
                    ]
                },
                "doc": "Attach to an existing instance of Chrome or Chromium.\n\nRequires that the browser was started with the command line\noption ``--remote-debugging-port=<port>``, where port is any\n4-digit number not being used by other applications.\n\nThat port can then be used to connect using this keyword.\n\nExample:\n    | Attach Chrome Browser | port=9222 |",
                "_name": "Attach Chrome Browser",
                "_lineno": "420"
            },
            {
                "arguments": {
                    "arg": [
                        "locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, NoneType, str]",
                        "filename: str = selenium-element-screenshot-{index}.png"
                    ]
                },
                "doc": "Captures a screenshot from the element identified by ``locator`` and embeds it into log file.\n\nSee `Capture Page Screenshot` for details about ``filename`` argument.\nSee the `Locating elements` section for details about the locator\nsyntax.\n\nAn absolute path to the created element screenshot is returned.\n\nSupport for capturing the screenshot from an element has limited support\namong browser vendors. Please check the browser vendor driver documentation\ndoes the browser support capturing a screenshot from an element.\n\nNew in SeleniumLibrary 3.3. Support for EMBED is new in SeleniumLibrary 4.2.\n\nExamples:\n| `Capture Element Screenshot` | id:image_id |                                |\n| `Capture Element Screenshot` | id:image_id | ${OUTPUTDIR}/id_image_id-1.png |\n| `Capture Element Screenshot` | id:image_id | EMBED                          |",
                "_name": "Capture Element Screenshot",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\screenshot.py",
                "_lineno": "129"
            },
            {
                "arguments": {
                    "arg": "filename: str = selenium-screenshot-{index}.png"
                },
                "doc": "Takes a screenshot of the current page and embeds it into a log file.\n\n``filename`` argument specifies the name of the file to write the\nscreenshot into. The directory where screenshots are saved can be\nset when `importing` the library or by using the `Set Screenshot\nDirectory` keyword. If the directory is not configured, screenshots\nare saved to the same directory where Robot Framework's log file is\nwritten.\n\nIf ``filename`` equals to EMBED (case insensitive), then screenshot\nis embedded as Base64 image to the log.html. In this case file is not\ncreated in the filesystem.\n\nStarting from SeleniumLibrary 1.8, if ``filename`` contains marker\n``{index}``, it will be automatically replaced with an unique running\nindex, preventing files to be overwritten. Indices start from 1,\nand how they are represented can be customized using Python's\n[https://docs.python.org/3/library/string.html#format-string-syntax|\nformat string syntax].\n\nAn absolute path to the created screenshot file is returned or if\n``filename``  equals to EMBED, word `EMBED` is returned.\n\nSupport for EMBED is new in SeleniumLibrary 4.2\n\nExamples:\n| `Capture Page Screenshot` |                                        |\n| `File Should Exist`       | ${OUTPUTDIR}/selenium-screenshot-1.png |\n| ${path} =                 | `Capture Page Screenshot`              |\n| `File Should Exist`       | ${OUTPUTDIR}/selenium-screenshot-2.png |\n| `File Should Exist`       | ${path}                                |\n| `Capture Page Screenshot` | custom_name.png                        |\n| `File Should Exist`       | ${OUTPUTDIR}/custom_name.png           |\n| `Capture Page Screenshot` | custom_with_index_{index}.png          |\n| `File Should Exist`       | ${OUTPUTDIR}/custom_with_index_1.png   |\n| `Capture Page Screenshot` | formatted_index_{index:03}.png         |\n| `File Should Exist`       | ${OUTPUTDIR}/formatted_index_001.png   |\n| `Capture Page Screenshot` | EMBED                                  |\n| `File Should Not Exist`   | EMBED                                  |",
                "_name": "Capture Page Screenshot",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\screenshot.py",
                "_lineno": "67"
            },
            {
                "arguments": {
                    "arg": "locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]"
                },
                "doc": "Verifies checkbox ``locator`` is selected/checked.\n\nSee the `Locating elements` section for details about the locator\nsyntax.",
                "_name": "Checkbox Should Be Selected",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\formelement.py",
                "_lineno": "44"
            },
            {
                "arguments": {
                    "arg": "locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]"
                },
                "doc": "Verifies checkbox ``locator`` is not selected/checked.\n\nSee the `Locating elements` section for details about the locator\nsyntax.",
                "_name": "Checkbox Should Not Be Selected",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\formelement.py",
                "_lineno": "58"
            },
            {
                "arguments": {
                    "arg": [
                        "locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]",
                        "file_path: str"
                    ]
                },
                "doc": "Inputs the ``file_path`` into the file input field ``locator``.\n\nThis keyword is most often used to input files into upload forms.\nThe keyword does not check ``file_path`` is the file or folder\navailable on the machine where tests are executed. If the ``file_path``\npoints at a file and when using Selenium Grid, Selenium will\n[https://seleniumhq.github.io/selenium/docs/api/py/webdriver_remote/selenium.webdriver.remote.command.html?highlight=upload#selenium.webdriver.remote.command.Command.UPLOAD_FILE|magically],\ntransfer the file from the machine where the tests are executed\nto the Selenium Grid node where the browser is running.\nThen Selenium will send the file path, from the nodes file\nsystem, to the browser.\n\nThat ``file_path`` is not checked, is new in SeleniumLibrary 4.0.\n\nExample:\n| `Choose File` | my_upload_field | ${CURDIR}/trades.csv |",
                "_name": "Choose File",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\formelement.py",
                "_lineno": "216"
            },
            {
                "arguments": {
                    "arg": "locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]"
                },
                "doc": "Clears the value of the text-input-element identified by ``locator``.\n\nSee the `Locating elements` section for details about the locator\nsyntax.",
                "_name": "Clear Element Text",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "_lineno": "522"
            },
            {
                "arguments": {
                    "arg": [
                        "locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]",
                        "modifier: typing.Union[bool, str] = False"
                    ]
                },
                "doc": "Clicks the button identified by ``locator``.\n\nSee the `Locating elements` section for details about the locator\nsyntax. When using the default locator strategy, buttons are\nsearched using ``id``, ``name``, and ``value``.\n\nSee the `Click Element` keyword for details about the\n``modifier`` argument.\n\nThe ``modifier`` argument is new in SeleniumLibrary 3.3",
                "_name": "Click Button",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "_lineno": "545"
            },
            {
                "arguments": {
                    "arg": [
                        "locator: str",
                        "modifier: str = None"
                    ]
                },
                "doc": "Click button identified by ``locator``, once it becomes visible.\n\n``locator`` element locator\n\n``modifier`` press given keys while clicking the element, e.g. CTRL\n\nExample:\n    | Click Button When Visible  | //button[@class=\"mybutton\"] |",
                "_name": "Click Button When Visible",
                "_lineno": "529"
            },
            {
                "arguments": {
                    "arg": [
                        "locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]",
                        "modifier: typing.Union[bool, str] = False",
                        "action_chain: bool = False"
                    ]
                },
                "doc": "Click the element identified by ``locator``.\n\nSee the `Locating elements` section for details about the locator\nsyntax.\n\nThe ``modifier`` argument can be used to pass\n[https://seleniumhq.github.io/selenium/docs/api/py/webdriver/selenium.webdriver.common.keys.html#selenium.webdriver.common.keys.Keys|Selenium Keys]\nwhen clicking the element. The `+` can be used as a separator\nfor different Selenium Keys. The `CTRL` is internally translated to\nthe `CONTROL` key. The ``modifier`` is space and case insensitive, example\n\"alt\" and \" aLt \" are supported formats to\n[https://seleniumhq.github.io/selenium/docs/api/py/webdriver/selenium.webdriver.common.keys.html#selenium.webdriver.common.keys.Keys.ALT|ALT key]\n. If ``modifier`` does not match to Selenium Keys, keyword fails.\n\nIf ``action_chain`` argument is true, see `Boolean arguments` for more\ndetails on how to set boolean argument, then keyword uses ActionChain\nbased click instead of the <web_element>.click() function. If both\n``action_chain`` and ``modifier`` are defined, the click will be\nperformed using ``modifier`` and ``action_chain`` will be ignored.\n\nExample:\n| Click Element | id:button |                   | # Would click element without any modifiers.               |\n| Click Element | id:button | CTRL              | # Would click element with CTLR key pressed down.          |\n| Click Element | id:button | CTRL+ALT          | # Would click element with CTLR and ALT keys pressed down. |\n| Click Element | id:button | action_chain=True | # Clicks the button using an Selenium  ActionChains        |\n\nThe ``modifier`` argument is new in SeleniumLibrary 3.2\nThe ``action_chain`` argument is new in SeleniumLibrary 4.1",
                "_name": "Click Element",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "_lineno": "615"
            },
            {
                "arguments": {
                    "arg": [
                        "locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]",
                        "xoffset: int",
                        "yoffset: int"
                    ]
                },
                "doc": "Click the element ``locator`` at ``xoffset/yoffset``.\n\nThe Cursor is moved and the center of the element and x/y coordinates are\ncalculated from that point.\n\nSee the `Locating elements` section for details about the locator\nsyntax.",
                "_name": "Click Element At Coordinates",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "_lineno": "687"
            },
            {
                "arguments": {
                    "arg": "locator: str"
                },
                "doc": "Click element if it is visible\n\n``locator`` element locator\n\nExample:\n    | Click Element If Visible | //button[@class=\"mybutton\"] |",
                "_name": "Click Element If Visible",
                "_lineno": "548"
            },
            {
                "arguments": {
                    "arg": [
                        "locator: str",
                        "modifier: str = None",
                        "action_chain: bool = False"
                    ]
                },
                "doc": "Click element identified by ``locator``, once it becomes visible.\n\n``locator`` element locator\n\n``modifier`` press given keys while clicking the element, e.g. CTRL\n\n``action_chain`` store action in Selenium ActionChain queue\n\nExample:\n    | Click Element When Visible | q |\n    | Click Element When Visible | id:button | CTRL+ALT |\n    | Click Element When Visible | action_chain=True |",
                "_name": "Click Element When Visible",
                "_lineno": "509"
            },
            {
                "arguments": {
                    "arg": [
                        "locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]",
                        "modifier: typing.Union[bool, str] = False"
                    ]
                },
                "doc": "Clicks an image identified by ``locator``.\n\nSee the `Locating elements` section for details about the locator\nsyntax. When using the default locator strategy, images are searched\nusing ``id``, ``name``, ``src`` and ``alt``.\n\nSee the `Click Element` keyword for details about the\n``modifier`` argument.\n\nThe ``modifier`` argument is new in SeleniumLibrary 3.3",
                "_name": "Click Image",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "_lineno": "569"
            },
            {
                "arguments": {
                    "arg": [
                        "locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]",
                        "modifier: typing.Union[bool, str] = False"
                    ]
                },
                "doc": "Clicks a link identified by ``locator``.\n\nSee the `Locating elements` section for details about the locator\nsyntax. When using the default locator strategy, links are searched\nusing ``id``, ``name``, ``href`` and the link text.\n\nSee the `Click Element` keyword for details about the\n``modifier`` argument.\n\nThe ``modifier`` argument is new in SeleniumLibrary 3.3",
                "_name": "Click Link",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "_lineno": "594"
            },
            {
                "arguments": "",
                "doc": "Closes all open browsers and resets the browser cache.\n\nAfter this keyword, new indexes returned from `Open Browser` keyword\nare reset to 1.\n\nThis keyword should be used in test or suite teardown to make sure\nall browsers are closed.",
                "_name": "Close All Browsers",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\browsermanagement.py",
                "_lineno": "40"
            },
            {
                "arguments": "",
                "doc": "Closes the current browser.",
                "_name": "Close Browser",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\browsermanagement.py",
                "_lineno": "53"
            },
            {
                "arguments": "",
                "doc": "Closes currently opened and selected browser window/tab.",
                "_name": "Close Window",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\window.py",
                "_lineno": "125"
            },
            {
                "arguments": {
                    "arg": "locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]"
                },
                "doc": "Will cover elements identified by ``locator`` with a blue div without breaking page layout.\n\nSee the `Locating elements` section for details about the locator\nsyntax.\n\nNew in SeleniumLibrary 3.3.0\n\nExample:\n|`Cover Element` | css:div#container |",
                "_name": "Cover Element",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "_lineno": "472"
            },
            {
                "arguments": {
                    "arg": [
                        "driver_name: str",
                        "alias: str = None",
                        "kwargs={}",
                        "**init_kwargs"
                    ]
                },
                "doc": "Creates an instance of Selenium WebDriver.\n\nLike `Open Browser`, but allows passing arguments to the created\nWebDriver instance directly. This keyword should only be used if\nthe functionality provided by `Open Browser` is not adequate.\n\n``driver_name`` must be a WebDriver implementation name like Firefox,\nChrome, Ie, Opera, Safari, PhantomJS, or Remote.\n\nThe initialized WebDriver can be configured either with a Python\ndictionary ``kwargs`` or by using keyword arguments ``**init_kwargs``.\nThese arguments are passed directly to WebDriver without any\nprocessing. See [https://seleniumhq.github.io/selenium/docs/api/py/api.html|\nSelenium API documentation] for details about the supported arguments.\n\nExamples:\n| # Use proxy with Firefox   |                |                              |                                      |\n| ${proxy}=                  | `Evaluate`     | selenium.webdriver.Proxy()   | modules=selenium, selenium.webdriver |\n| ${proxy.http_proxy}=       | `Set Variable` | localhost:8888               |                                      |\n| `Create Webdriver`         | Firefox        | proxy=${proxy}               |                                      |\n| # Use proxy with PhantomJS |                |                              |                                      |\n| ${service args}=           | `Create List`  | --proxy=192.168.132.104:8888 |                                      |\n| `Create Webdriver`         | PhantomJS      | service_args=${service args} |                                      |\n\nReturns the index of this browser instance which can be used later to\nswitch back to it. Index starts from 1 and is reset back to it when\n`Close All Browsers` keyword is used. See `Switch Browser` for an\nexample.",
                "_name": "Create Webdriver",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\browsermanagement.py",
                "_lineno": "347"
            },
            {
                "arguments": {
                    "arg": [
                        "text: str",
                        "loglevel: str = TRACE"
                    ]
                },
                "doc": "Verifies that the current frame contains ``text``.\n\nSee `Page Should Contain` for an explanation about the ``loglevel``\nargument.\n\nPrior to SeleniumLibrary 3.0 this keyword was named\n`Current Frame Contains`.",
                "_name": "Current Frame Should Contain",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\frames.py",
                "_lineno": "53"
            },
            {
                "arguments": {
                    "arg": [
                        "text: str",
                        "loglevel: str = TRACE"
                    ]
                },
                "doc": "Verifies that the current frame does not contain ``text``.\n\nSee `Page Should Contain` for an explanation about the ``loglevel``\nargument.",
                "_name": "Current Frame Should Not Contain",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\frames.py",
                "_lineno": "70"
            },
            {
                "arguments": "",
                "doc": "Deletes all cookies.",
                "_name": "Delete All Cookies",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\cookie.py",
                "_lineno": "57"
            },
            {
                "arguments": {
                    "arg": "name"
                },
                "doc": "Deletes the cookie matching ``name``.\n\nIf the cookie is not found, nothing happens.",
                "_name": "Delete Cookie",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\cookie.py",
                "_lineno": "62"
            },
            {
                "arguments": {
                    "arg": [
                        "text: str = None",
                        "timeout: float = None"
                    ]
                },
                "doc": "Does alert contain text.\n\n``text`` check if alert includes text, will raise ValueError is text\ndoes not exist\n\nExample:\n    | ${res} | Does Alert Contain | alert message |",
                "_name": "Does Alert Contain",
                "_lineno": "666"
            },
            {
                "arguments": {
                    "arg": [
                        "text: str = None",
                        "timeout: float = None"
                    ]
                },
                "doc": "Does alert not contain text.\n\n``text`` check that alert does not include text, will raise ValueError if text\ndoes exist\n\nExample:\n    | ${res} | Does Alert Not Contain | unexpected message |",
                "_name": "Does Alert Not Contain",
                "_lineno": "684"
            },
            {
                "arguments": {
                    "arg": [
                        "locator: str",
                        "expected: str",
                        "ignore_case: bool = False"
                    ]
                },
                "doc": "Does element contain expected text\n\n``locator`` element locator\n\n``expected`` expected element text\n\n``ignore_case`` should check be case insensitive, default `False`\n\nExample:\n    | ${res} | Does Element Contain | id:spec | specification complete | ignore_case=True |",
                "_name": "Does Element Contain",
                "_lineno": "731"
            },
            {
                "arguments": {
                    "arg": [
                        "locator: str",
                        "text: str"
                    ]
                },
                "doc": "Does frame contain expected text\n\n``locator`` locator of the frame to check\n\n``text`` does frame contain this text\n\nExample:\n    | ${res} | Does Frame Contain | id:myframe | secret |",
                "_name": "Does Frame Contain",
                "_lineno": "716"
            },
            {
                "arguments": {
                    "arg": "expected: str"
                },
                "doc": "Does current URL contain expected\n\n``expected`` URL should contain this\n\nExample:\n    | Open Available Browser | https://robocorp.com |\n    | ${res} | Does Location Contain | robocorp |",
                "_name": "Does Location Contain",
                "_lineno": "818"
            },
            {
                "arguments": {
                    "arg": "text: str"
                },
                "doc": "Does page contain expected text\n\n``text`` page should contain this\n\nExample:\n    | Open Available Browser | https://google.com |\n    | ${res} | Does Page Contain | Gmail |",
                "_name": "Does Page Contain",
                "_lineno": "832"
            },
            {
                "arguments": {
                    "arg": "locator: str"
                },
                "doc": "Does page contain expected button\n\n``locator`` element locator\n\nExample:\n    | ${res} | Does Page Contain Button | search-button |",
                "_name": "Does Page Contain Button",
                "_lineno": "846"
            },
            {
                "arguments": {
                    "arg": "locator: str"
                },
                "doc": "Does page contain expected checkbox\n\n``locator`` element locator\n\nExample:\n    | ${res} | Does Page Contain Checkbox | random-selection |",
                "_name": "Does Page Contain Checkbox",
                "_lineno": "859"
            },
            {
                "arguments": {
                    "arg": [
                        "locator: str",
                        "count: int = None"
                    ]
                },
                "doc": "Does page contain expected element\n\n``locator`` element locator\n\n``count`` how many times element is expected to appear on page\nby default one or more\n\nExample:\n    | ${res} | Does Page Contain Element | textarea |\n    | ${res} | Does Page Contain Element | button | count=4 |",
                "_name": "Does Page Contain Element",
                "_lineno": "872"
            },
            {
                "arguments": {
                    "arg": "locator: str"
                },
                "doc": "Does page contain expected image\n\n``locator`` element locator\n\nExample:\n    | Open Available Browser | https://google.com |\n    | ${res} | Does Page Contain Image | Google |",
                "_name": "Does Page Contain Image",
                "_lineno": "889"
            },
            {
                "arguments": {
                    "arg": "locator: str"
                },
                "doc": "Does page contain expected link\n\n``locator`` element locator\n\nExample:\n    | ${res} | Does Page Contain Link | id:submit |",
                "_name": "Does Page Contain Link",
                "_lineno": "903"
            },
            {
                "arguments": {
                    "arg": "locator: str"
                },
                "doc": "Does page contain expected list\n\n``locator`` element locator\n\nExample:\n    | ${res} | Does Page Contain List | class:selections |",
                "_name": "Does Page Contain List",
                "_lineno": "916"
            },
            {
                "arguments": {
                    "arg": "locator: str"
                },
                "doc": "Does page contain expected radio button\n\n``locator`` element locator\n\nExample:\n    | ${res} | Does Page Contain Radio Button | male |",
                "_name": "Does Page Contain Radio Button",
                "_lineno": "929"
            },
            {
                "arguments": {
                    "arg": "locator: str"
                },
                "doc": "Does page contain expected textfield\n\n``locator`` element locator\n\nExample:\n    | ${res} | Does Page Contain Textfield | id:address |",
                "_name": "Does Page Contain Textfield",
                "_lineno": "942"
            },
            {
                "arguments": {
                    "arg": [
                        "locator: str",
                        "row: int",
                        "column: int",
                        "expected: str"
                    ]
                },
                "doc": "Does table cell contain expected text\n\n``locator`` element locator for the table\n\n``row`` row index starting from 1 (beginning) or -1 (from the end)\n\n``column`` column index starting from 1 (beginning) or -1 (from the end)\n\n``expected`` expected text in table row\n\nExample:\n    | ${res} | Does Table Cell Contain | //table | 1 | 1 | Company |",
                "_name": "Does Table Cell Contain",
                "_lineno": "986"
            },
            {
                "arguments": {
                    "arg": [
                        "locator: str",
                        "column: int",
                        "expected: str"
                    ]
                },
                "doc": "Does table column contain expected text\n\n``locator`` element locator for the table\n\n``column`` column index starting from 1 (beginning) or -1 (from the end)\n\n``expected`` expected text in table column\n\nExample:\n    | ${res} | Does Table Column Contain | //table | 1 | Nokia |",
                "_name": "Does Table Column Contain",
                "_lineno": "1007"
            },
            {
                "arguments": {
                    "arg": [
                        "locator: str",
                        "expected: str"
                    ]
                },
                "doc": "Does table contain expected text\n\n``locator`` element locator\n\n``expected`` expected text in table\n\nExample:\n    | ${res} | Does Table Contain | //table | February |",
                "_name": "Does Table Contain",
                "_lineno": "1073"
            },
            {
                "arguments": {
                    "arg": [
                        "locator: str",
                        "expected: str"
                    ]
                },
                "doc": "Does table footer contain expected text\n\n``locator`` element locator for the table\n\n``expected`` expected text in table footer\n\nExample:\n    | ${res} | Does Table Footer Contain | //table | Sum |",
                "_name": "Does Table Footer Contain",
                "_lineno": "1043"
            },
            {
                "arguments": {
                    "arg": [
                        "locator: str",
                        "expected: str"
                    ]
                },
                "doc": "Does table header contain expected text\n\n``locator`` element locator for the table\n\n``expected`` expected text in table header\n\nExample:\n    | ${res} | Does Table Header Contain | //table | Month |",
                "_name": "Does Table Header Contain",
                "_lineno": "1058"
            },
            {
                "arguments": {
                    "arg": [
                        "locator: str",
                        "row: int",
                        "expected: str"
                    ]
                },
                "doc": "Does table row contain expected text\n\n``locator`` element locator for the table\n\n``row`` row index starting from 1 (beginning) or -1 (from the end)\n\n``expected`` expected text in table row\n\nExample:\n    | ${res} | Does Table Row Contain | //table | 1 | Company |",
                "_name": "Does Table Row Contain",
                "_lineno": "1026"
            },
            {
                "arguments": {
                    "arg": [
                        "locator: str",
                        "expected: str"
                    ]
                },
                "doc": "Does textarea contain expected text\n\n``locator`` element locator\n\n``expected`` expected text in textarea\n\nExample:\n    | ${res} | Does Textarea Contain | //textarea | sincerely |",
                "_name": "Does Textarea Contain",
                "_lineno": "1103"
            },
            {
                "arguments": {
                    "arg": [
                        "locator: str",
                        "expected: str"
                    ]
                },
                "doc": "Does textfield contain expected text\n\n``locator`` element locator\n\n``expected`` expected text in textfield\n\nExample:\n    | ${res} | Does Textfield Contain | id:lname | Last |",
                "_name": "Does Textfield Contain",
                "_lineno": "1118"
            },
            {
                "arguments": {
                    "arg": "locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]"
                },
                "doc": "Double clicks the element identified by ``locator``.\n\nSee the `Locating elements` section for details about the locator\nsyntax.",
                "_name": "Double Click Element",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "_lineno": "711"
            },
            {
                "arguments": {
                    "arg": [
                        "locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]",
                        "target: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]"
                    ]
                },
                "doc": "Drags the element identified by ``locator`` into the ``target`` element.\n\nThe ``locator`` argument is the locator of the dragged element\nand the ``target`` is the locator of the target. See the\n`Locating elements` section for details about the locator syntax.\n\nExample:\n| `Drag And Drop` | css:div#element | css:div.target |",
                "_name": "Drag And Drop",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "_lineno": "751"
            },
            {
                "arguments": {
                    "arg": [
                        "locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]",
                        "xoffset: int",
                        "yoffset: int"
                    ]
                },
                "doc": "Drags the element identified with ``locator`` by ``xoffset/yoffset``.\n\nSee the `Locating elements` section for details about the locator\nsyntax.\n\nThe element will be moved by ``xoffset`` and ``yoffset``, each of which\nis a negative or positive number specifying the offset.\n\nExample:\n| `Drag And Drop By Offset` | myElem | 50 | -35 | # Move myElem 50px right and 35px down |",
                "_name": "Drag And Drop By Offset",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "_lineno": "773"
            },
            {
                "arguments": {
                    "arg": [
                        "locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]",
                        "attribute: str",
                        "expected: str",
                        "message: str = None"
                    ]
                },
                "doc": "Verifies element identified by ``locator`` contains expected attribute value.\n\nSee the `Locating elements` section for details about the locator\nsyntax.\n\nExample:\n`Element Attribute Value Should Be` | css:img | href | value\n\nNew in SeleniumLibrary 3.2.",
                "_name": "Element Attribute Value Should Be",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "_lineno": "413"
            },
            {
                "arguments": {
                    "arg": "locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]"
                },
                "doc": "Verifies that element identified by ``locator`` is disabled.\n\nThis keyword considers also elements that are read-only to be\ndisabled.\n\nSee the `Locating elements` section for details about the locator\nsyntax.",
                "_name": "Element Should Be Disabled",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "_lineno": "240"
            },
            {
                "arguments": {
                    "arg": "locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]"
                },
                "doc": "Verifies that element identified by ``locator`` is enabled.\n\nThis keyword considers also elements that are read-only to be\ndisabled.\n\nSee the `Locating elements` section for details about the locator\nsyntax.",
                "_name": "Element Should Be Enabled",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "_lineno": "253"
            },
            {
                "arguments": {
                    "arg": "locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]"
                },
                "doc": "Verifies that element identified by ``locator`` is focused.\n\nSee the `Locating elements` section for details about the locator\nsyntax.\n\nNew in SeleniumLibrary 3.0.",
                "_name": "Element Should Be Focused",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "_lineno": "266"
            },
            {
                "arguments": {
                    "arg": [
                        "locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]",
                        "message: str = None"
                    ]
                },
                "doc": "Verifies that the element identified by ``locator`` is visible.\n\nHerein, visible means that the element is logically visible, not\noptically visible in the current browser viewport. For example,\nan element that carries ``display:none`` is not logically visible,\nso using this keyword on that element would fail.\n\nSee the `Locating elements` section for details about the locator\nsyntax.\n\nThe ``message`` argument can be used to override the default error\nmessage.",
                "_name": "Element Should Be Visible",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "_lineno": "283"
            },
            {
                "arguments": {
                    "arg": [
                        "locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]",
                        "expected: str",
                        "message: str = None",
                        "ignore_case: bool = False"
                    ]
                },
                "doc": "Verifies that element ``locator`` contains text ``expected``.\n\nSee the `Locating elements` section for details about the locator\nsyntax.\n\nThe ``message`` argument can be used to override the default error\nmessage.\n\nThe ``ignore_case`` argument can be set to True to compare case\ninsensitive, default is False. New in SeleniumLibrary 3.1.\n\n``ignore_case`` argument is new in SeleniumLibrary 3.1.\n\nUse `Element Text Should Be` if you want to match the exact text,\nnot a substring.",
                "_name": "Element Should Contain",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "_lineno": "54"
            },
            {
                "arguments": {
                    "arg": [
                        "locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]",
                        "message: str = None"
                    ]
                },
                "doc": "Verifies that the element identified by ``locator`` is NOT visible.\n\nPasses if the element does not exists. See `Element Should Be Visible`\nfor more information about visibility and supported arguments.",
                "_name": "Element Should Not Be Visible",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "_lineno": "306"
            },
            {
                "arguments": {
                    "arg": [
                        "locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]",
                        "expected: str",
                        "message: str = None",
                        "ignore_case: bool = False"
                    ]
                },
                "doc": "Verifies that element ``locator`` does not contain text ``expected``.\n\nSee the `Locating elements` section for details about the locator\nsyntax.\n\nThe ``message`` argument can be used to override the default error\nmessage.\n\nThe ``ignore_case`` argument can be set to True to compare case\ninsensitive, default is False.\n\n``ignore_case`` argument new in SeleniumLibrary 3.1.",
                "_name": "Element Should Not Contain",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "_lineno": "92"
            },
            {
                "arguments": {
                    "arg": [
                        "locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]",
                        "expected: str",
                        "message: str = None",
                        "ignore_case: bool = False"
                    ]
                },
                "doc": "Verifies that element ``locator`` contains exact the text ``expected``.\n\nSee the `Locating elements` section for details about the locator\nsyntax.\n\nThe ``message`` argument can be used to override the default error\nmessage.\n\nThe ``ignore_case`` argument can be set to True to compare case\ninsensitive, default is False.\n\n``ignore_case`` argument is new in SeleniumLibrary 3.1.\n\nUse `Element Should Contain` if a substring match is desired.",
                "_name": "Element Text Should Be",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "_lineno": "325"
            },
            {
                "arguments": {
                    "arg": [
                        "locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]",
                        "not_expected: str",
                        "message: str = None",
                        "ignore_case: bool = False"
                    ]
                },
                "doc": "Verifies that element ``locator`` does not contain exact the text ``not_expected``.\n\nSee the `Locating elements` section for details about the locator\nsyntax.\n\nThe ``message`` argument can be used to override the default error\nmessage.\n\nThe ``ignore_case`` argument can be set to True to compare case\ninsensitive, default is False.\n\nNew in SeleniumLibrary 3.1.1",
                "_name": "Element Text Should Not Be",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "_lineno": "361"
            },
            {
                "arguments": {
                    "arg": "*code: str"
                },
                "doc": "Executes asynchronous JavaScript code with possible arguments.\n\nSimilar to `Execute Javascript` except that scripts executed with\nthis keyword must explicitly signal they are finished by invoking the\nprovided callback. This callback is always injected into the executed\nfunction as the last argument.\n\nScripts must complete within the script timeout or this keyword will\nfail. See the `Timeout` section for more information.\n\nStarting from SeleniumLibrary 3.2 it is possible to provide JavaScript\n[https://seleniumhq.github.io/selenium/docs/api/py/webdriver_remote/selenium.webdriver.remote.webdriver.html#selenium.webdriver.remote.webdriver.WebDriver.execute_async_script|\narguments] as part of ``code`` argument. See `Execute Javascript` for\nmore details.\n\nExamples:\n| `Execute Async JavaScript` | var callback = arguments[arguments.length - 1]; window.setTimeout(callback, 2000); |\n| `Execute Async JavaScript` | ${CURDIR}/async_js_to_execute.js |\n| ${result} = | `Execute Async JavaScript`                      |\n| ...         | var callback = arguments[arguments.length - 1]; |\n| ...         | function answer(){callback(\"text\");};           |\n| ...         | window.setTimeout(answer, 2000);                |\n| `Should Be Equal` | ${result} | text |",
                "_name": "Execute Async Javascript",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\javascript.py",
                "_lineno": "75"
            },
            {
                "arguments": {
                    "arg": "*code: str"
                },
                "doc": "Executes the given JavaScript code with possible arguments.\n\n``code`` may be divided into multiple cells in the test data and\n``code`` may contain multiple lines of code and arguments. In that case,\nthe JavaScript code parts are concatenated together without adding\nspaces and optional arguments are separated from ``code``.\n\nIf ``code`` is a path to an existing file, the JavaScript\nto execute will be read from that file. Forward slashes work as\na path separator on all operating systems.\n\nThe JavaScript executes in the context of the currently selected\nframe or window as the body of an anonymous function. Use ``window``\nto refer to the window of your application and ``document`` to refer\nto the document object of the current frame or window, e.g.\n``document.getElementById('example')``.\n\nThis keyword returns whatever the executed JavaScript code returns.\nReturn values are converted to the appropriate Python types.\n\nStarting from SeleniumLibrary 3.2 it is possible to provide JavaScript\n[https://seleniumhq.github.io/selenium/docs/api/py/webdriver_remote/selenium.webdriver.remote.webdriver.html#selenium.webdriver.remote.webdriver.WebDriver.execute_script|\narguments] as part of ``code`` argument. The JavaScript code and\narguments must be separated with `JAVASCRIPT` and `ARGUMENTS` markers\nand must be used exactly with this format. If the Javascript code is\nfirst, then the `JAVASCRIPT` marker is optional. The order of\n`JAVASCRIPT` and `ARGUMENTS` markers can be swapped, but if `ARGUMENTS`\nis the first marker, then `JAVASCRIPT` marker is mandatory. It is only\nallowed to use `JAVASCRIPT` and `ARGUMENTS` markers only one time in the\n``code`` argument.\n\nExamples:\n| `Execute JavaScript` | window.myFunc('arg1', 'arg2') |\n| `Execute JavaScript` | ${CURDIR}/js_to_execute.js    |\n| `Execute JavaScript` | alert(arguments[0]); | ARGUMENTS | 123 |\n| `Execute JavaScript` | ARGUMENTS | 123 | JAVASCRIPT | alert(arguments[0]); |",
                "_name": "Execute Javascript",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\javascript.py",
                "_lineno": "32"
            },
            {
                "arguments": {
                    "arg": [
                        "locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]",
                        "text: str",
                        "loglevel: str = TRACE"
                    ]
                },
                "doc": "Verifies that frame identified by ``locator`` contains ``text``.\n\nSee the `Locating elements` section for details about the locator\nsyntax.\n\nSee `Page Should Contain` for an explanation about the ``loglevel``\nargument.",
                "_name": "Frame Should Contain",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\frames.py",
                "_lineno": "84"
            },
            {
                "arguments": "",
                "doc": "Returns a list containing ids of all links found in current page.\n\nIf a link has no id, an empty string will be in the list instead.",
                "_name": "Get All Links",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "_lineno": "991"
            },
            {
                "arguments": "",
                "doc": "Returns aliases of all active browser that has an alias as NormalizedDict.\nThe dictionary contains the aliases as keys and the index as value.\nThis can be accessed as dictionary ``${aliases.key}`` or as list ``@{aliases}[0]``.\n\nExample:\n| `Open Browser` | https://example.com   | alias=BrowserA | |\n| `Open Browser` | https://example.com   | alias=BrowserB | |\n| &{aliases}     | `Get Browser Aliases` |                | # &{aliases} = { BrowserA=1|BrowserB=2 } |\n| `Log`          | ${aliases.BrowserA}   |                | # logs ``1`` |\n| FOR            | ${alias}              | IN             | @{aliases} |\n|                | `Log`                 | ${alias}       | # logs ``BrowserA`` and ``BrowserB`` |\n| END            |                       |                | |\n\nSee `Switch Browser` for more information and examples.\n\nNew in SeleniumLibrary 4.0",
                "_name": "Get Browser Aliases",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\browsermanagement.py",
                "_lineno": "459"
            },
            {
                "arguments": "",
                "doc": "Get dictionary of browser properties\n\nExample:\n    | ${caps}= | Get Browser Capabilities |",
                "_name": "Get Browser Capabilities",
                "_lineno": "1212"
            },
            {
                "arguments": "",
                "doc": "Returns index of all active browser as list.\n\nExample:\n| @{browser_ids}= | Get Browser Ids   |                   |                |\n| FOR             | ${id}             | IN                | @{browser_ids} |\n|                 | @{window_titles}= | Get Window Titles | browser=${id}  |\n|                 | Log               | Browser ${id} has these windows: ${window_titles} | |\n| END             |                   |                   |                |\n\nSee `Switch Browser` for more information and examples.\n\nNew in SeleniumLibrary 4.0",
                "_name": "Get Browser Ids",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\browsermanagement.py",
                "_lineno": "442"
            },
            {
                "arguments": {
                    "arg": "name: str"
                },
                "doc": "Returns information of cookie with ``name`` as an object.\n\nIf no cookie is found with ``name``, keyword fails. The cookie object\ncontains details about the cookie. Attributes available in the object\nare documented in the table below.\n\n| = Attribute = |             = Explanation =                                |\n| name          | The name of a cookie.                                      |\n| value         | Value of the cookie.                                       |\n| path          | Indicates a URL path, for example ``/``.                   |\n| domain        | The domain, the cookie is visible to.                      |\n| secure        | When true, the cookie is only used with HTTPS connections. |\n| httpOnly      | When true, the cookie is not accessible via JavaScript.    |\n| expiry        | Python datetime object indicating when the cookie expires. |\n| extra         | Possible attributes outside of the WebDriver specification |\n\nSee the\n[https://w3c.github.io/webdriver/#cookies|WebDriver specification]\nfor details about the cookie information.\nNotice that ``expiry`` is specified as a\n[https://docs.python.org/3/library/datetime.html#datetime.datetime|datetime object],\nnot as seconds since Unix Epoch like WebDriver natively does.\n\nIn some cases, example when running a browser in the cloud, it is possible that\nthe cookie contains other attributes than is defined in the\n[https://w3c.github.io/webdriver/#cookies|WebDriver specification].\nThese other attributes are available in an ``extra`` attribute in the cookie\nobject and it contains a dictionary of the other attributes. The ``extra``\nattribute is new in SeleniumLibrary 4.0.\n\nExample:\n| `Add Cookie`      | foo             | bar |\n| ${cookie} =       | `Get Cookie`    | foo |\n| `Should Be Equal` | ${cookie.name}  | foo |\n| `Should Be Equal` | ${cookie.value} | bar |\n| `Should Be True`  | ${cookie.expiry.year} > 2017 |\n\nNew in SeleniumLibrary 3.0.",
                "_name": "Get Cookie",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\cookie.py",
                "_lineno": "97"
            },
            {
                "arguments": {
                    "arg": "as_dict: bool = False"
                },
                "doc": "Returns all cookies of the current page.\n\nIf ``as_dict`` argument evaluates as false, see `Boolean arguments`\nfor more details, then cookie information is returned as\na single string in format ``name1=value1; name2=value2; name3=value3``.\nWhen ``as_dict`` argument evaluates as true, cookie information\nis returned as Robot Framework dictionary format. The string format\ncan be used, for example, for logging purposes or in headers when\nsending HTTP requests. The dictionary format is helpful when\nthe result can be passed to requests library's Create Session\nkeyword's optional cookies parameter.\n\nThe `` as_dict`` argument is new in SeleniumLibrary 3.3",
                "_name": "Get Cookies",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\cookie.py",
                "_lineno": "70"
            },
            {
                "arguments": {
                    "arg": [
                        "locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]",
                        "attribute: str"
                    ]
                },
                "doc": "Returns the value of ``attribute`` from the element ``locator``.\n\nSee the `Locating elements` section for details about the locator\nsyntax.\n\nExample:\n| ${id}= | `Get Element Attribute` | css:h1 | id |\n\nPassing attribute name as part of the ``locator`` was removed\nin SeleniumLibrary 3.2. The explicit ``attribute`` argument\nshould be used instead.",
                "_name": "Get Element Attribute",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "_lineno": "395"
            },
            {
                "arguments": {
                    "arg": "locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]"
                },
                "doc": "Returns the number of elements matching ``locator``.\n\nIf you wish to assert the number of matching elements, use\n`Page Should Contain Element` with ``limit`` argument. Keyword will\nalways return an integer.\n\nExample:\n| ${count} =       | `Get Element Count` | name:div_name  |\n| `Should Be True` | ${count} > 2        |                |\n\nNew in SeleniumLibrary 3.0.",
                "_name": "Get Element Count",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "_lineno": "1100"
            },
            {
                "arguments": {
                    "arg": "locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]"
                },
                "doc": "Returns width and height of the element identified by ``locator``.\n\nSee the `Locating elements` section for details about the locator\nsyntax.\n\nBoth width and height are returned as integers.\n\nExample:\n| ${width} | ${height} = | `Get Element Size` | css:div#container |",
                "_name": "Get Element Size",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "_lineno": "457"
            },
            {
                "arguments": {
                    "arg": "locator: str"
                },
                "doc": "Return dictionary containing element status of:\n\n    - visible\n    - enabled\n    - disabled\n    - focused\n\n``locator`` element locator\n\nExample:\n    | &{res}  | Get Element Status | class:special |\n    | Log     | ${res.visible} |\n    | Log     | ${res.enabled} |\n    | Log     | ${res.disabled} |\n    | Log     | ${res.focused} |",
                "_name": "Get Element Status",
                "_lineno": "1166"
            },
            {
                "arguments": {
                    "arg": "locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]"
                },
                "doc": "Returns the horizontal position of the element identified by ``locator``.\n\nSee the `Locating elements` section for details about the locator\nsyntax.\n\nThe position is returned in pixels off the left side of the page,\nas an integer.\n\nSee also `Get Vertical Position`.",
                "_name": "Get Horizontal Position",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "_lineno": "443"
            },
            {
                "arguments": {
                    "arg": [
                        "locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]",
                        "values: bool = False"
                    ]
                },
                "doc": "Returns all labels or values of selection list ``locator``.\n\nSee the `Locating elements` section for details about the locator\nsyntax.\n\nReturns visible labels by default, but values can be returned by\nsetting the ``values`` argument to a true value (see `Boolean\narguments`).\n\nExample:\n| ${labels} = | `Get List Items` | mylist              |             |\n| ${values} = | `Get List Items` | css:#example select | values=True |\n\nSupport to return values is new in SeleniumLibrary 3.0.",
                "_name": "Get List Items",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\selectelement.py",
                "_lineno": "27"
            },
            {
                "arguments": "",
                "doc": "Returns the current browser window URL.",
                "_name": "Get Location",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\browsermanagement.py",
                "_lineno": "498"
            },
            {
                "arguments": {
                    "arg": "browser: str = CURRENT"
                },
                "doc": "Returns and logs URLs of all windows of the selected browser.\n\n*Browser Scope:*\n\nThe ``browser`` argument specifies the browser that shall return\nits windows information.\n\n- ``browser`` can be ``index_or_alias`` like in `Switch Browser`.\n\n- If ``browser`` is ``CURRENT`` (default, case-insensitive)\n  the currently active browser is selected.\n\n- If ``browser`` is ``ALL`` (case-insensitive)\n  the window information of all windows of all opened browsers are returned.",
                "_name": "Get Locations",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\window.py",
                "_lineno": "166"
            },
            {
                "arguments": {
                    "arg": "locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]"
                },
                "doc": "Returns the label of selected option from selection list ``locator``.\n\nIf there are multiple selected options, the label of the first option\nis returned.\n\nSee the `Locating elements` section for details about the locator\nsyntax.",
                "_name": "Get Selected List Label",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\selectelement.py",
                "_lineno": "52"
            },
            {
                "arguments": {
                    "arg": "locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]"
                },
                "doc": "Returns labels of selected options from selection list ``locator``.\n\nStarting from SeleniumLibrary 3.0, returns an empty list if there\nare no selections. In earlier versions, this caused an error.\n\nSee the `Locating elements` section for details about the locator\nsyntax.",
                "_name": "Get Selected List Labels",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\selectelement.py",
                "_lineno": "65"
            },
            {
                "arguments": {
                    "arg": "locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]"
                },
                "doc": "Returns the value of selected option from selection list ``locator``.\n\nIf there are multiple selected options, the value of the first option\nis returned.\n\nSee the `Locating elements` section for details about the locator\nsyntax.",
                "_name": "Get Selected List Value",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\selectelement.py",
                "_lineno": "78"
            },
            {
                "arguments": {
                    "arg": "locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]"
                },
                "doc": "Returns values of selected options from selection list ``locator``.\n\nStarting from SeleniumLibrary 3.0, returns an empty list if there\nare no selections. In earlier versions, this caused an error.\n\nSee the `Locating elements` section for details about the locator\nsyntax.",
                "_name": "Get Selected List Values",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\selectelement.py",
                "_lineno": "91"
            },
            {
                "arguments": "",
                "doc": "Gets the implicit wait value used by Selenium.\n\nThe value is returned as a human-readable string like ``1 second``.\n\nSee the `Implicit wait` section above for more information.",
                "_name": "Get Selenium Implicit Wait",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\browsermanagement.py",
                "_lineno": "620"
            },
            {
                "arguments": "",
                "doc": "Gets the delay that is waited after each Selenium command.\n\nThe value is returned as a human-readable string like ``1 second``.\n\nSee the `Selenium Speed` section above for more information.",
                "_name": "Get Selenium Speed",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\browsermanagement.py",
                "_lineno": "600"
            },
            {
                "arguments": "",
                "doc": "Gets the timeout that is used by various keywords.\n\nThe value is returned as a human-readable string like ``1 second``.\n\nSee the `Timeout` section above for more information.",
                "_name": "Get Selenium Timeout",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\browsermanagement.py",
                "_lineno": "610"
            },
            {
                "arguments": "",
                "doc": "Returns the currently active browser session id.\n\nNew in SeleniumLibrary 3.2",
                "_name": "Get Session Id",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\browsermanagement.py",
                "_lineno": "480"
            },
            {
                "arguments": "",
                "doc": "Returns the entire HTML source of the current page or frame.",
                "_name": "Get Source",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\browsermanagement.py",
                "_lineno": "488"
            },
            {
                "arguments": {
                    "arg": [
                        "locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, NoneType, str]",
                        "row: int",
                        "column: int",
                        "loglevel: str = TRACE"
                    ]
                },
                "doc": "Returns contents of a table cell.\n\nThe table is located using the ``locator`` argument and its cell\nfound using ``row`` and ``column``. See the `Locating elements`\nsection for details about the locator syntax.\n\nBoth row and column indexes start from 1, and header and footer\nrows are included in the count. It is possible to refer to rows\nand columns from the end by using negative indexes so that -1\nis the last row/column, -2 is the second last, and so on.\n\nAll ``<th>`` and ``<td>`` elements anywhere in the table are\nconsidered to be cells.\n\nSee `Page Should Contain` for an explanation about the ``loglevel``\nargument.",
                "_name": "Get Table Cell",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\tableelement.py",
                "_lineno": "26"
            },
            {
                "arguments": "",
                "doc": "Get SeleniumTestability plugin status",
                "_name": "Get Testability Status",
                "_lineno": "1192"
            },
            {
                "arguments": {
                    "arg": "locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]"
                },
                "doc": "Returns the text value of the element identified by ``locator``.\n\nSee the `Locating elements` section for details about the locator\nsyntax.",
                "_name": "Get Text",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "_lineno": "513"
            },
            {
                "arguments": "",
                "doc": "Returns the title of the current page.",
                "_name": "Get Title",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\browsermanagement.py",
                "_lineno": "493"
            },
            {
                "arguments": {
                    "arg": "locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]"
                },
                "doc": "Returns the value attribute of the element identified by ``locator``.\n\nSee the `Locating elements` section for details about the locator\nsyntax.",
                "_name": "Get Value",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "_lineno": "504"
            },
            {
                "arguments": {
                    "arg": "locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]"
                },
                "doc": "Returns the vertical position of the element identified by ``locator``.\n\nSee the `Locating elements` section for details about the locator\nsyntax.\n\nThe position is returned in pixels off the top of the page,\nas an integer.\n\nSee also `Get Horizontal Position`.",
                "_name": "Get Vertical Position",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "_lineno": "531"
            },
            {
                "arguments": {
                    "arg": "locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]"
                },
                "doc": "Returns the first WebElement matching the given ``locator``.\n\nSee the `Locating elements` section for details about the locator\nsyntax.",
                "_name": "Get WebElement",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "_lineno": "32"
            },
            {
                "arguments": {
                    "arg": "locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]"
                },
                "doc": "Returns a list of WebElement objects matching the ``locator``.\n\nSee the `Locating elements` section for details about the locator\nsyntax.\n\nStarting from SeleniumLibrary 3.0, the keyword returns an empty\nlist if there are no matching elements. In previous releases, the\nkeyword failed in this case.",
                "_name": "Get WebElements",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "_lineno": "41"
            },
            {
                "arguments": {
                    "arg": "browser: str = CURRENT"
                },
                "doc": "Returns all child window handles of the selected browser as a list.\n\nCan be used as a list of windows to exclude with `Select Window`.\n\nHow to select the ``browser`` scope of this keyword, see `Get Locations`.\n\nPrior to SeleniumLibrary 3.0, this keyword was named `List Windows`.",
                "_name": "Get Window Handles",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\window.py",
                "_lineno": "130"
            },
            {
                "arguments": {
                    "arg": "browser: str = CURRENT"
                },
                "doc": "Returns and logs id attributes of all windows of the selected browser.\n\nHow to select the ``browser`` scope of this keyword, see `Get Locations`.",
                "_name": "Get Window Identifiers",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\window.py",
                "_lineno": "142"
            },
            {
                "arguments": {
                    "arg": "browser: str = CURRENT"
                },
                "doc": "Returns and logs names of all windows of the selected browser.\n\nHow to select the ``browser`` scope of this keyword, see `Get Locations`.",
                "_name": "Get Window Names",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\window.py",
                "_lineno": "150"
            },
            {
                "arguments": "",
                "doc": "Returns current window position.\n\nThe position is relative to the top left corner of the screen. Returned\nvalues are integers. See also `Set Window Position`.\n\nExample:\n| ${x} | ${y}= | `Get Window Position` |",
                "_name": "Get Window Position",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\window.py",
                "_lineno": "256"
            },
            {
                "arguments": {
                    "arg": "inner: bool = False"
                },
                "doc": "Returns current window width and height as integers.\n\nSee also `Set Window Size`.\n\nIf ``inner`` parameter is set to True, keyword returns\nHTML DOM window.innerWidth and window.innerHeight properties.\nSee `Boolean arguments` for more details on how to set boolean\narguments. The ``inner`` is new in SeleniumLibrary 4.0.\n\nExample:\n| ${width} | ${height}= | `Get Window Size` |      |\n| ${width} | ${height}= | `Get Window Size` | True |",
                "_name": "Get Window Size",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\window.py",
                "_lineno": "190"
            },
            {
                "arguments": {
                    "arg": "browser: str = CURRENT"
                },
                "doc": "Returns and logs titles of all windows of the selected browser.\n\nHow to select the ``browser`` scope of this keyword, see `Get Locations`.",
                "_name": "Get Window Titles",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\window.py",
                "_lineno": "158"
            },
            {
                "arguments": "",
                "doc": "Simulates the user clicking the back button on their browser.",
                "_name": "Go Back",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\browsermanagement.py",
                "_lineno": "584"
            },
            {
                "arguments": {
                    "arg": "url"
                },
                "doc": "Navigates the current browser window to the provided ``url``.",
                "_name": "Go To",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\browsermanagement.py",
                "_lineno": "589"
            },
            {
                "arguments": {
                    "arg": [
                        "action: str = ACCEPT",
                        "timeout: timedelta = None"
                    ]
                },
                "doc": "Handles the current alert and returns its message.\n\nBy default, the alert is accepted, but this can be controlled\nwith the ``action`` argument that supports the following\ncase-insensitive values:\n\n- ``ACCEPT``: Accept the alert i.e. press ``Ok``. Default.\n- ``DISMISS``: Dismiss the alert i.e. press ``Cancel``.\n- ``LEAVE``: Leave the alert open.\n\nThe ``timeout`` argument specifies how long to wait for the alert\nto appear. If it is not given, the global default `timeout` is used\ninstead.\n\nExamples:\n| Handle Alert |                |       | # Accept alert.  |\n| Handle Alert | action=DISMISS |       | # Dismiss alert. |\n| Handle Alert | timeout=10 s   |       | # Use custom timeout and accept alert.  |\n| Handle Alert | DISMISS        | 1 min | # Use custom timeout and dismiss alert. |\n| ${message} = | Handle Alert   |       | # Accept alert and get its message.     |\n| ${message} = | Handle Alert   | LEAVE | # Leave alert open and get its message. |\n\nNew in SeleniumLibrary 3.0.",
                "_name": "Handle Alert",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\alert.py",
                "_lineno": "104"
            },
            {
                "arguments": {
                    "arg": [
                        "locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]",
                        "password: str",
                        "clear: bool = True"
                    ]
                },
                "doc": "Types the given password into the text field identified by ``locator``.\n\nSee the `Locating elements` section for details about the locator\nsyntax. See `Input Text` for ``clear`` argument details.\n\nDifference compared to `Input Text` is that this keyword does not\nlog the given password on the INFO level. Notice that if you use\nthe keyword like\n\n| Input Password | password_field | password |\n\nthe password is shown as a normal keyword argument. A way to avoid\nthat is using variables like\n\n| Input Password | password_field | ${PASSWORD} |\n\nPlease notice that Robot Framework logs all arguments using\nthe TRACE level and tests must not be executed using level below\nDEBUG if the password should not be logged in any format.\n\nThe `clear` argument is new in SeleniumLibrary 4.0. Hiding password\nlogging from Selenium logs is new in SeleniumLibrary 4.2.",
                "_name": "Input Password",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\formelement.py",
                "_lineno": "242"
            },
            {
                "arguments": {
                    "arg": [
                        "locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]",
                        "text: str",
                        "clear: bool = True"
                    ]
                },
                "doc": "Types the given ``text`` into the text field identified by ``locator``.\n\nWhen ``clear`` is true, the input element is cleared before\nthe text is typed into the element. When false, the previous text\nis not cleared from the element. Use `Input Password` if you\ndo not want the given ``text`` to be logged.\n\nIf [https://github.com/SeleniumHQ/selenium/wiki/Grid2|Selenium Grid]\nis used and the ``text`` argument points to a file in the file system,\nthen this keyword prevents the Selenium to transfer the file to the\nSelenium Grid hub. Instead, this keyword will send the ``text`` string\nas is to the element. If a file should be transferred to the hub and\nupload should be performed, please use `Choose File` keyword.\n\nSee the `Locating elements` section for details about the locator\nsyntax. See the `Boolean arguments` section how Boolean values are\nhandled.\n\nDisabling the file upload the Selenium Grid node and the `clear`\nargument are new in SeleniumLibrary 4.0",
                "_name": "Input Text",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\formelement.py",
                "_lineno": "272"
            },
            {
                "arguments": {
                    "arg": [
                        "text: str",
                        "action: str = ACCEPT",
                        "timeout: timedelta = None"
                    ]
                },
                "doc": "Types the given ``text`` into an input field in an alert.\n\nThe alert is accepted by default, but that behavior can be controlled\nby using the ``action`` argument same way as with `Handle Alert`.\n\n``timeout`` specifies how long to wait for the alert to appear.\nIf it is not given, the global default `timeout` is used instead.\n\nNew in SeleniumLibrary 3.0.",
                "_name": "Input Text Into Alert",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\alert.py",
                "_lineno": "34"
            },
            {
                "arguments": {
                    "arg": [
                        "locator: str",
                        "text: str"
                    ]
                },
                "doc": "Input text into locator after it has become visible.\n\n``locator`` element locator\n\n``text`` insert text to locator\n\nExample:\n    | Input Text When Element Is Visible | //input[@id=\"freetext\"]  | my feedback |",
                "_name": "Input Text When Element Is Visible",
                "_lineno": "561"
            },
            {
                "arguments": {
                    "arg": [
                        "text: str = None",
                        "action: str = ACCEPT"
                    ]
                },
                "doc": "Is alert box present, which can be identified with text\nand action can also be done which by default is ACCEPT.\n\nOther possible actions are DISMISS and LEAVE.\n\n``text`` check if alert text is matching to this, if `None`\nwill check if alert is present at all\n\n``action`` possible action if alert is present, default ACCEPT\n\nExample:\n    | ${res} | Is Alert Present | alert message |",
                "_name": "Is Alert Present",
                "_lineno": "647"
            },
            {
                "arguments": {
                    "arg": "locator: str"
                },
                "doc": "Is checkbox selected\n\n``locator`` element locator\n\nExample:\n    | ${res} |  Is Checkbox Selected  | id:taxes-paid |",
                "_name": "Is Checkbox Selected",
                "_lineno": "703"
            },
            {
                "arguments": {
                    "arg": [
                        "locator: str",
                        "attribute: str",
                        "expected: str"
                    ]
                },
                "doc": "Is element attribute equal to expected value\n\n``locator`` element locator\n\n``attribute`` element attribute to check for\n\n``expected`` is attribute value equal to this\n\nExample:\n    | ${res} | Is Element Attribute Equal To | h1 | id | main |",
                "_name": "Is Element Attribute Equal To",
                "_lineno": "628"
            },
            {
                "arguments": {
                    "arg": "locator: str"
                },
                "doc": "Is element disabled\n\n``locator`` element locator\n\nExample:\n    | ${res} | Is Element Disabled | //input[@type=\"submit\"] |",
                "_name": "Is Element Disabled",
                "_lineno": "602"
            },
            {
                "arguments": {
                    "arg": "locator: str"
                },
                "doc": "Is element enabled\n\n``locator`` element locator\n\nExample:\n    | ${res} | Is Element Enabled | input.field1 |",
                "_name": "Is Element Enabled",
                "_lineno": "576"
            },
            {
                "arguments": {
                    "arg": "locator: str"
                },
                "doc": "Is element focused\n\n``locator`` element locator\n\nExample:\n    | ${res} | Is Element Focused | //input[@id=\"freetext\"] |",
                "_name": "Is Element Focused",
                "_lineno": "615"
            },
            {
                "arguments": {
                    "arg": [
                        "locator: str",
                        "expected: str",
                        "ignore_case: bool = False"
                    ]
                },
                "doc": "Is element text expected\n\n``locator`` element locator\n\n``expected`` expected element text\n\n``ignore_case`` should check be case insensitive, default `False`\n\nExample:\n    | ${res} | Is Element Text | id:name | john doe |\n    | ${res} | Is Element Text | id:name | john doe | ignore_case=True |",
                "_name": "Is Element Text",
                "_lineno": "754"
            },
            {
                "arguments": {
                    "arg": "locator: str"
                },
                "doc": "Is element visible\n\n``locator`` element locator\n\nExample:\n    | ${res} | Is Element Visible | id:confirmation |",
                "_name": "Is Element Visible",
                "_lineno": "589"
            },
            {
                "arguments": {
                    "arg": "locator: str"
                },
                "doc": "Is any option selected in the\n\n``locator`` element locator\n\nExample:\n    | ${res} | Is List Selected | id:cars |",
                "_name": "Is List Selected",
                "_lineno": "792"
            },
            {
                "arguments": {
                    "arg": [
                        "locator: str",
                        "*expected: str"
                    ]
                },
                "doc": "Is list selected with expected values\n\n``locator`` element locator\n\n``expected`` expected selected options\n\nExample:\n    | ${res} | Is List Selection | id:cars | Ford |",
                "_name": "Is List Selection",
                "_lineno": "777"
            },
            {
                "arguments": {
                    "arg": "url: str"
                },
                "doc": "Is current URL expected url\n\n``url`` expected current URL\n\nExample:\n    | Open Available Browser | https://www.robocorp.com |\n    | ${res} | Is Location | https://www.robocorp.com |",
                "_name": "Is Location",
                "_lineno": "806"
            },
            {
                "arguments": {
                    "arg": "group_name: str"
                },
                "doc": "Is any radio button selected in the button group\n\n``group_name`` radio button group name\n\nExample:\n    | ${res} | Is Radio Button Selected | group_name=gender |",
                "_name": "Is Radio Button Selected",
                "_lineno": "970"
            },
            {
                "arguments": {
                    "arg": [
                        "group_name: str",
                        "value: str"
                    ]
                },
                "doc": "Is radio button group set to expected value\n\n``group_name`` radio button group name\n\n``value`` expected value\n\nExample:\n    | ${res} | Is Radio Button Set To | group_name=gender | value=female |",
                "_name": "Is Radio Button Set To",
                "_lineno": "955"
            },
            {
                "arguments": {
                    "arg": [
                        "locator: str",
                        "expected: str"
                    ]
                },
                "doc": "Is textarea matching expected value\n\n``locator`` element locator\n\n``expected`` expected textarea value\n\nExample:\n    | ${res} | Is Textarea Value | //textarea | Yours sincerely |",
                "_name": "Is Textarea Value",
                "_lineno": "1088"
            },
            {
                "arguments": {
                    "arg": [
                        "locator: str",
                        "expected: str"
                    ]
                },
                "doc": "Is textfield value expected\n\n``locator`` element locator\n\n``expected`` expected textfield value\n\nExample:\n    | ${res} | Is Textfield Value | id:lname | Lastname |",
                "_name": "Is Textfield Value",
                "_lineno": "1133"
            },
            {
                "arguments": {
                    "arg": "title: str"
                },
                "doc": "Is page title expected\n\n``title`` expected title value\n\nExample:\n    | ${res} | Is Title | Webpage title text |",
                "_name": "Is Title",
                "_lineno": "1148"
            },
            {
                "arguments": {
                    "arg": [
                        "locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]",
                        "*expected: str"
                    ]
                },
                "doc": "Verifies selection list ``locator`` has ``expected`` options selected.\n\nIt is possible to give expected options both as visible labels and\nas values. Starting from SeleniumLibrary 3.0, mixing labels and\nvalues is not possible. Order of the selected options is not\nvalidated.\n\nIf no expected options are given, validates that the list has\nno selections. A more explicit alternative is using `List Should\nHave No Selections`.\n\nSee the `Locating elements` section for details about the locator\nsyntax.\n\nExamples:\n| `List Selection Should Be` | gender    | Female          |        |\n| `List Selection Should Be` | interests | Test Automation | Python |",
                "_name": "List Selection Should Be",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\selectelement.py",
                "_lineno": "104"
            },
            {
                "arguments": {
                    "arg": "locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]"
                },
                "doc": "Verifies selection list ``locator`` has no options selected.\n\nSee the `Locating elements` section for details about the locator\nsyntax.",
                "_name": "List Should Have No Selections",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\selectelement.py",
                "_lineno": "141"
            },
            {
                "arguments": {
                    "arg": [
                        "url: str",
                        "message: str = None"
                    ]
                },
                "doc": "Verifies that the current URL is exactly ``url``.\n\nThe ``url`` argument contains the exact url that should exist in browser.\n\nThe ``message`` argument can be used to override the default error\nmessage.\n\n``message`` argument is new in SeleniumLibrary 3.2.0.",
                "_name": "Location Should Be",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\browsermanagement.py",
                "_lineno": "503"
            },
            {
                "arguments": {
                    "arg": [
                        "expected: str",
                        "message: str = None"
                    ]
                },
                "doc": "Verifies that the current URL contains ``expected``.\n\nThe ``expected`` argument contains the expected value in url.\n\nThe ``message`` argument can be used to override the default error\nmessage.\n\n``message`` argument is new in SeleniumLibrary 3.2.0.",
                "_name": "Location Should Contain",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\browsermanagement.py",
                "_lineno": "521"
            },
            {
                "arguments": "",
                "doc": "Logs and returns the current browser window URL.",
                "_name": "Log Location",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\browsermanagement.py",
                "_lineno": "542"
            },
            {
                "arguments": {
                    "arg": "loglevel: str = INFO"
                },
                "doc": "Logs and returns the HTML source of the current page or frame.\n\nThe ``loglevel`` argument defines the used log level. Valid log\nlevels are ``WARN``, ``INFO`` (default), ``DEBUG``, ``TRACE``\nand ``NONE`` (no logging).",
                "_name": "Log Source",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\browsermanagement.py",
                "_lineno": "549"
            },
            {
                "arguments": "",
                "doc": "Logs and returns the title of the current page.",
                "_name": "Log Title",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\browsermanagement.py",
                "_lineno": "561"
            },
            {
                "arguments": "",
                "doc": "Maximizes current browser window.",
                "_name": "Maximize Browser Window",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\window.py",
                "_lineno": "185"
            },
            {
                "arguments": {
                    "arg": "locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]"
                },
                "doc": "Simulates pressing the left mouse button on the element ``locator``.\n\nSee the `Locating elements` section for details about the locator\nsyntax.\n\nThe element is pressed without releasing the mouse button.\n\nSee also the more specific keywords `Mouse Down On Image` and\n`Mouse Down On Link`.",
                "_name": "Mouse Down",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "_lineno": "795"
            },
            {
                "arguments": {
                    "arg": "locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]"
                },
                "doc": "Simulates a mouse down event on an image identified by ``locator``.\n\nSee the `Locating elements` section for details about the locator\nsyntax. When using the default locator strategy, images are searched\nusing ``id``, ``name``, ``src`` and ``alt``.",
                "_name": "Mouse Down On Image",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "_lineno": "1050"
            },
            {
                "arguments": {
                    "arg": "locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]"
                },
                "doc": "Simulates a mouse down event on a link identified by ``locator``.\n\nSee the `Locating elements` section for details about the locator\nsyntax. When using the default locator strategy, links are searched\nusing ``id``, ``name``, ``href`` and the link text.",
                "_name": "Mouse Down On Link",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "_lineno": "1000"
            },
            {
                "arguments": {
                    "arg": "locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]"
                },
                "doc": "Simulates moving the mouse away from the element ``locator``.\n\nSee the `Locating elements` section for details about the locator\nsyntax.",
                "_name": "Mouse Out",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "_lineno": "814"
            },
            {
                "arguments": {
                    "arg": "locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]"
                },
                "doc": "Simulates hovering the mouse over the element ``locator``.\n\nSee the `Locating elements` section for details about the locator\nsyntax.",
                "_name": "Mouse Over",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "_lineno": "833"
            },
            {
                "arguments": {
                    "arg": "locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]"
                },
                "doc": "Simulates releasing the left mouse button on the element ``locator``.\n\nSee the `Locating elements` section for details about the locator\nsyntax.",
                "_name": "Mouse Up",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "_lineno": "847"
            },
            {
                "arguments": {
                    "arg": [
                        "url: str",
                        "use_profile: bool = False",
                        "headless: bool = None",
                        "maximized: bool = False",
                        "browser_selection: typing.Any = AUTO",
                        "alias: str = None",
                        "profile_name: str = None",
                        "profile_path: str = None",
                        "preferences: dict = None",
                        "proxy: str = None"
                    ]
                },
                "doc": "Opens the first available browser in the system in preferred order, or the\ngiven browser (``browser_selection``).\n\n``url`` URL to open\n\n``use_profile`` Set browser profile, default ``False`` (Chrome/Chromium only)\n\n``headless`` Run in headless mode, default ``False``\n\n``maximized`` Run window maximized, default ``False``\n\n``browser_selection`` browser name, default ``AUTOMATIC_BROWSER_SELECTION``\n\n``alias`` Custom name for browser\n\n``profile_name`` Name of profile (if profile enabled)\n\n``profile_path`` Path to profiles (if profile enabled)\n\n``preferences`` Profile preferences (Chrome/Chromium only)\n\n``proxy`` Proxy server address (Chrome only)\n\nReturns an index of the webdriver session.\n\n=== Process of opening a browser ===\n\n1. Get the order of browsers\n\n2. Loop the list of preferred browsers\n\n    a. Set the webdriver options for the browser\n\n    b. Create the webdriver using existing installation\n\n    c. (If step b. failed) Download and install webdriver, try again\n\n    d. (If step c. failed) Try starting webdriver in headless mode\n\n3. Open the URL\n\nReturns index or custom alias for the browser instance.\n\nRaises ``BrowserNotFoundError`` if unable to open the browser.\n\nFor information about Safari webdriver setup, see\nhttps://developer.apple.com/documentation/webkit/testing_with_webdriver_in_safari\n\nExample:\n    | ${idx1} | Open Available Browser | https://www.robocorp.com |\n    | ${idx2} | Open Available Browser | ${URL} | browser_selection=opera,firefox |\n    | Open Available Browser | ${URL} | headless=True | proxy=localhost:8899 |",
                "_name": "Open Available Browser",
                "_lineno": "105"
            },
            {
                "arguments": {
                    "arg": [
                        "url: str = None",
                        "browser: str = firefox",
                        "alias: str = None",
                        "remote_url: typing.Union[bool, str] = False",
                        "desired_capabilities: typing.Union[dict, NoneType, str] = None",
                        "ff_profile_dir: typing.Union[selenium.webdriver.firefox.firefox_profile.FirefoxProfile, str, NoneType] = None",
                        "options: typing.Any = None",
                        "service_log_path: str = None",
                        "executable_path: str = None"
                    ]
                },
                "doc": "Opens a new browser instance to the optional ``url``.\n\nThe ``browser`` argument specifies which browser to use. The\nsupported browsers are listed in the table below. The browser names\nare case-insensitive and some browsers have multiple supported names.\n\n|    = Browser =    |        = Name(s) =       |\n| Firefox           | firefox, ff              |\n| Google Chrome     | googlechrome, chrome, gc |\n| Headless Firefox  | headlessfirefox          |\n| Headless Chrome   | headlesschrome           |\n| Internet Explorer | internetexplorer, ie     |\n| Edge              | edge                     |\n| Safari            | safari                   |\n| Opera             | opera                    |\n| Android           | android                  |\n| Iphone            | iphone                   |\n| PhantomJS         | phantomjs                |\n| HTMLUnit          | htmlunit                 |\n| HTMLUnit with Javascript | htmlunitwithjs    |\n\nTo be able to actually use one of these browsers, you need to have\na matching Selenium browser driver available. See the\n[https://github.com/robotframework/SeleniumLibrary#browser-drivers|\nproject documentation] for more details. Headless Firefox and\nHeadless Chrome are new additions in SeleniumLibrary 3.1.0\nand require Selenium 3.8.0 or newer.\n\nAfter opening the browser, it is possible to use optional\n``url`` to navigate the browser to the desired address.\n\nOptional ``alias`` is an alias given for this browser instance and\nit can be used for switching between browsers. When same ``alias``\nis given with two `Open Browser` keywords, the first keyword will\nopen a new browser, but the second one will switch to the already\nopened browser and will not open a new browser. The ``alias``\ndefinition overrules ``browser`` definition. When same ``alias``\nis used but a different ``browser`` is defined, then switch to\na browser with same alias is done and new browser is not opened.\nAn alternative approach for switching is using an index returned\nby this keyword. These indices start from 1, are incremented when new\nbrowsers are opened, and reset back to 1 when `Close All Browsers`\nis called. See `Switch Browser` for more information and examples.\n\nOptional ``remote_url`` is the URL for a\n[https://github.com/SeleniumHQ/selenium/wiki/Grid2|Selenium Grid].\n\nOptional ``desired_capabilities`` can be used to configure, for example,\nlogging preferences for a browser or a browser and operating system\nwhen using [http://saucelabs.com|Sauce Labs]. Desired capabilities can\nbe given either as a Python dictionary or as a string in the format\n``key1:value1,key2:value2``.\n[https://github.com/SeleniumHQ/selenium/wiki/DesiredCapabilities|\nSelenium documentation] lists possible capabilities that can be\nenabled.\n\nOptional ``ff_profile_dir`` is the path to the Firefox profile\ndirectory if you wish to overwrite the default profile Selenium\nuses. Notice that prior to SeleniumLibrary 3.0, the library\ncontained its own profile that was used by default. The\n``ff_profile_dir`` can also be an instance of the\n[https://seleniumhq.github.io/selenium/docs/api/py/webdriver_firefox/selenium.webdriver.firefox.firefox_profile.html|selenium.webdriver.FirefoxProfile]\n. As a third option, it is possible to use `FirefoxProfile` methods\nand attributes to define the profile using methods and attributes\nin the same way as with ``options`` argument. Example: It is possible\nto use FirefoxProfile `set_preference` to define different\nprofile settings. See ``options`` argument documentation in below\nhow to handle backslash escaping.\n\nOptional ``options`` argument allows defining browser specific\nSelenium options. Example for Chrome, the ``options`` argument\nallows defining the following\n[https://seleniumhq.github.io/selenium/docs/api/py/webdriver_chrome/selenium.webdriver.chrome.options.html#selenium.webdriver.chrome.options.Options|methods and attributes]\nand for Firefox these\n[https://seleniumhq.github.io/selenium/docs/api/py/webdriver_firefox/selenium.webdriver.firefox.options.html?highlight=firefox#selenium.webdriver.firefox.options.Options|methods and attributes]\nare available. Please note that not all browsers, supported by the\nSeleniumLibrary, have Selenium options available. Therefore please\nconsult the Selenium documentation which browsers do support\nthe Selenium options. If ``browser`` argument is `android` then\n[https://seleniumhq.github.io/selenium/docs/api/py/webdriver_chrome/selenium.webdriver.chrome.options.html#selenium.webdriver.chrome.options.Options|Chrome options]\nis used. Selenium options are also supported, when ``remote_url``\nargument is used.\n\nThe SeleniumLibrary ``options`` argument accepts Selenium\noptions in two different formats: as a string and as Python object\nwhich is an instance of the Selenium options class.\n\nThe string format allows defining Selenium options methods\nor attributes and their arguments in Robot Framework test data.\nThe method and attributes names are case and space sensitive and\nmust match to the Selenium options methods and attributes names.\nWhen defining a method, it must be defined in a similar way as in\npython: method name, opening parenthesis, zero to many arguments\nand closing parenthesis. If there is a need to define multiple\narguments for a single method, arguments must be separated with\ncomma, just like in Python. Example: `add_argument(\"--headless\")`\nor `add_experimental_option(\"key\", \"value\")`. Attributes are\ndefined in a similar way as in Python: attribute name, equal sign,\nand attribute value. Example, `headless=True`. Multiple methods\nand attributes must be separated by a semicolon. Example:\n`add_argument(\"--headless\");add_argument(\"--start-maximized\")`.\n\nArguments allow defining Python data types and arguments are\nevaluated by using Python\n[https://docs.python.org/3/library/ast.html#ast.literal_eval|ast.literal_eval].\nStrings must be quoted with single or double quotes, example \"value\"\nor 'value'. It is also possible to define other Python builtin\ndata types, example `True` or `None`, by not using quotes\naround the arguments.\n\nThe string format is space friendly. Usually, spaces do not alter\nthe defining methods or attributes. There are two exceptions.\nIn some Robot Framework test data formats, two or more spaces are\nconsidered as cell separator and instead of defining a single\nargument, two or more arguments may be defined. Spaces in string\narguments are not removed and are left as is. Example\n`add_argument ( \"--headless\" )` is same as\n`add_argument(\"--headless\")`. But `add_argument(\" --headless \")` is\nnot same same as `add_argument ( \"--headless\" )`, because\nspaces inside of quotes are not removed. Please note that if\noptions string contains backslash, example a Windows OS path,\nthe backslash needs escaping both in Robot Framework data and\nin Python side. This means single backslash must be writen using\nfour backslash characters. Example, Windows path:\n\"C:\\path\\to\\profile\" must be written as\n\"C:\\\\\\\\path\\\\\\to\\\\\\\\profile\". Another way to write\nbackslash is use Python\n[https://docs.python.org/3/reference/lexical_analysis.html#string-and-bytes-literals|raw strings]\nand example write: r\"C:\\\\path\\\\to\\\\profile\".\n\nAs last format, ``options`` argument also supports receiving\nthe Selenium options as Python class instance. In this case, the\ninstance is used as-is and the SeleniumLibrary will not convert\nthe instance to other formats.\nFor example, if the following code return value is saved to\n`${options}` variable in the Robot Framework data:\n| options = webdriver.ChromeOptions()\n| options.add_argument('--disable-dev-shm-usage')\n| return options\n\nThen the `${options}` variable can be used as an argument to\n``options``.\n\nExample the ``options`` argument can be used to launch Chomium-based\napplications which utilize the\n[https://bitbucket.org/chromiumembedded/cef/wiki/UsingChromeDriver|Chromium Embedded Framework]\n. To lauch Chomium-based application, use ``options`` to define\n`binary_location` attribute and use `add_argument` method to define\n`remote-debugging-port` port for the application. Once the browser\nis opened, the test can interact with the embedded web-content of\nthe system under test.\n\nOptional ``service_log_path`` argument defines the name of the\nfile where to write the browser driver logs. If the\n``service_log_path``  argument contain a  marker ``{index}``, it\nwill be automatically replaced with unique running\nindex preventing files to be overwritten. Indices start's from 1,\nand how they are represented can be customized using Python's\n[https://docs.python.org/3/library/string.html#format-string-syntax|\nformat string syntax].\n\nOptional ``executable_path`` argument defines the path to the driver\nexecutable, example to a chromedriver or a geckodriver. If not defined\nit is assumed the executable is in the\n[https://en.wikipedia.org/wiki/PATH_(variable)|$PATH].\n\nExamples:\n| `Open Browser` | http://example.com | Chrome  |                                         |\n| `Open Browser` | http://example.com | Firefox | alias=Firefox                           |\n| `Open Browser` | http://example.com | Edge    | remote_url=http://127.0.0.1:4444/wd/hub |\n| `Open Browser` | about:blank        |         |                                         |\n| `Open Browser` | browser=Chrome     |         |                                         |\n\nAlias examples:\n| ${1_index} =    | `Open Browser` | http://example.com | Chrome  | alias=Chrome     | # Opens new browser because alias is new.         |\n| ${2_index} =    | `Open Browser` | http://example.com | Firefox |                  | # Opens new browser because alias is not defined. |\n| ${3_index} =    | `Open Browser` | http://example.com | Chrome  | alias=Chrome     | # Switches to the browser with Chrome alias.      |\n| ${4_index} =    | `Open Browser` | http://example.com | Chrome  | alias=${1_index} | # Switches to the browser with Chrome alias.      |\n| Should Be Equal | ${1_index}     | ${3_index}         |         |                  |                                                   |\n| Should Be Equal | ${1_index}     | ${4_index}         |         |                  |                                                   |\n| Should Be Equal | ${2_index}     | ${2}               |         |                  |                                                   |\n\nExample when using\n[https://seleniumhq.github.io/selenium/docs/api/py/webdriver_chrome/selenium.webdriver.chrome.options.html#selenium.webdriver.chrome.options.Options|Chrome options]\nmethod:\n| `Open Browser` | http://example.com | Chrome | options=add_argument(\"--disable-popup-blocking\"); add_argument(\"--ignore-certificate-errors\") | # Sting format.                    |\n|  ${options} =  |     Get Options    |        |                                                                                               | # Selenium options instance.       |\n| `Open Browser` | http://example.com | Chrome | options=${options}                                                                            |                                    |\n| `Open Browser` | None               | Chrome | options=binary_location=\"/path/to/binary\";add_argument(\"remote-debugging-port=port\")          | # Start Chomium-based application. |\n| `Open Browser` | None               | Chrome | options=binary_location=r\"C:\\\\path\\\\to\\\\binary\"                                         | # Windows OS path escaping.        |\n\nExample for FirefoxProfile\n| `Open Browser` | http://example.com | Firefox | ff_profile_dir=/path/to/profile                                                  | # Using profile from disk.                       |\n| `Open Browser` | http://example.com | Firefox | ff_profile_dir=${FirefoxProfile_instance}                                        | # Using instance of FirefoxProfile.              |\n| `Open Browser` | http://example.com | Firefox | ff_profile_dir=set_preference(\"key\", \"value\");set_preference(\"other\", \"setting\") | # Defining profile using FirefoxProfile mehtods. |\n\nIf the provided configuration options are not enough, it is possible\nto use `Create Webdriver` to customize browser initialization even\nmore.\n\nApplying ``desired_capabilities`` argument also for local browser is\nnew in SeleniumLibrary 3.1.\n\nUsing ``alias`` to decide, is the new browser opened is new\nin SeleniumLibrary 4.0. The ``options`` and ``service_log_path``\nare new in SeleniumLibrary 4.0. Support for ``ff_profile_dir``\naccepting an instance of the `selenium.webdriver.FirefoxProfile`\nand support defining FirefoxProfile with methods and\nattributes are new in SeleniumLibrary 4.0.\n\nMaking ``url`` optional is new in SeleniumLibrary 4.1.\n\nThe ``executable_path`` argument is new in SeleniumLibrary 4.2.",
                "_name": "Open Browser",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\browsermanagement.py",
                "_lineno": "60"
            },
            {
                "arguments": {
                    "arg": [
                        "url: str",
                        "use_profile: bool = False",
                        "headless: bool = False",
                        "maximized: bool = False",
                        "alias: str = None",
                        "profile_name: str = None",
                        "profile_path: str = None",
                        "preferences: dict = None",
                        "proxy: str = None"
                    ]
                },
                "doc": "Open Chrome browser. See ``Open Available Browser`` for\ndescriptions of arguments.",
                "_name": "Open Chrome Browser",
                "_lineno": "391"
            },
            {
                "arguments": {
                    "arg": "locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]"
                },
                "doc": "Opens the context menu on the element identified by ``locator``.",
                "_name": "Open Context Menu",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "_lineno": "860"
            },
            {
                "arguments": {
                    "arg": "url: str"
                },
                "doc": "Open Chrome browser in headless mode.\n\n``url`` URL to open\n\nExample:\n    | ${idx} | Open Headless Chrome Browser | https://www.google.com |",
                "_name": "Open Headless Chrome Browser",
                "_lineno": "445"
            },
            {
                "arguments": {
                    "arg": [
                        "url: str",
                        "tab=True"
                    ]
                },
                "doc": "Open URL with user's default browser\n\n:param url: URL to open\n:param tab: defines is url is opened in a tab (default `True`) or\n in new window (`False`)\n\nExample:\n    | Open User Browser  | https://www.google.com?q=Autosphere |\n    | Open User Browser  | https://www.google.com?q=Autosphere | tab=False |",
                "_name": "Open User Browser",
                "_lineno": "1197"
            },
            {
                "arguments": {
                    "arg": [
                        "text: str",
                        "loglevel: str = TRACE"
                    ]
                },
                "doc": "Verifies that current page contains ``text``.\n\nIf this keyword fails, it automatically logs the page source\nusing the log level specified with the optional ``loglevel``\nargument. Valid log levels are ``DEBUG``, ``INFO`` (default),\n``WARN``, and ``NONE``. If the log level is ``NONE`` or below\nthe current active log level the source will not be logged.",
                "_name": "Page Should Contain",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "_lineno": "127"
            },
            {
                "arguments": {
                    "arg": [
                        "locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]",
                        "message: str = None",
                        "loglevel: str = TRACE"
                    ]
                },
                "doc": "Verifies button ``locator`` is found from current page.\n\nSee `Page Should Contain Element` for an explanation about ``message``\nand ``loglevel`` arguments.\n\nSee the `Locating elements` section for details about the locator\nsyntax. When using the default locator strategy, buttons are\nsearched using ``id``, ``name``, and ``value``.",
                "_name": "Page Should Contain Button",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\formelement.py",
                "_lineno": "430"
            },
            {
                "arguments": {
                    "arg": [
                        "locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]",
                        "message: str = None",
                        "loglevel: str = TRACE"
                    ]
                },
                "doc": "Verifies checkbox ``locator`` is found from the current page.\n\nSee `Page Should Contain Element` for an explanation about ``message``\nand ``loglevel`` arguments.\n\nSee the `Locating elements` section for details about the locator\nsyntax.",
                "_name": "Page Should Contain Checkbox",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\formelement.py",
                "_lineno": "70"
            },
            {
                "arguments": {
                    "arg": [
                        "locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]",
                        "message: str = None",
                        "loglevel: str = TRACE",
                        "limit: int = None"
                    ]
                },
                "doc": "Verifies that element ``locator`` is found on the current page.\n\nSee the `Locating elements` section for details about the locator\nsyntax.\n\nThe ``message`` argument can be used to override the default error\nmessage.\n\nThe ``limit`` argument can used to define how many elements the\npage should contain. When ``limit`` is ``None`` (default) page can\ncontain one or more elements. When limit is a number, page must\ncontain same number of elements.\n\nSee `Page Should Contain` for an explanation about the ``loglevel``\nargument.\n\nExamples assumes that locator matches to two elements.\n| `Page Should Contain Element` | div_name | limit=1    | # Keyword fails.                  |\n| `Page Should Contain Element` | div_name | limit=2    | # Keyword passes.                 |\n| `Page Should Contain Element` | div_name | limit=none | # None is considered one or more. |\n| `Page Should Contain Element` | div_name |            | # Same as above.                  |\n\nThe ``limit`` argument is new in SeleniumLibrary 3.0.",
                "_name": "Page Should Contain Element",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "_lineno": "144"
            },
            {
                "arguments": {
                    "arg": [
                        "locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]",
                        "message: str = None",
                        "loglevel: str = TRACE"
                    ]
                },
                "doc": "Verifies image identified by ``locator`` is found from current page.\n\nSee the `Locating elements` section for details about the locator\nsyntax. When using the default locator strategy, images are searched\nusing ``id``, ``name``, ``src`` and ``alt``.\n\nSee `Page Should Contain Element` for an explanation about ``message``\nand ``loglevel`` arguments.",
                "_name": "Page Should Contain Image",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "_lineno": "1064"
            },
            {
                "arguments": {
                    "arg": [
                        "locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]",
                        "message: str = None",
                        "loglevel: str = TRACE"
                    ]
                },
                "doc": "Verifies link identified by ``locator`` is found from current page.\n\nSee the `Locating elements` section for details about the locator\nsyntax. When using the default locator strategy, links are searched\nusing ``id``, ``name``, ``href`` and the link text.\n\nSee `Page Should Contain Element` for an explanation about ``message``\nand ``loglevel`` arguments.",
                "_name": "Page Should Contain Link",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "_lineno": "1014"
            },
            {
                "arguments": {
                    "arg": [
                        "locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]",
                        "message: str = None",
                        "loglevel: str = TRACE"
                    ]
                },
                "doc": "Verifies selection list ``locator`` is found from current page.\n\nSee `Page Should Contain Element` for an explanation about ``message``\nand ``loglevel`` arguments.\n\nSee the `Locating elements` section for details about the locator\nsyntax.",
                "_name": "Page Should Contain List",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\selectelement.py",
                "_lineno": "159"
            },
            {
                "arguments": {
                    "arg": [
                        "locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]",
                        "message: str = None",
                        "loglevel: str = TRACE"
                    ]
                },
                "doc": "Verifies radio button ``locator`` is found from current page.\n\nSee `Page Should Contain Element` for an explanation about ``message``\nand ``loglevel`` arguments.\n\nSee the `Locating elements` section for details about the locator\nsyntax. When using the default locator strategy, radio buttons are\nsearched using ``id``, ``name`` and ``value``.",
                "_name": "Page Should Contain Radio Button",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\formelement.py",
                "_lineno": "132"
            },
            {
                "arguments": {
                    "arg": [
                        "locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]",
                        "message: str = None",
                        "loglevel: str = TRACE"
                    ]
                },
                "doc": "Verifies text field ``locator`` is found from current page.\n\nSee `Page Should Contain Element` for an explanation about ``message``\nand ``loglevel`` arguments.\n\nSee the `Locating elements` section for details about the locator\nsyntax.",
                "_name": "Page Should Contain Textfield",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\formelement.py",
                "_lineno": "300"
            },
            {
                "arguments": {
                    "arg": [
                        "text: str",
                        "loglevel: str = TRACE"
                    ]
                },
                "doc": "Verifies the current page does not contain ``text``.\n\nSee `Page Should Contain` for an explanation about the ``loglevel``\nargument.",
                "_name": "Page Should Not Contain",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "_lineno": "192"
            },
            {
                "arguments": {
                    "arg": [
                        "locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]",
                        "message: str = None",
                        "loglevel: str = TRACE"
                    ]
                },
                "doc": "Verifies button ``locator`` is not found from current page.\n\nSee `Page Should Contain Element` for an explanation about ``message``\nand ``loglevel`` arguments.\n\nSee the `Locating elements` section for details about the locator\nsyntax. When using the default locator strategy, buttons are\nsearched using ``id``, ``name``, and ``value``.",
                "_name": "Page Should Not Contain Button",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\formelement.py",
                "_lineno": "451"
            },
            {
                "arguments": {
                    "arg": [
                        "locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]",
                        "message: str = None",
                        "loglevel: str = TRACE"
                    ]
                },
                "doc": "Verifies checkbox ``locator`` is not found from the current page.\n\nSee `Page Should Contain Element` for an explanation about ``message``\nand ``loglevel`` arguments.\n\nSee the `Locating elements` section for details about the locator\nsyntax.",
                "_name": "Page Should Not Contain Checkbox",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\formelement.py",
                "_lineno": "87"
            },
            {
                "arguments": {
                    "arg": [
                        "locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]",
                        "message: str = None",
                        "loglevel: str = TRACE"
                    ]
                },
                "doc": "Verifies that element ``locator`` is not found on the current page.\n\nSee the `Locating elements` section for details about the locator\nsyntax.\n\nSee `Page Should Contain` for an explanation about ``message`` and\n``loglevel`` arguments.",
                "_name": "Page Should Not Contain Element",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "_lineno": "204"
            },
            {
                "arguments": {
                    "arg": [
                        "locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]",
                        "message: str = None",
                        "loglevel: str = TRACE"
                    ]
                },
                "doc": "Verifies image identified by ``locator`` is not found from current page.\n\nSee the `Locating elements` section for details about the locator\nsyntax. When using the default locator strategy, images are searched\nusing ``id``, ``name``, ``src`` and ``alt``.\n\nSee `Page Should Contain Element` for an explanation about ``message``\nand ``loglevel`` arguments.",
                "_name": "Page Should Not Contain Image",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "_lineno": "1082"
            },
            {
                "arguments": {
                    "arg": [
                        "locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]",
                        "message: str = None",
                        "loglevel: str = TRACE"
                    ]
                },
                "doc": "Verifies link identified by ``locator`` is not found from current page.\n\nSee the `Locating elements` section for details about the locator\nsyntax. When using the default locator strategy, links are searched\nusing ``id``, ``name``, ``href`` and the link text.\n\nSee `Page Should Contain Element` for an explanation about ``message``\nand ``loglevel`` arguments.",
                "_name": "Page Should Not Contain Link",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "_lineno": "1032"
            },
            {
                "arguments": {
                    "arg": [
                        "locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]",
                        "message: str = None",
                        "loglevel: str = TRACE"
                    ]
                },
                "doc": "Verifies selection list ``locator`` is not found from current page.\n\nSee `Page Should Contain Element` for an explanation about ``message``\nand ``loglevel`` arguments.\n\nSee the `Locating elements` section for details about the locator\nsyntax.",
                "_name": "Page Should Not Contain List",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\selectelement.py",
                "_lineno": "176"
            },
            {
                "arguments": {
                    "arg": [
                        "locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]",
                        "message: str = None",
                        "loglevel: str = TRACE"
                    ]
                },
                "doc": "Verifies radio button ``locator`` is not found from current page.\n\nSee `Page Should Contain Element` for an explanation about ``message``\nand ``loglevel`` arguments.\n\nSee the `Locating elements` section for details about the locator\nsyntax. When using the default locator strategy, radio buttons are\nsearched using ``id``, ``name`` and ``value``.",
                "_name": "Page Should Not Contain Radio Button",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\formelement.py",
                "_lineno": "150"
            },
            {
                "arguments": {
                    "arg": [
                        "locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]",
                        "message: str = None",
                        "loglevel: str = TRACE"
                    ]
                },
                "doc": "Verifies text field ``locator`` is not found from current page.\n\nSee `Page Should Contain Element` for an explanation about ``message``\nand ``loglevel`` arguments.\n\nSee the `Locating elements` section for details about the locator\nsyntax.",
                "_name": "Page Should Not Contain Textfield",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\formelement.py",
                "_lineno": "317"
            },
            {
                "arguments": {
                    "arg": [
                        "locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]",
                        "key: str"
                    ]
                },
                "doc": "*DEPRECATED in SeleniumLibrary 4.0.* use `Press Keys` instead.",
                "_name": "Press Key",
                "_deprecated": "true",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "_lineno": "894"
            },
            {
                "arguments": {
                    "arg": [
                        "locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, NoneType, str] = None",
                        "*keys: str"
                    ]
                },
                "doc": "Simulates the user pressing key(s) to an element or on the active browser.\n\nIf ``locator`` evaluates as false, see `Boolean arguments` for more\ndetails, then the ``keys`` are sent to the currently active browser.\nOtherwise element is searched and ``keys`` are send to the element\nidentified by the ``locator``. In later case, keyword fails if element\nis not found. See the `Locating elements` section for details about\nthe locator syntax.\n\n``keys`` arguments can contain one or many strings, but it can not\nbe empty. ``keys`` can also be a combination of\n[https://seleniumhq.github.io/selenium/docs/api/py/webdriver/selenium.webdriver.common.keys.html|Selenium Keys]\nand strings or a single Selenium Key. If Selenium Key is combined\nwith strings, Selenium key and strings must be separated by the\n`+` character, like in `CONTROL+c`. Selenium Keys\nare space and case sensitive and Selenium Keys are not parsed\ninside of the string. Example AALTO, would send string `AALTO`\nand `ALT` not parsed inside of the string. But `A+ALT+O` would\nfound Selenium ALT key from the ``keys`` argument. It also possible\nto press many Selenium Keys down at the same time, example\n'ALT+ARROW_DOWN`.\n\nIf Selenium Keys are detected in the ``keys`` argument, keyword\nwill press the Selenium Key down, send the strings and\n then release the Selenium Key. If keyword needs to send a Selenium\nKey as a string, then each character must be separated with\n`+` character, example `E+N+D`.\n\n`CTRL` is alias for\n[https://seleniumhq.github.io/selenium/docs/api/py/webdriver/selenium.webdriver.common.keys.html#selenium.webdriver.common.keys.Keys.CONTROL|Selenium CONTROL]\nand ESC is alias for\n[https://seleniumhq.github.io/selenium/docs/api/py/webdriver/selenium.webdriver.common.keys.html#selenium.webdriver.common.keys.Keys.ESCAPE|Selenium ESCAPE]\n\nNew in SeleniumLibrary 3.3\n\nExamples:\n| `Press Keys` | text_field | AAAAA          |            | # Sends string \"AAAAA\" to element.                                                |\n| `Press Keys` | None       | BBBBB          |            | # Sends string \"BBBBB\" to currently active browser.                               |\n| `Press Keys` | text_field | E+N+D          |            | # Sends string \"END\" to element.                                                  |\n| `Press Keys` | text_field | XXX            | YY         | # Sends strings \"XXX\" and \"YY\" to element.                                        |\n| `Press Keys` | text_field | XXX+YY         |            | # Same as above.                                                                  |\n| `Press Keys` | text_field | ALT+ARROW_DOWN |            | # Pressing \"ALT\" key down, then pressing ARROW_DOWN and then releasing both keys. |\n| `Press Keys` | text_field | ALT            | ARROW_DOWN | # Pressing \"ALT\" key and then pressing ARROW_DOWN.                                |\n| `Press Keys` | text_field | CTRL+c         |            | # Pressing CTRL key down, sends string \"c\" and then releases CTRL key.            |\n| `Press Keys` | button     | RETURN         |            | # Pressing \"ENTER\" key to element.                                                |",
                "_name": "Press Keys",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "_lineno": "902"
            },
            {
                "arguments": {
                    "arg": [
                        "group_name: str",
                        "value: str"
                    ]
                },
                "doc": "Verifies radio button group ``group_name`` is set to ``value``.\n\n``group_name`` is the ``name`` of the radio button group.",
                "_name": "Radio Button Should Be Set To",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\formelement.py",
                "_lineno": "168"
            },
            {
                "arguments": {
                    "arg": "group_name: str"
                },
                "doc": "Verifies radio button group ``group_name`` has no selection.\n\n``group_name`` is the ``name`` of the radio button group.",
                "_name": "Radio Button Should Not Be Selected",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\formelement.py",
                "_lineno": "183"
            },
            {
                "arguments": {
                    "arg": "keyword: typing.Union[str, NoneType]"
                },
                "doc": "Sets the keyword to execute, when a SeleniumLibrary keyword fails.\n\n``keyword`` is the name of a keyword that will be executed if a\nSeleniumLibrary keyword fails. It is possible to use any available\nkeyword, including user keywords or keywords from other libraries,\nbut the keyword must not take any arguments.\n\nThe initial keyword to use is set when `importing` the library, and\nthe keyword that is used by default is `Capture Page Screenshot`.\nTaking a screenshot when something failed is a very useful\nfeature, but notice that it can slow down the execution.\n\nIt is possible to use string ``NOTHING`` or ``NONE``,\ncase-insensitively, as well as Python ``None`` to disable this\nfeature altogether.\n\nThis keyword returns the name of the previously registered\nfailure keyword or Python ``None`` if this functionality was\npreviously disabled. The return value can be always used to\nrestore the original value later.\n\nExample:\n| `Register Keyword To Run On Failure`  | Log Source |\n| ${previous kw}= | `Register Keyword To Run On Failure`  | NONE |\n| `Register Keyword To Run On Failure`  | ${previous kw} |\n\nChanges in SeleniumLibrary 3.0:\n- Possible to use string ``NONE`` or Python ``None`` to disable the\n  functionality.\n- Return Python ``None`` when the functionality was disabled earlier.\n  In previous versions special value ``No Keyword`` was returned and\n  it could not be used to restore the original state.",
                "_name": "Register Keyword To Run On Failure",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\runonfailure.py",
                "_lineno": "23"
            },
            {
                "arguments": "",
                "doc": "Simulates user reloading page.",
                "_name": "Reload Page",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\browsermanagement.py",
                "_lineno": "595"
            },
            {
                "arguments": {
                    "arg": "strategy_name: str"
                },
                "doc": "Removes a previously added custom location strategy.\n\nSee `Custom locators` for information on how to create and use\ncustom strategies.",
                "_name": "Remove Location Strategy",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "_lineno": "1133"
            },
            {
                "arguments": {
                    "arg": [
                        "locator: str = None",
                        "filename: str ="
                    ]
                },
                "doc": "Capture page and/or element screenshot.\n\n``locator`` if defined, take element screenshot, if not takes page screenshot\n\n``filename`` filename for the screenshot, by default creates file `screenshot-timestamp-element/page.png`\nif set to `None` then file is not saved at all\n\nExample:\n    | Screenshot | locator=//img[@alt=\"Google\"] | filename=locator.png |             # element screenshot, defined filename\n    | Screenshot | filename=page.png            |                                    # page screenshot, defined filename\n    | Screenshot | filename=${NONE}             |                                    # page screenshot, NO file will be created\n    | Screenshot |                              |                                    # page screenshot, default filename\n    | Screenshot | locator=//img[@alt=\"Google\"] |                                    # element screenshot, default filename\n    | Screenshot | locator=//img[@alt=\"Google\"] | filename=${CURDIR}/subdir/loc.png  # element screenshot, create dirs if not existing",
                "_name": "Screenshot",
                "_lineno": "456"
            },
            {
                "arguments": {
                    "arg": "locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]"
                },
                "doc": "Scrolls the element identified by ``locator`` into view.\n\nSee the `Locating elements` section for details about the locator\nsyntax.\n\nNew in SeleniumLibrary 3.2.0",
                "_name": "Scroll Element Into View",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "_lineno": "737"
            },
            {
                "arguments": {
                    "arg": "locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]"
                },
                "doc": "Selects all options from multi-selection list ``locator``.\n\nSee the `Locating elements` section for details about the locator\nsyntax.",
                "_name": "Select All From List",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\selectelement.py",
                "_lineno": "193"
            },
            {
                "arguments": {
                    "arg": "locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]"
                },
                "doc": "Selects the checkbox identified by ``locator``.\n\nDoes nothing if checkbox is already selected.\n\nSee the `Locating elements` section for details about the locator\nsyntax.",
                "_name": "Select Checkbox",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\formelement.py",
                "_lineno": "104"
            },
            {
                "arguments": {
                    "arg": "locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]"
                },
                "doc": "Sets frame identified by ``locator`` as the current frame.\n\nSee the `Locating elements` section for details about the locator\nsyntax.\n\nWorks both with frames and iframes. Use `Unselect Frame` to cancel\nthe frame selection and return to the main frame.\n\nExample:\n| `Select Frame`   | top-frame | # Select frame with id or name 'top-frame'   |\n| `Click Link`     | example   | # Click link 'example' in the selected frame |\n| `Unselect Frame` |           | # Back to main frame.                        |\n| `Select Frame`   | //iframe[@name='xxx'] | # Select frame using xpath       |",
                "_name": "Select Frame",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\frames.py",
                "_lineno": "25"
            },
            {
                "arguments": {
                    "arg": [
                        "locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]",
                        "*indexes: str"
                    ]
                },
                "doc": "Selects options from selection list ``locator`` by ``indexes``.\n\nIndexes of list options start from 0.\n\nIf more than one option is given for a single-selection list,\nthe last value will be selected. With multi-selection lists all\nspecified options are selected, but possible old selections are\nnot cleared.\n\nSee the `Locating elements` section for details about the locator\nsyntax.",
                "_name": "Select From List By Index",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\selectelement.py",
                "_lineno": "209"
            },
            {
                "arguments": {
                    "arg": [
                        "locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]",
                        "*labels: str"
                    ]
                },
                "doc": "Selects options from selection list ``locator`` by ``labels``.\n\nIf more than one option is given for a single-selection list,\nthe last value will be selected. With multi-selection lists all\nspecified options are selected, but possible old selections are\nnot cleared.\n\nSee the `Locating elements` section for details about the locator\nsyntax.",
                "_name": "Select From List By Label",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\selectelement.py",
                "_lineno": "256"
            },
            {
                "arguments": {
                    "arg": [
                        "locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]",
                        "*values: str"
                    ]
                },
                "doc": "Selects options from selection list ``locator`` by ``values``.\n\nIf more than one option is given for a single-selection list,\nthe last value will be selected. With multi-selection lists all\nspecified options are selected, but possible old selections are\nnot cleared.\n\nSee the `Locating elements` section for details about the locator\nsyntax.",
                "_name": "Select From List By Value",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\selectelement.py",
                "_lineno": "234"
            },
            {
                "arguments": {
                    "arg": [
                        "group_name: str",
                        "value: str"
                    ]
                },
                "doc": "Sets the radio button group ``group_name`` to ``value``.\n\nThe radio button to be selected is located by two arguments:\n- ``group_name`` is the name of the radio button group.\n- ``value`` is the ``id`` or ``value`` attribute of the actual\n  radio button.\n\nExamples:\n| `Select Radio Button` | size    | XL    |\n| `Select Radio Button` | contact | email |",
                "_name": "Select Radio Button",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\formelement.py",
                "_lineno": "198"
            },
            {
                "arguments": {
                    "arg": "value: timedelta"
                },
                "doc": "Sets the implicit wait value used by Selenium.\n\nSame as `Set Selenium Implicit Wait` but only affects the current\nbrowser.",
                "_name": "Set Browser Implicit Wait",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\browsermanagement.py",
                "_lineno": "698"
            },
            {
                "arguments": {
                    "arg": "locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]"
                },
                "doc": "Sets the focus to the element identified by ``locator``.\n\nSee the `Locating elements` section for details about the locator\nsyntax.\n\nPrior to SeleniumLibrary 3.0 this keyword was named `Focus`.",
                "_name": "Set Focus To Element",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "_lineno": "725"
            },
            {
                "arguments": {
                    "arg": "path: typing.Union[NoneType, str]"
                },
                "doc": "Sets the directory for captured screenshots.\n\n``path`` argument specifies the absolute path to a directory where\nthe screenshots should be written to. If the directory does not\nexist, it will be created. The directory can also be set when\n`importing` the library. If it is not configured anywhere,\nscreenshots are saved to the same directory where Robot Framework's\nlog file is written.\n\nIf ``path`` equals to EMBED (case insensitive) and\n`Capture Page Screenshot` or `capture Element Screenshot` keywords\nfilename argument is not changed from the default value, then\nthe page or element screenshot is embedded as Base64 image to\nthe log.html.\n\nThe previous value is returned and can be used to restore\nthe original value later if needed.\n\nReturning the previous value is new in SeleniumLibrary 3.0.\nThe persist argument was removed in SeleniumLibrary 3.2 and\nEMBED is new in SeleniumLibrary 4.2.",
                "_name": "Set Screenshot Directory",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\screenshot.py",
                "_lineno": "32"
            },
            {
                "arguments": {
                    "arg": "value: timedelta"
                },
                "doc": "Sets the implicit wait value used by Selenium.\n\nThe value can be given as a number that is considered to be\nseconds or as a human-readable string like ``1 second``.\nThe previous value is returned and can be used to restore\nthe original value later if needed.\n\nThis keyword sets the implicit wait for all opened browsers.\nUse `Set Browser Implicit Wait` to set it only to the current\nbrowser.\n\nSee the `Implicit wait` section above for more information.\n\nExample:\n| ${orig wait} = | `Set Selenium Implicit Wait` | 10 seconds |\n| `Perform AJAX call that is slow` |\n| `Set Selenium Implicit Wait` | ${orig wait} |",
                "_name": "Set Selenium Implicit Wait",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\browsermanagement.py",
                "_lineno": "672"
            },
            {
                "arguments": {
                    "arg": "value: timedelta"
                },
                "doc": "Sets the delay that is waited after each Selenium command.\n\nThe value can be given as a number that is considered to be\nseconds or as a human-readable string like ``1 second``.\nThe previous value is returned and can be used to restore\nthe original value later if needed.\n\nSee the `Selenium Speed` section above for more information.\n\nExample:\n| `Set Selenium Speed` | 0.5 seconds |",
                "_name": "Set Selenium Speed",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\browsermanagement.py",
                "_lineno": "630"
            },
            {
                "arguments": {
                    "arg": "value: timedelta"
                },
                "doc": "Sets the timeout that is used by various keywords.\n\nThe value can be given as a number that is considered to be\nseconds or as a human-readable string like ``1 second``.\nThe previous value is returned and can be used to restore\nthe original value later if needed.\n\nSee the `Timeout` section above for more information.\n\nExample:\n| ${orig timeout} = | `Set Selenium Timeout` | 15 seconds |\n| `Open page that loads slowly` |\n| `Set Selenium Timeout` | ${orig timeout} |",
                "_name": "Set Selenium Timeout",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\browsermanagement.py",
                "_lineno": "650"
            },
            {
                "arguments": {
                    "arg": [
                        "x: int",
                        "y: int"
                    ]
                },
                "doc": "Sets window position using ``x`` and ``y`` coordinates.\n\nThe position is relative to the top left corner of the screen,\nbut some browsers exclude possible task bar set by the operating\nsystem from the calculation. The actual position may thus be\ndifferent with different browsers.\n\nValues can be given using strings containing numbers or by using\nactual numbers. See also `Get Window Position`.\n\nExample:\n| `Set Window Position` | 100 | 200 |",
                "_name": "Set Window Position",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\window.py",
                "_lineno": "269"
            },
            {
                "arguments": {
                    "arg": [
                        "width: int",
                        "height: int",
                        "inner: bool = False"
                    ]
                },
                "doc": "Sets current windows size to given ``width`` and ``height``.\n\nValues can be given using strings containing numbers or by using\nactual numbers. See also `Get Window Size`.\n\nBrowsers have a limit on their minimum size. Trying to set them\nsmaller will cause the actual size to be bigger than the requested\nsize.\n\nIf ``inner`` parameter is set to True, keyword sets the necessary\nwindow width and height to have the desired HTML DOM _window.innerWidth_\nand _window.innerHeight_. See `Boolean arguments` for more details on how to set boolean\narguments.\n\nThe ``inner`` argument is new since SeleniumLibrary 4.0.\n\nThis ``inner`` argument does not support Frames. If a frame is selected,\nswitch to default before running this.\n\nExample:\n| `Set Window Size` | 800 | 600 |      |\n| `Set Window Size` | 800 | 600 | True |",
                "_name": "Set Window Size",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\window.py",
                "_lineno": "212"
            },
            {
                "arguments": {
                    "arg": [
                        "locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]",
                        "event: str"
                    ]
                },
                "doc": "Simulates ``event`` on the element identified by ``locator``.\n\nThis keyword is useful if element has ``OnEvent`` handler that\nneeds to be explicitly invoked.\n\nSee the `Locating elements` section for details about the locator\nsyntax.\n\nPrior to SeleniumLibrary 3.0 this keyword was named `Simulate`.",
                "_name": "Simulate Event",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\element.py",
                "_lineno": "869"
            },
            {
                "arguments": {
                    "arg": "locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, NoneType, str] = None"
                },
                "doc": "Submits a form identified by ``locator``.\n\nIf ``locator`` is not given, first form on the page is submitted.\n\nSee the `Locating elements` section for details about the locator\nsyntax.",
                "_name": "Submit Form",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\formelement.py",
                "_lineno": "29"
            },
            {
                "arguments": {
                    "arg": "index_or_alias: str"
                },
                "doc": "Switches between active browsers using ``index_or_alias``.\n\nIndices are returned by the `Open Browser` keyword and aliases can\nbe given to it explicitly. Indices start from 1.\n\nExample:\n| `Open Browser`        | http://google.com | ff       |\n| `Location Should Be`  | http://google.com |          |\n| `Open Browser`        | http://yahoo.com  | ie       | alias=second |\n| `Location Should Be`  | http://yahoo.com  |          |\n| `Switch Browser`      | 1                 | # index  |\n| `Page Should Contain` | I'm feeling lucky |          |\n| `Switch Browser`      | second            | # alias  |\n| `Page Should Contain` | More Yahoo!       |          |\n| `Close All Browsers`  |                   |          |\n\nAbove example expects that there was no other open browsers when\nopening the first one because it used index ``1`` when switching to\nit later. If you are not sure about that, you can store the index\ninto a variable as below.\n\n| ${index} =         | `Open Browser` | http://google.com |\n| # Do something ... |                |                   |\n| `Switch Browser`   | ${index}       |                   |",
                "_name": "Switch Browser",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\browsermanagement.py",
                "_lineno": "405"
            },
            {
                "arguments": {
                    "arg": [
                        "locator: typing.Union[list, str] = MAIN",
                        "timeout: str = None",
                        "browser: str = CURRENT"
                    ]
                },
                "doc": "Switches to browser window matching ``locator``.\n\nIf the window is found, all subsequent commands use the selected\nwindow, until this keyword is used again. If the window is not\nfound, this keyword fails. The previous windows handle is returned\nand can be used to switch back to it later.\n\nNotice that alerts should be handled with\n`Handle Alert` or other alert related keywords.\n\nThe ``locator`` can be specified using different strategies somewhat\nsimilarly as when `locating elements` on pages.\n\n- By default, the ``locator`` is matched against window handle, name,\n  title, and URL. Matching is done in that order and the first\n  matching window is selected.\n\n- The ``locator`` can specify an explicit strategy by using the format\n  ``strategy:value`` (recommended) or ``strategy=value``. Supported\n  strategies are ``name``, ``title``, and ``url``. These matches windows\n  using their name, title, or URL, respectively. Additionally, ``default``\n  can be used to explicitly use the default strategy explained above.\n\n- If the ``locator`` is ``NEW`` (case-insensitive), the latest\n  opened window is selected. It is an error if this is the same\n  as the current window.\n\n- If the ``locator`` is ``MAIN`` (default, case-insensitive),\n  the main window is selected.\n\n- If the ``locator`` is ``CURRENT`` (case-insensitive), nothing is\n  done. This effectively just returns the current window handle.\n\n- If the ``locator`` is not a string, it is expected to be a list\n  of window handles _to exclude_. Such a list of excluded windows\n  can be got from `Get Window Handles` before doing an action that\n  opens a new window.\n\nThe ``timeout`` is used to specify how long keyword will poll to select\nthe new window. The ``timeout`` is new in SeleniumLibrary 3.2.\n\nExample:\n| `Click Link`      | popup1      |      | # Open new window |\n| `Switch Window`   | example     |      | # Select window using default strategy |\n| `Title Should Be` | Pop-up 1    |      |\n| `Click Button`    | popup2      |      | # Open another window |\n| ${handle} = | `Switch Window`   | NEW  | # Select latest opened window |\n| `Title Should Be` | Pop-up 2    |      |\n| `Switch Window`   | ${handle}   |      | # Select window using handle |\n| `Title Should Be` | Pop-up 1    |      |\n| `Switch Window`   | MAIN        |      | # Select the main window |\n| `Title Should Be` | Main        |      |\n| ${excludes} = | `Get Window Handles` | | # Get list of current windows |\n| `Click Link`      | popup3      |      | # Open one more window |\n| `Switch Window`   | ${excludes} |      | # Select window using excludes |\n| `Title Should Be` | Pop-up 3    |      |\n\nThe ``browser`` argument allows with ``index_or_alias`` to implicitly switch to\na specific browser when switching to a window. See `Switch Browser`\n\n- If the ``browser`` is ``CURRENT`` (case-insensitive), no other browser is\n  selected.\n\n*NOTE:*\n\n- The ``strategy:value`` syntax is only supported by SeleniumLibrary\n  3.0 and newer.\n- Prior to SeleniumLibrary 3.0 matching windows by name, title\n  and URL was case-insensitive.\n- Earlier versions supported aliases ``None``, ``null`` and the\n  empty string for selecting the main window, and alias ``self``\n  for selecting the current window. Support for these aliases was\n  removed in SeleniumLibrary 3.2.",
                "_name": "Switch Window",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\window.py",
                "_lineno": "33"
            },
            {
                "arguments": {
                    "arg": [
                        "locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, NoneType, str]",
                        "row: int",
                        "column: int",
                        "expected: str",
                        "loglevel: str = TRACE"
                    ]
                },
                "doc": "Verifies table cell contains text ``expected``.\n\nSee `Get Table Cell` that this keyword uses internally for\nan explanation about accepted arguments.",
                "_name": "Table Cell Should Contain",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\tableelement.py",
                "_lineno": "90"
            },
            {
                "arguments": {
                    "arg": [
                        "locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, NoneType, str]",
                        "column: int",
                        "expected: str",
                        "loglevel: str = TRACE"
                    ]
                },
                "doc": "Verifies table column contains text ``expected``.\n\nThe table is located using the ``locator`` argument and its column\nfound using ``column``. See the `Locating elements` section for\ndetails about the locator syntax.\n\nColumn indexes start from 1. It is possible to refer to columns\nfrom the end by using negative indexes so that -1 is the last column,\n-2 is the second last, and so on.\n\nIf a table contains cells that span multiple columns, those merged\ncells count as a single column.\n\nSee `Page Should Contain Element` for an explanation about the\n``loglevel`` argument.",
                "_name": "Table Column Should Contain",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\tableelement.py",
                "_lineno": "113"
            },
            {
                "arguments": {
                    "arg": [
                        "locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, NoneType, str]",
                        "expected: str",
                        "loglevel: str = TRACE"
                    ]
                },
                "doc": "Verifies table footer contains text ``expected``.\n\nAny ``<td>`` element inside ``<tfoot>`` element is considered to\nbe part of the footer.\n\nThe table is located using the ``locator`` argument. See the\n`Locating elements` section for details about the locator syntax.\n\nSee `Page Should Contain Element` for an explanation about the\n``loglevel`` argument.",
                "_name": "Table Footer Should Contain",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\tableelement.py",
                "_lineno": "144"
            },
            {
                "arguments": {
                    "arg": [
                        "locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, NoneType, str]",
                        "expected: str",
                        "loglevel: str = TRACE"
                    ]
                },
                "doc": "Verifies table header contains text ``expected``.\n\nAny ``<th>`` element anywhere in the table is considered to be\npart of the header.\n\nThe table is located using the ``locator`` argument. See the\n`Locating elements` section for details about the locator syntax.\n\nSee `Page Should Contain Element` for an explanation about the\n``loglevel`` argument.",
                "_name": "Table Header Should Contain",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\tableelement.py",
                "_lineno": "169"
            },
            {
                "arguments": {
                    "arg": [
                        "locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, NoneType, str]",
                        "row: int",
                        "expected: str",
                        "loglevel: str = TRACE"
                    ]
                },
                "doc": "Verifies that table row contains text ``expected``.\n\nThe table is located using the ``locator`` argument and its column\nfound using ``column``. See the `Locating elements` section for\ndetails about the locator syntax.\n\nRow indexes start from 1. It is possible to refer to rows\nfrom the end by using negative indexes so that -1 is the last row,\n-2 is the second last, and so on.\n\nIf a table contains cells that span multiple rows, a match\nonly occurs for the uppermost row of those merged cells.\n\nSee `Page Should Contain Element` for an explanation about the\n``loglevel`` argument.",
                "_name": "Table Row Should Contain",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\tableelement.py",
                "_lineno": "194"
            },
            {
                "arguments": {
                    "arg": [
                        "locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, NoneType, str]",
                        "expected: str",
                        "loglevel: str = TRACE"
                    ]
                },
                "doc": "Verifies table contains text ``expected``.\n\nThe table is located using the ``locator`` argument. See the\n`Locating elements` section for details about the locator syntax.\n\nSee `Page Should Contain Element` for an explanation about the\n``loglevel`` argument.",
                "_name": "Table Should Contain",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\tableelement.py",
                "_lineno": "225"
            },
            {
                "arguments": {
                    "arg": [
                        "locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]",
                        "expected: str",
                        "message: str = None"
                    ]
                },
                "doc": "Verifies text area ``locator`` contains text ``expected``.\n\n``message`` can be used to override default error message.\n\nSee the `Locating elements` section for details about the locator\nsyntax.",
                "_name": "Textarea Should Contain",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\formelement.py",
                "_lineno": "382"
            },
            {
                "arguments": {
                    "arg": [
                        "locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]",
                        "expected: str",
                        "message: str = None"
                    ]
                },
                "doc": "Verifies text area ``locator`` has exactly text ``expected``.\n\n``message`` can be used to override default error message.\n\nSee the `Locating elements` section for details about the locator\nsyntax.",
                "_name": "Textarea Value Should Be",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\formelement.py",
                "_lineno": "406"
            },
            {
                "arguments": {
                    "arg": [
                        "locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]",
                        "expected: str",
                        "message: str = None"
                    ]
                },
                "doc": "Verifies text field ``locator`` contains text ``expected``.\n\n``message`` can be used to override the default error message.\n\nSee the `Locating elements` section for details about the locator\nsyntax.",
                "_name": "Textfield Should Contain",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\formelement.py",
                "_lineno": "334"
            },
            {
                "arguments": {
                    "arg": [
                        "locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]",
                        "expected: str",
                        "message: str = None"
                    ]
                },
                "doc": "Verifies text field ``locator`` has exactly text ``expected``.\n\n``message`` can be used to override default error message.\n\nSee the `Locating elements` section for details about the locator\nsyntax.",
                "_name": "Textfield Value Should Be",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\formelement.py",
                "_lineno": "358"
            },
            {
                "arguments": {
                    "arg": [
                        "title: str",
                        "message: str = None"
                    ]
                },
                "doc": "Verifies that the current page title equals ``title``.\n\nThe ``message`` argument can be used to override the default error\nmessage.\n\n``message`` argument is new in SeleniumLibrary 3.1.",
                "_name": "Title Should Be",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\browsermanagement.py",
                "_lineno": "568"
            },
            {
                "arguments": {
                    "arg": "locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]"
                },
                "doc": "Unselects all options from multi-selection list ``locator``.\n\nSee the `Locating elements` section for details about the locator\nsyntax.\n\nNew in SeleniumLibrary 3.0.",
                "_name": "Unselect All From List",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\selectelement.py",
                "_lineno": "278"
            },
            {
                "arguments": {
                    "arg": "locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]"
                },
                "doc": "Removes the selection of checkbox identified by ``locator``.\n\nDoes nothing if the checkbox is not selected.\n\nSee the `Locating elements` section for details about the locator\nsyntax.",
                "_name": "Unselect Checkbox",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\formelement.py",
                "_lineno": "118"
            },
            {
                "arguments": "",
                "doc": "Sets the main frame as the current frame.\n\nIn practice cancels the previous `Select Frame` call.",
                "_name": "Unselect Frame",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\frames.py",
                "_lineno": "45"
            },
            {
                "arguments": {
                    "arg": [
                        "locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]",
                        "*indexes: str"
                    ]
                },
                "doc": "Unselects options from selection list ``locator`` by ``indexes``.\n\nIndexes of list options start from 0. This keyword works only with\nmulti-selection lists.\n\nSee the `Locating elements` section for details about the locator\nsyntax.",
                "_name": "Unselect From List By Index",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\selectelement.py",
                "_lineno": "295"
            },
            {
                "arguments": {
                    "arg": [
                        "locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]",
                        "*labels: str"
                    ]
                },
                "doc": "Unselects options from selection list ``locator`` by ``labels``.\n\nThis keyword works only with multi-selection lists.\n\nSee the `Locating elements` section for details about the locator\nsyntax.",
                "_name": "Unselect From List By Label",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\selectelement.py",
                "_lineno": "347"
            },
            {
                "arguments": {
                    "arg": [
                        "locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]",
                        "*values: str"
                    ]
                },
                "doc": "Unselects options from selection list ``locator`` by ``values``.\n\nThis keyword works only with multi-selection lists.\n\nSee the `Locating elements` section for details about the locator\nsyntax.",
                "_name": "Unselect From List By Value",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\selectelement.py",
                "_lineno": "322"
            },
            {
                "arguments": {
                    "arg": [
                        "locator: str",
                        "modifier: str = None"
                    ]
                },
                "doc": "Click button identified by ``locator``, once it becomes visible.\n\n``locator`` element locator\n\n``modifier`` press given keys while clicking the element, e.g. CTRL\n\nExample:\n    | Click Button When Visible  | //button[@class=\"mybutton\"] |",
                "_name": "Wait And Click Button",
                "_lineno": "529"
            },
            {
                "arguments": {
                    "arg": [
                        "condition: str",
                        "timeout: timedelta = None",
                        "error: str = None"
                    ]
                },
                "doc": "Waits until ``condition`` is true or ``timeout`` expires.\n\nThe condition can be arbitrary JavaScript expression but it\nmust return a value to be evaluated. See `Execute JavaScript` for\ninformation about accessing content on pages.\n\nFails if the timeout expires before the condition becomes true. See\nthe `Timeouts` section for more information about using timeouts\nand their default value.\n\n``error`` can be used to override the default error message.\n\nExamples:\n| `Wait For Condition` | return document.title == \"New Title\" |\n| `Wait For Condition` | return jQuery.active == 0            |\n| `Wait For Condition` | style = document.querySelector('h1').style; return style.background == \"red\" && style.color == \"white\" |",
                "_name": "Wait For Condition",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\waiting.py",
                "_lineno": "31"
            },
            {
                "arguments": {
                    "arg": [
                        "locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, NoneType, str]",
                        "text: str",
                        "timeout: timedelta = None",
                        "error: str = None"
                    ]
                },
                "doc": "Waits until the element ``locator`` contains ``text``.\n\nFails if ``timeout`` expires before the text appears. See\nthe `Timeouts` section for more information about using timeouts and\ntheir default value and the `Locating elements` section for details\nabout the locator syntax.\n\n``error`` can be used to override the default error message.",
                "_name": "Wait Until Element Contains",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\waiting.py",
                "_lineno": "373"
            },
            {
                "arguments": {
                    "arg": [
                        "locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, NoneType, str]",
                        "text: str",
                        "timeout: timedelta = None",
                        "error: str = None"
                    ]
                },
                "doc": "Waits until the element ``locator`` does not contain ``text``.\n\nFails if ``timeout`` expires before the text disappears. See\nthe `Timeouts` section for more information about using timeouts and\ntheir default value and the `Locating elements` section for details\nabout the locator syntax.\n\n``error`` can be used to override the default error message.",
                "_name": "Wait Until Element Does Not Contain",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\waiting.py",
                "_lineno": "397"
            },
            {
                "arguments": {
                    "arg": [
                        "locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, NoneType, str]",
                        "timeout: timedelta = None",
                        "error: str = None"
                    ]
                },
                "doc": "Waits until the element ``locator`` is enabled.\n\nElement is considered enabled if it is not disabled nor read-only.\n\nFails if ``timeout`` expires before the element is enabled. See\nthe `Timeouts` section for more information about using timeouts and\ntheir default value and the `Locating elements` section for details\nabout the locator syntax.\n\n``error`` can be used to override the default error message.\n\nConsidering read-only elements to be disabled is a new feature\nin SeleniumLibrary 3.0.",
                "_name": "Wait Until Element Is Enabled",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\waiting.py",
                "_lineno": "345"
            },
            {
                "arguments": {
                    "arg": [
                        "locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, NoneType, str]",
                        "timeout: timedelta = None",
                        "error: str = None"
                    ]
                },
                "doc": "Waits until the element ``locator`` is not visible.\n\nFails if ``timeout`` expires before the element is not visible. See\nthe `Timeouts` section for more information about using timeouts and\ntheir default value and the `Locating elements` section for details\nabout the locator syntax.\n\n``error`` can be used to override the default error message.",
                "_name": "Wait Until Element Is Not Visible",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\waiting.py",
                "_lineno": "322"
            },
            {
                "arguments": {
                    "arg": [
                        "locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, NoneType, str]",
                        "timeout: timedelta = None",
                        "error: str = None"
                    ]
                },
                "doc": "Waits until the element ``locator`` is visible.\n\nFails if ``timeout`` expires before the element is visible. See\nthe `Timeouts` section for more information about using timeouts and\ntheir default value and the `Locating elements` section for details\nabout the locator syntax.\n\n``error`` can be used to override the default error message.",
                "_name": "Wait Until Element Is Visible",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\waiting.py",
                "_lineno": "299"
            },
            {
                "arguments": {
                    "arg": [
                        "expected: str",
                        "timeout: timedelta = None",
                        "message: str = None"
                    ]
                },
                "doc": "Waits until the current URL contains ``expected``.\n\nThe ``expected`` argument contains the expected value in url.\n\nFails if ``timeout`` expires before the location contains. See\nthe `Timeouts` section for more information about using timeouts\nand their default value.\n\nThe ``message`` argument can be used to override the default error\nmessage.\n\nNew in SeleniumLibrary 4.0",
                "_name": "Wait Until Location Contains",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\waiting.py",
                "_lineno": "123"
            },
            {
                "arguments": {
                    "arg": [
                        "location: str",
                        "timeout: timedelta = None",
                        "message: str = None"
                    ]
                },
                "doc": "Waits until the current URL does not contains ``location``.\n\nThe ``location`` argument contains value not expected in url.\n\nFails if ``timeout`` expires before the location not contains. See\nthe `Timeouts` section for more information about using timeouts\nand their default value.\n\nThe ``message`` argument can be used to override the default error\nmessage.\n\nNew in SeleniumLibrary 4.3",
                "_name": "Wait Until Location Does Not Contain",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\waiting.py",
                "_lineno": "151"
            },
            {
                "arguments": {
                    "arg": [
                        "expected: str",
                        "timeout: timedelta = None",
                        "message: str = None"
                    ]
                },
                "doc": "Waits until the current URL is ``expected``.\n\nThe ``expected`` argument is the expected value in url.\n\nFails if ``timeout`` expires before the location is. See\nthe `Timeouts` section for more information about using timeouts\nand their default value.\n\nThe ``message`` argument can be used to override the default error\nmessage.\n\nNew in SeleniumLibrary 4.0",
                "_name": "Wait Until Location Is",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\waiting.py",
                "_lineno": "66"
            },
            {
                "arguments": {
                    "arg": [
                        "location: str",
                        "timeout: timedelta = None",
                        "message: str = None"
                    ]
                },
                "doc": "Waits until the current URL is not ``location``.\n\nThe ``location`` argument is the unexpected value in url.\n\nFails if ``timeout`` expires before the location is not. See\nthe `Timeouts` section for more information about using timeouts\nand their default value.\n\nThe ``message`` argument can be used to override the default error\nmessage.\n\nNew in SeleniumLibrary 4.3",
                "_name": "Wait Until Location Is Not",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\waiting.py",
                "_lineno": "95"
            },
            {
                "arguments": {
                    "arg": [
                        "text: str",
                        "timeout: timedelta = None",
                        "error: str = None"
                    ]
                },
                "doc": "Waits until ``text`` appears on the current page.\n\nFails if ``timeout`` expires before the text appears. See\nthe `Timeouts` section for more information about using timeouts\nand their default value.\n\n``error`` can be used to override the default error message.",
                "_name": "Wait Until Page Contains",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\waiting.py",
                "_lineno": "179"
            },
            {
                "arguments": {
                    "arg": [
                        "locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, NoneType, str]",
                        "timeout: timedelta = None",
                        "error: str = None",
                        "limit: int = None"
                    ]
                },
                "doc": "Waits until the element ``locator`` appears on the current page.\n\nFails if ``timeout`` expires before the element appears. See\nthe `Timeouts` section for more information about using timeouts and\ntheir default value and the `Locating elements` section for details\nabout the locator syntax.\n\n``error`` can be used to override the default error message.\n\nThe ``limit`` argument can used to define how many elements the\npage should contain. When ``limit`` is `None` (default) page can\ncontain one or more elements. When limit is a number, page must\ncontain same number of elements.\n\n``limit`` is new in SeleniumLibrary 4.4",
                "_name": "Wait Until Page Contains Element",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\waiting.py",
                "_lineno": "223"
            },
            {
                "arguments": {
                    "arg": [
                        "text: str",
                        "timeout: timedelta = None",
                        "error: str = None"
                    ]
                },
                "doc": "Waits until ``text`` disappears from the current page.\n\nFails if ``timeout`` expires before the text disappears. See\nthe `Timeouts` section for more information about using timeouts\nand their default value.\n\n``error`` can be used to override the default error message.",
                "_name": "Wait Until Page Does Not Contain",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\waiting.py",
                "_lineno": "201"
            },
            {
                "arguments": {
                    "arg": [
                        "locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, NoneType, str]",
                        "timeout: timedelta = None",
                        "error: str = None",
                        "limit: int = None"
                    ]
                },
                "doc": "Waits until the element ``locator`` disappears from the current page.\n\nFails if ``timeout`` expires before the element disappears. See\nthe `Timeouts` section for more information about using timeouts and\ntheir default value and the `Locating elements` section for details\nabout the locator syntax.\n\n``error`` can be used to override the default error message.\n\nThe ``limit`` argument can used to define how many elements the\npage should not contain. When ``limit`` is `None` (default) page can`t\ncontain any elements. When limit is a number, page must not\ncontain same number of elements.\n\n``limit`` is new in SeleniumLibrary 4.4",
                "_name": "Wait Until Page Does Not Contain Element",
                "_source": "C:\\Users\\PC\\AppData\\Roaming\\Python\\Python38\\site-packages\\SeleniumLibrary\\keywords\\waiting.py",
                "_lineno": "261"
            }
        ],
        "_name": "Browser",
        "_type": "LIBRARY",
        "_format": "ROBOT",
        "_scope": "GLOBAL",
        "_namedargs": "true",
        "_generated": "2021-03-19T11:00:30Z",
        "_specversion": "2",
        "_source": "C:\\Program Files\\Autosphere\\Process Studio\\App\\Python\\Lib\\site-packages\\Autosphere\\Browser.py",
        "_lineno": "41"
    }
}