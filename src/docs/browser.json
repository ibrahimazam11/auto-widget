[
  {
    "keyword": "Add Cookie",
    "arguments": "name,value,path=None,domain=None,secure=None,expiry=None",
    "description": "Adds a cookie to your current session. name and value are required, path, domain, secure and expiry are optional. Expiry supports the same formats as the DateTime library or an epoch timestamp. Example: Add Cookie Add Cookie Add Cookie Add Cookie Prior to SeleniumLibrary 3.0 setting expiry did not work."
  },
  {
    "keyword": "Add Location Strategy",
    "arguments": "strategy_name,strategy_keyword,persist=False",
    "description": "Adds a custom location strategy. See Custom locators for information on how to create and use custom strategies. Remove Location Strategy can be used to remove a registered strategy. Location strategies are automatically removed after leaving the current scope by default. Setting persist to a true value (see Boolean arguments) will cause the location strategy to stay registered throughout the life of the test."
  },
  {
    "keyword": "Alert Should Be Present",
    "arguments": "text=,action=ACCEPT,timeout=None",
    "description": "Verifies that an alert is present and by default, accepts it. Fails if no alert is present. If text is a non-empty string, then it is used to verify alert's message. The alert is accepted by default, but that behavior can be controlled by using the action argument same way as with Handle Alert. timeout specifies how long to wait for the alert to appear. If it is not given, the global default timeout is used instead. action and timeout arguments are new in SeleniumLibrary 3.0. In earlier versions, the alert was always accepted and a timeout was hardcoded to one second."
  },
  {
    "keyword": "Alert Should Not Be Present",
    "arguments": "action=ACCEPT,timeout=0",
    "description": "Verifies that no alert is present. If the alert actually exists, the action argument determines how it should be handled. By default, the alert is accepted, but it can be also dismissed or left open the same way as with the Handle Alert keyword. timeout specifies how long to wait for the alert to appear. By default, is not waited for the alert at all, but a custom time can be given if alert may be delayed. See the time format section for information about the syntax. New in SeleniumLibrary 3.0."
  },
  {
    "keyword": "Assign Id To Element",
    "arguments": "locator,id",
    "description": "Assigns a temporary id to the element specified by locator. This is mainly useful if the locator is complicated and/or slow XPath expression and it is needed multiple times. Identifier expires when the page is reloaded. See the Locating elements section for details about the locator syntax. Example: Assign ID to Element Page Should Contain Element"
  },
  {
    "keyword": "Attach Chrome Browser",
    "arguments": "port: int,alias: str = None",
    "description": "Attach to an existing instance of Chrome or Chromium. Requires that the browser was started with the command line option --remote-debugging-port=<port>, where port is any 4-digit number not being used by other applications. That port can then be used to connect using this keyword. Example: Attach Chrome Browser"
  },
  {
    "keyword": "Capture Element Screenshot",
    "arguments": "locator,filename=selenium-element-screenshot-{index}.png",
    "description": "Captures a screenshot from the element identified by locator and embeds it into log file. See Capture Page Screenshot for details about filename argument. See the Locating elements section for details about the locator syntax. An absolute path to the created element screenshot is returned. Support for capturing the screenshot from an element has limited support among browser vendors. Please check the browser vendor driver documentation does the browser support capturing a screenshot from an element. New in SeleniumLibrary 3.3. Support for EMBED is new in SeleniumLibrary 4.2. Examples: Capture Element Screenshot Capture Element Screenshot Capture Element Screenshot"
  },
  {
    "keyword": "Capture Page Screenshot",
    "arguments": "filename=selenium-screenshot-{index}.png",
    "description": "Takes a screenshot of the current page and embeds it into a log file. filename argument specifies the name of the file to write the screenshot into. The directory where screenshots are saved can be set when importing the library or by using the Set Screenshot Directory keyword. If the directory is not configured, screenshots are saved to the same directory where Robot Framework's log file is written. If filename equals to EMBED (case insensitive), then screenshot is embedded as Base64 image to the log.html. In this case file is not created in the filesystem. Starting from SeleniumLibrary 1.8, if filename contains marker {index}, it will be automatically replaced with an unique running index, preventing files to be overwritten. Indices start from 1, and how they are represented can be customized using Python's format string syntax. An absolute path to the created screenshot file is returned or if filename equals to EMBED, word EMBED is returned. Support for EMBED is new in SeleniumLibrary 4.2 Examples: Capture Page Screenshot File Should Exist ${path} = File Should Exist File Should Exist Capture Page Screenshot File Should Exist Capture Page Screenshot File Should Exist Capture Page Screenshot File Should Exist Capture Page Screenshot File Should Not Exist"
  },
  {
    "keyword": "Checkbox Should Be Selected",
    "arguments": "locator",
    "description": "Verifies checkbox locator is selected/checked. See the Locating elements section for details about the locator syntax."
  },
  {
    "keyword": "Checkbox Should Not Be Selected",
    "arguments": "locator",
    "description": "Verifies checkbox locator is not selected/checked. See the Locating elements section for details about the locator syntax."
  },
  {
    "keyword": "Choose File",
    "arguments": "locator,file_path",
    "description": "Inputs the file_path into the file input field locator. This keyword is most often used to input files into upload forms. The keyword does not check file_path is the file or folder available on the machine where tests are executed. If the file_path points at a file and when using Selenium Grid, Selenium will magically, transfer the file from the machine where the tests are executed to the Selenium Grid node where the browser is running. Then Selenium will send the file path, from the nodes file system, to the browser. That file_path is not checked, is new in SeleniumLibrary 4.0. Example: Choose File"
  },
  {
    "keyword": "Clear Element Text",
    "arguments": "locator",
    "description": "Clears the value of the text-input-element identified by locator. See the Locating elements section for details about the locator syntax."
  },
  {
    "keyword": "Click Button",
    "arguments": "locator,modifier=False",
    "description": "Clicks the button identified by locator. See the Locating elements section for details about the locator syntax. When using the default locator strategy, buttons are searched using id, name, and value. See the Click Element keyword for details about the modifier argument. The modifier argument is new in SeleniumLibrary 3.3"
  },
  {
    "keyword": "Click Button When Visible",
    "arguments": "locator: str,modifier: str = None",
    "description": "Click button identified by locator, once it becomes visible. locator element locator modifier press given keys while clicking the element, e.g. CTRL Example: Click Button When Visible"
  },
  {
    "keyword": "Click Element",
    "arguments": "locator,modifier=False,action_chain=False",
    "description": "Click the element identified by locator. See the Locating elements section for details about the locator syntax. The modifier argument can be used to pass Selenium Keys when clicking the element. The + can be used as a separator for different Selenium Keys. The CTRL is internally translated to the CONTROL key. The modifier is space and case insensitive, example \"alt\" and \" aLt \" are supported formats to ALT key . If modifier does not match to Selenium Keys, keyword fails. If action_chain argument is true, see Boolean arguments for more details on how to set boolean argument, then keyword uses ActionChain based click instead of the <web_element>.click() function. If both action_chain and modifier are defined, the click will be performed using modifier and action_chain will be ignored. Example: Click Element Click Element Click Element Click Element The modifier argument is new in SeleniumLibrary 3.2 The action_chain argument is new in SeleniumLibrary 4.1"
  },
  {
    "keyword": "Click Element At Coordinates",
    "arguments": "locator,xoffset,yoffset",
    "description": "Click the element locator at xoffset/yoffset. The Cursor is moved and the center of the element and x/y coordinates are calculated from that point. See the Locating elements section for details about the locator syntax."
  },
  {
    "keyword": "Click Element If Visible",
    "arguments": "locator: str",
    "description": "Click element if it is visible locator element locator Example: Click Element If Visible"
  },
  {
    "keyword": "Click Element When Visible",
    "arguments": "locator: str,modifier: str = None,action_chain: bool = False",
    "description": "Click element identified by locator, once it becomes visible. locator element locator modifier press given keys while clicking the element, e.g. CTRL action_chain store action in Selenium ActionChain queue Example: Click Element When Visible Click Element When Visible Click Element When Visible"
  },
  {
    "keyword": "Click Image",
    "arguments": "locator,modifier=False",
    "description": "Clicks an image identified by locator. See the Locating elements section for details about the locator syntax. When using the default locator strategy, images are searched using id, name, src and alt. See the Click Element keyword for details about the modifier argument. The modifier argument is new in SeleniumLibrary 3.3"
  },
  {
    "keyword": "Click Link",
    "arguments": "locator,modifier=False",
    "description": "Clicks a link identified by locator. See the Locating elements section for details about the locator syntax. When using the default locator strategy, links are searched using id, name, href and the link text. See the Click Element keyword for details about the modifier argument. The modifier argument is new in SeleniumLibrary 3.3"
  },
  {
    "keyword": "Close All Browsers",
    "arguments": "",
    "description": "Closes all open browsers and resets the browser cache. After this keyword, new indexes returned from Open Browser keyword are reset to 1. This keyword should be used in test or suite teardown to make sure all browsers are closed."
  },
  {
    "keyword": "Close Browser",
    "arguments": "",
    "description": "Closes the current browser."
  },
  {
    "keyword": "Close Window",
    "arguments": "",
    "description": "Closes currently opened and selected browser window/tab."
  },
  {
    "keyword": "Cover Element",
    "arguments": "locator",
    "description": "Will cover elements identified by locator with a blue div without breaking page layout. See the Locating elements section for details about the locator syntax. New in SeleniumLibrary 3.3.0 Example: |Cover Element | css:div#container |"
  },
  {
    "keyword": "Create Webdriver",
    "arguments": "driver_name,alias=None,kwargs={},**init_kwargs",
    "description": "Creates an instance of Selenium WebDriver. Like Open Browser, but allows passing arguments to the created WebDriver instance directly. This keyword should only be used if the functionality provided by Open Browser is not adequate. driver_name must be a WebDriver implementation name like Firefox, Chrome, Ie, Opera, Safari, PhantomJS, or Remote. The initialized WebDriver can be configured either with a Python dictionary kwargs or by using keyword arguments **init_kwargs. These arguments are passed directly to WebDriver without any processing. See Selenium API documentation for details about the supported arguments. Examples: # Use proxy with Firefox ${proxy}= ${proxy.http_proxy}= Create Webdriver # Use proxy with PhantomJS ${service args}= Create Webdriver Returns the index of this browser instance which can be used later to switch back to it. Index starts from 1 and is reset back to it when Close All Browsers keyword is used. See Switch Browser for an example."
  },
  {
    "keyword": "Current Frame Should Contain",
    "arguments": "text,loglevel=TRACE",
    "description": "Verifies that the current frame contains text. See Page Should Contain for an explanation about the loglevel argument. Prior to SeleniumLibrary 3.0 this keyword was named Current Frame Contains."
  },
  {
    "keyword": "Current Frame Should Not Contain",
    "arguments": "text,loglevel=TRACE",
    "description": "Verifies that the current frame does not contain text. See Page Should Contain for an explanation about the loglevel argument."
  },
  {
    "keyword": "Delete All Cookies",
    "arguments": "",
    "description": "Deletes all cookies."
  },
  {
    "keyword": "Delete Cookie",
    "arguments": "name",
    "description": "Deletes the cookie matching name. If the cookie is not found, nothing happens."
  },
  {
    "keyword": "Does Alert Contain",
    "arguments": "text: str = None,timeout: float = None",
    "description": "Does alert contain text. text check if alert includes text, will raise ValueError is text does not exist Example: ${res}"
  },
  {
    "keyword": "Does Alert Not Contain",
    "arguments": "text: str = None,timeout: float = None",
    "description": "Does alert not contain text. text check that alert does not include text, will raise ValueError if text does exist Example: ${res}"
  },
  {
    "keyword": "Does Element Contain",
    "arguments": "locator: str,expected: str,ignore_case: bool = False",
    "description": "Does element contain expected text locator element locator expected expected element text ignore_case should check be case insensitive, default False Example: ${res}"
  },
  {
    "keyword": "Does Frame Contain",
    "arguments": "locator: str,text: str",
    "description": "Does frame contain expected text locator locator of the frame to check text does frame contain this text Example: ${res}"
  },
  {
    "keyword": "Does Location Contain",
    "arguments": "expected: str",
    "description": "Does current URL contain expected expected URL should contain this Example: Open Available Browser ${res}"
  },
  {
    "keyword": "Does Page Contain",
    "arguments": "text: str",
    "description": "Does page contain expected text text page should contain this Example: Open Available Browser ${res}"
  },
  {
    "keyword": "Does Page Contain Button",
    "arguments": "locator: str",
    "description": "Does page contain expected button locator element locator Example: ${res}"
  },
  {
    "keyword": "Does Page Contain Checkbox",
    "arguments": "locator: str",
    "description": "Does page contain expected checkbox locator element locator Example: ${res}"
  },
  {
    "keyword": "Does Page Contain Element",
    "arguments": "locator: str,count: int = None",
    "description": "Does page contain expected element locator element locator count how many times element is expected to appear on page by default one or more Example: ${res} ${res}"
  },
  {
    "keyword": "Does Page Contain Image",
    "arguments": "locator: str",
    "description": "Does page contain expected image locator element locator Example: Open Available Browser ${res}"
  },
  {
    "keyword": "Does Page Contain Link",
    "arguments": "locator: str",
    "description": "Does page contain expected link locator element locator Example: ${res}"
  },
  {
    "keyword": "Does Page Contain List",
    "arguments": "locator: str",
    "description": "Does page contain expected list locator element locator Example: ${res}"
  },
  {
    "keyword": "Does Page Contain Radio Button",
    "arguments": "locator: str",
    "description": "Does page contain expected radio button locator element locator Example: ${res}"
  },
  {
    "keyword": "Does Page Contain Textfield",
    "arguments": "locator: str",
    "description": "Does page contain expected textfield locator element locator Example: ${res}"
  },
  {
    "keyword": "Does Table Cell Contain",
    "arguments": "locator: str,row: int,column: int,expected: str",
    "description": "Does table cell contain expected text locator element locator for the table row row index starting from 1 (beginning) or -1 (from the end) column column index starting from 1 (beginning) or -1 (from the end) expected expected text in table row Example: ${res}"
  },
  {
    "keyword": "Does Table Column Contain",
    "arguments": "locator: str,column: int,expected: str",
    "description": "Does table column contain expected text locator element locator for the table column column index starting from 1 (beginning) or -1 (from the end) expected expected text in table column Example: ${res}"
  },
  {
    "keyword": "Does Table Contain",
    "arguments": "locator: str,expected: str",
    "description": "Does table contain expected text locator element locator expected expected text in table Example: ${res}"
  },
  {
    "keyword": "Does Table Footer Contain",
    "arguments": "locator: str,expected: str",
    "description": "Does table footer contain expected text locator element locator for the table expected expected text in table footer Example: ${res}"
  },
  {
    "keyword": "Does Table Header Contain",
    "arguments": "locator: str,expected: str",
    "description": "Does table header contain expected text locator element locator for the table expected expected text in table header Example: ${res}"
  },
  {
    "keyword": "Does Table Row Contain",
    "arguments": "locator: str,row: int,expected: str",
    "description": "Does table row contain expected text locator element locator for the table row row index starting from 1 (beginning) or -1 (from the end) expected expected text in table row Example: ${res}"
  },
  {
    "keyword": "Does Textarea Contain",
    "arguments": "locator: str,expected: str",
    "description": "Does textarea contain expected text locator element locator expected expected text in textarea Example: ${res}"
  },
  {
    "keyword": "Does Textfield Contain",
    "arguments": "locator: str,expected: str",
    "description": "Does textfield contain expected text locator element locator expected expected text in textfield Example: ${res}"
  },
  {
    "keyword": "Double Click Element",
    "arguments": "locator",
    "description": "Double clicks the element identified by locator. See the Locating elements section for details about the locator syntax."
  },
  {
    "keyword": "Drag And Drop",
    "arguments": "locator,target",
    "description": "Drags the element identified by locator into the target element. The locator argument is the locator of the dragged element and the target is the locator of the target. See the Locating elements section for details about the locator syntax. Example: Drag And Drop"
  },
  {
    "keyword": "Drag And Drop By Offset",
    "arguments": "locator,xoffset,yoffset",
    "description": "Drags the element identified with locator by xoffset/yoffset. See the Locating elements section for details about the locator syntax. The element will be moved by xoffset and yoffset, each of which is a negative or positive number specifying the offset. Example: Drag And Drop By Offset"
  },
  {
    "keyword": "Element Attribute Value Should Be",
    "arguments": "locator,attribute,expected,message=None",
    "description": "Verifies element identified by locator contains expected attribute value. See the Locating elements section for details about the locator syntax. Example: Element Attribute Value Should Be | css:img | href | value New in SeleniumLibrary 3.2."
  },
  {
    "keyword": "Element Should Be Disabled",
    "arguments": "locator",
    "description": "Verifies that element identified by locator is disabled. This keyword considers also elements that are read-only to be disabled. See the Locating elements section for details about the locator syntax."
  },
  {
    "keyword": "Element Should Be Enabled",
    "arguments": "locator",
    "description": "Verifies that element identified by locator is enabled. This keyword considers also elements that are read-only to be disabled. See the Locating elements section for details about the locator syntax."
  },
  {
    "keyword": "Element Should Be Focused",
    "arguments": "locator",
    "description": "Verifies that element identified by locator is focused. See the Locating elements section for details about the locator syntax. New in SeleniumLibrary 3.0."
  },
  {
    "keyword": "Element Should Be Visible",
    "arguments": "locator,message=None",
    "description": "Verifies that the element identified by locator is visible. Herein, visible means that the element is logically visible, not optically visible in the current browser viewport. For example, an element that carries display:none is not logically visible, so using this keyword on that element would fail. See the Locating elements section for details about the locator syntax. The message argument can be used to override the default error message."
  },
  {
    "keyword": "Element Should Contain",
    "arguments": "locator,expected,message=None,ignore_case=False",
    "description": "Verifies that element locator contains text expected. See the Locating elements section for details about the locator syntax. The message argument can be used to override the default error message. The ignore_case argument can be set to True to compare case insensitive, default is False. New in SeleniumLibrary 3.1. ignore_case argument is new in SeleniumLibrary 3.1. Use Element Text Should Be if you want to match the exact text, not a substring."
  },
  {
    "keyword": "Element Should Not Be Visible",
    "arguments": "locator,message=None",
    "description": "Verifies that the element identified by locator is NOT visible. Passes if the element does not exists. See Element Should Be Visible for more information about visibility and supported arguments."
  },
  {
    "keyword": "Element Should Not Contain",
    "arguments": "locator,expected,message=None,ignore_case=False",
    "description": "Verifies that element locator does not contain text expected. See the Locating elements section for details about the locator syntax. The message argument can be used to override the default error message. The ignore_case argument can be set to True to compare case insensitive, default is False. ignore_case argument new in SeleniumLibrary 3.1."
  },
  {
    "keyword": "Element Text Should Be",
    "arguments": "locator,expected,message=None,ignore_case=False",
    "description": "Verifies that element locator contains exact the text expected. See the Locating elements section for details about the locator syntax. The message argument can be used to override the default error message. The ignore_case argument can be set to True to compare case insensitive, default is False. ignore_case argument is new in SeleniumLibrary 3.1. Use Element Should Contain if a substring match is desired."
  },
  {
    "keyword": "Element Text Should Not Be",
    "arguments": "locator,not_expected,message=None,ignore_case=False",
    "description": "Verifies that element locator does not contain exact the text not_expected. See the Locating elements section for details about the locator syntax. The message argument can be used to override the default error message. The ignore_case argument can be set to True to compare case insensitive, default is False. New in SeleniumLibrary 3.1.1"
  },
  {
    "keyword": "Execute Async Javascript",
    "arguments": "*code",
    "description": "Executes asynchronous JavaScript code with possible arguments. Similar to Execute Javascript except that scripts executed with this keyword must explicitly signal they are finished by invoking the provided callback. This callback is always injected into the executed function as the last argument. Scripts must complete within the script timeout or this keyword will fail. See the Timeout section for more information. Starting from SeleniumLibrary 3.2 it is possible to provide JavaScript arguments as part of code argument. See Execute Javascript for more details. Examples: Execute Async JavaScript Execute Async JavaScript ${result} = ... ... ... Should Be Equal"
  },
  {
    "keyword": "Execute Javascript",
    "arguments": "*code",
    "description": "Executes the given JavaScript code with possible arguments. code may be divided into multiple cells in the test data and code may contain multiple lines of code and arguments. In that case, the JavaScript code parts are concatenated together without adding spaces and optional arguments are separated from code. If code is a path to an existing file, the JavaScript to execute will be read from that file. Forward slashes work as a path separator on all operating systems. The JavaScript executes in the context of the currently selected frame or window as the body of an anonymous function. Use window to refer to the window of your application and document to refer to the document object of the current frame or window, e.g. document.getElementById('example'). This keyword returns whatever the executed JavaScript code returns. Return values are converted to the appropriate Python types. Starting from SeleniumLibrary 3.2 it is possible to provide JavaScript arguments as part of code argument. The JavaScript code and arguments must be separated with JAVASCRIPT and ARGUMENTS markers and must be used exactly with this format. If the Javascript code is first, then the JAVASCRIPT marker is optional. The order of JAVASCRIPT and ARGUMENTS markers can be swapped, but if ARGUMENTS is the first marker, then JAVASCRIPT marker is mandatory. It is only allowed to use JAVASCRIPT and ARGUMENTS markers only one time in the code argument. Examples: Execute JavaScript Execute JavaScript Execute JavaScript Execute JavaScript"
  },
  {
    "keyword": "Frame Should Contain",
    "arguments": "locator,text,loglevel=TRACE",
    "description": "Verifies that frame identified by locator contains text. See the Locating elements section for details about the locator syntax. See Page Should Contain for an explanation about the loglevel argument."
  },
  {
    "keyword": "Get All Links",
    "arguments": "",
    "description": "Returns a list containing ids of all links found in current page. If a link has no id, an empty string will be in the list instead."
  },
  {
    "keyword": "Get Browser Aliases",
    "arguments": "",
    "description": "Returns aliases of all active browser that has an alias as NormalizedDict. The dictionary contains the aliases as keys and the index as value. This can be accessed as dictionary ${aliases.key} or as list @{aliases}[0]. Example: Open Browser Open Browser &{aliases} Log FOR END See Switch Browser for more information and examples. New in SeleniumLibrary 4.0"
  },
  {
    "keyword": "Get Browser Capabilities",
    "arguments": "",
    "description": "Get dictionary of browser properties Example: ${caps}="
  },
  {
    "keyword": "Get Browser Ids",
    "arguments": "",
    "description": "Returns index of all active browser as list. Example: @{browser_ids}= FOR END See Switch Browser for more information and examples. New in SeleniumLibrary 4.0"
  },
  {
    "keyword": "Get Cookie",
    "arguments": "name",
    "description": "Returns information of cookie with name as an object. If no cookie is found with name, keyword fails. The cookie object contains details about the cookie. Attributes available in the object are documented in the table below. Attribute name value path domain secure httpOnly expiry extra See the WebDriver specification for details about the cookie information. Notice that expiry is specified as a datetime object, not as seconds since Unix Epoch like WebDriver natively does. In some cases, example when running a browser in the cloud, it is possible that the cookie contains other attributes than is defined in the WebDriver specification. These other attributes are available in an extra attribute in the cookie object and it contains a dictionary of the other attributes. The extra attribute is new in SeleniumLibrary 4.0. Example: Add Cookie ${cookie} = Should Be Equal Should Be Equal Should Be True New in SeleniumLibrary 3.0."
  },
  {
    "keyword": "Get Cookies",
    "arguments": "as_dict=False",
    "description": "Returns all cookies of the current page. If as_dict argument evaluates as false, see Boolean arguments for more details, then cookie information is returned as a single string in format name1=value1; name2=value2; name3=value3. When as_dict argument evaluates as true, cookie information is returned as Robot Framework dictionary format. The string format can be used, for example, for logging purposes or in headers when sending HTTP requests. The dictionary format is helpful when the result can be passed to requests library's Create Session keyword's optional cookies parameter. The ` as_dict` argument is new in SeleniumLibrary 3.3"
  },
  {
    "keyword": "Get Element Attribute",
    "arguments": "locator,attribute",
    "description": "Returns the value of attribute from the element locator. See the Locating elements section for details about the locator syntax. Example: ${id}= Passing attribute name as part of the locator was removed in SeleniumLibrary 3.2. The explicit attribute argument should be used instead."
  },
  {
    "keyword": "Get Element Count",
    "arguments": "locator",
    "description": "Returns the number of elements matching locator. If you wish to assert the number of matching elements, use Page Should Contain Element with limit argument. Keyword will always return an integer. Example: ${count} = Should Be True New in SeleniumLibrary 3.0."
  },
  {
    "keyword": "Get Element Size",
    "arguments": "locator",
    "description": "Returns width and height of the element identified by locator. See the Locating elements section for details about the locator syntax. Both width and height are returned as integers. Example: ${width}"
  },
  {
    "keyword": "Get Element Status",
    "arguments": "locator: str",
    "description": "Return dictionary containing element status of: visible enabled disabled focused locator element locator Example: &{res} Log Log Log Log"
  },
  {
    "keyword": "Get Horizontal Position",
    "arguments": "locator",
    "description": "Returns the horizontal position of the element identified by locator. See the Locating elements section for details about the locator syntax. The position is returned in pixels off the left side of the page, as an integer. See also Get Vertical Position."
  },
  {
    "keyword": "Get List Items",
    "arguments": "locator,values=False",
    "description": "Returns all labels or values of selection list locator. See the Locating elements section for details about the locator syntax. Returns visible labels by default, but values can be returned by setting the values argument to a true value (see Boolean arguments). Example: ${labels} = ${values} = Support to return values is new in SeleniumLibrary 3.0."
  },
  {
    "keyword": "Get Location",
    "arguments": "",
    "description": "Returns the current browser window URL."
  },
  {
    "keyword": "Get Locations",
    "arguments": "browser=CURRENT",
    "description": "Returns and logs URLs of all windows of the selected browser. Browser Scope: The browser argument specifies the browser that shall return its windows information. browser can be index_or_alias like in Switch Browser. If browser is CURRENT (default, case-insensitive) the currently active browser is selected. If browser is ALL (case-insensitive) the window information of all windows of all opened browsers are returned."
  },
  {
    "keyword": "Get Selected List Label",
    "arguments": "locator",
    "description": "Returns the label of selected option from selection list locator. If there are multiple selected options, the label of the first option is returned. See the Locating elements section for details about the locator syntax."
  },
  {
    "keyword": "Get Selected List Labels",
    "arguments": "locator",
    "description": "Returns labels of selected options from selection list locator. Starting from SeleniumLibrary 3.0, returns an empty list if there are no selections. In earlier versions, this caused an error. See the Locating elements section for details about the locator syntax."
  },
  {
    "keyword": "Get Selected List Value",
    "arguments": "locator",
    "description": "Returns the value of selected option from selection list locator. If there are multiple selected options, the value of the first option is returned. See the Locating elements section for details about the locator syntax."
  },
  {
    "keyword": "Get Selected List Values",
    "arguments": "locator",
    "description": "Returns values of selected options from selection list locator. Starting from SeleniumLibrary 3.0, returns an empty list if there are no selections. In earlier versions, this caused an error. See the Locating elements section for details about the locator syntax."
  },
  {
    "keyword": "Get Selenium Implicit Wait",
    "arguments": "",
    "description": "Gets the implicit wait value used by Selenium. The value is returned as a human-readable string like 1 second. See the Implicit wait section above for more information."
  },
  {
    "keyword": "Get Selenium Speed",
    "arguments": "",
    "description": "Gets the delay that is waited after each Selenium command. The value is returned as a human-readable string like 1 second. See the Selenium Speed section above for more information."
  },
  {
    "keyword": "Get Selenium Timeout",
    "arguments": "",
    "description": "Gets the timeout that is used by various keywords. The value is returned as a human-readable string like 1 second. See the Timeout section above for more information."
  },
  {
    "keyword": "Get Session Id",
    "arguments": "",
    "description": "Returns the currently active browser session id. New in SeleniumLibrary 3.2"
  },
  {
    "keyword": "Get Source",
    "arguments": "",
    "description": "Returns the entire HTML source of the current page or frame."
  },
  {
    "keyword": "Get Table Cell",
    "arguments": "locator,row,column,loglevel=TRACE",
    "description": "Returns contents of a table cell. The table is located using the locator argument and its cell found using row and column. See the Locating elements section for details about the locator syntax. Both row and column indexes start from 1, and header and footer rows are included in the count. It is possible to refer to rows and columns from the end by using negative indexes so that -1 is the last row/column, -2 is the second last, and so on. All <th> and <td> elements anywhere in the table are considered to be cells. See Page Should Contain for an explanation about the loglevel argument."
  },
  {
    "keyword": "Get Testability Status",
    "arguments": "",
    "description": "Get SeleniumTestability plugin status"
  },
  {
    "keyword": "Get Text",
    "arguments": "locator",
    "description": "Returns the text value of the element identified by locator. See the Locating elements section for details about the locator syntax."
  },
  {
    "keyword": "Get Title",
    "arguments": "",
    "description": "Returns the title of the current page."
  },
  {
    "keyword": "Get Value",
    "arguments": "locator",
    "description": "Returns the value attribute of the element identified by locator. See the Locating elements section for details about the locator syntax."
  },
  {
    "keyword": "Get Vertical Position",
    "arguments": "locator",
    "description": "Returns the vertical position of the element identified by locator. See the Locating elements section for details about the locator syntax. The position is returned in pixels off the top of the page, as an integer. See also Get Horizontal Position."
  },
  {
    "keyword": "Get WebElement",
    "arguments": "locator",
    "description": "Returns the first WebElement matching the given locator. See the Locating elements section for details about the locator syntax."
  },
  {
    "keyword": "Get WebElements",
    "arguments": "locator",
    "description": "Returns a list of WebElement objects matching the locator. See the Locating elements section for details about the locator syntax. Starting from SeleniumLibrary 3.0, the keyword returns an empty list if there are no matching elements. In previous releases, the keyword failed in this case."
  },
  {
    "keyword": "Get Window Handles",
    "arguments": "browser=CURRENT",
    "description": "Returns all child window handles of the selected browser as a list. Can be used as a list of windows to exclude with Select Window. How to select the browser scope of this keyword, see Get Locations. Prior to SeleniumLibrary 3.0, this keyword was named List Windows."
  },
  {
    "keyword": "Get Window Identifiers",
    "arguments": "browser=CURRENT",
    "description": "Returns and logs id attributes of all windows of the selected browser. How to select the browser scope of this keyword, see Get Locations."
  },
  {
    "keyword": "Get Window Names",
    "arguments": "browser=CURRENT",
    "description": "Returns and logs names of all windows of the selected browser. How to select the browser scope of this keyword, see Get Locations."
  },
  {
    "keyword": "Get Window Position",
    "arguments": "",
    "description": "Returns current window position. The position is relative to the top left corner of the screen. Returned values are integers. See also Set Window Position. Example: ${x}"
  },
  {
    "keyword": "Get Window Size",
    "arguments": "inner=False",
    "description": "Returns current window width and height as integers. See also Set Window Size. If inner parameter is set to True, keyword returns HTML DOM window.innerWidth and window.innerHeight properties. See Boolean arguments for more details on how to set boolean arguments. The inner is new in SeleniumLibrary 4.0. Example: ${width} ${width}"
  },
  {
    "keyword": "Get Window Titles",
    "arguments": "browser=CURRENT",
    "description": "Returns and logs titles of all windows of the selected browser. How to select the browser scope of this keyword, see Get Locations."
  },
  {
    "keyword": "Go Back",
    "arguments": "",
    "description": "Simulates the user clicking the back button on their browser."
  },
  {
    "keyword": "Go To",
    "arguments": "url",
    "description": "Navigates the current browser window to the provided url."
  },
  {
    "keyword": "Handle Alert",
    "arguments": "action=ACCEPT,timeout=None",
    "description": "Handles the current alert and returns its message. By default, the alert is accepted, but this can be controlled with the action argument that supports the following case-insensitive values: ACCEPT: Accept the alert i.e. press Ok. Default. DISMISS: Dismiss the alert i.e. press Cancel. LEAVE: Leave the alert open. The timeout argument specifies how long to wait for the alert to appear. If it is not given, the global default timeout is used instead. Examples: Handle Alert Handle Alert Handle Alert Handle Alert ${message} = ${message} = New in SeleniumLibrary 3.0."
  },
  {
    "keyword": "Input Password",
    "arguments": "locator,password,clear=True",
    "description": "Types the given password into the text field identified by locator. See the Locating elements section for details about the locator syntax. See Input Text for clear argument details. Difference compared to Input Text is that this keyword does not log the given password on the INFO level. Notice that if you use the keyword like Input Password the password is shown as a normal keyword argument. A way to avoid that is using variables like Input Password Please notice that Robot Framework logs all arguments using the TRACE level and tests must not be executed using level below DEBUG if the password should not be logged in any format. The clear argument is new in SeleniumLibrary 4.0. Hiding password logging from Selenium logs is new in SeleniumLibrary 4.2."
  },
  {
    "keyword": "Input Text",
    "arguments": "locator,text,clear=True",
    "description": "Types the given text into the text field identified by locator. When clear is true, the input element is cleared before the text is typed into the element. When false, the previous text is not cleared from the element. Use Input Password if you do not want the given text to be logged. If Selenium Grid is used and the text argument points to a file in the file system, then this keyword prevents the Selenium to transfer the file to the Selenium Grid hub. Instead, this keyword will send the text string as is to the element. If a file should be transferred to the hub and upload should be performed, please use Choose File keyword. See the Locating elements section for details about the locator syntax. See the Boolean arguments section how Boolean values are handled. Disabling the file upload the Selenium Grid node and the clear argument are new in SeleniumLibrary 4.0"
  },
  {
    "keyword": "Input Text Into Alert",
    "arguments": "text,action=ACCEPT,timeout=None",
    "description": "Types the given text into an input field in an alert. The alert is accepted by default, but that behavior can be controlled by using the action argument same way as with Handle Alert. timeout specifies how long to wait for the alert to appear. If it is not given, the global default timeout is used instead. New in SeleniumLibrary 3.0."
  },
  {
    "keyword": "Input Text When Element Is Visible",
    "arguments": "locator: str,text: str",
    "description": "Input text into locator after it has become visible. locator element locator text insert text to locator Example: Input Text When Element Is Visible"
  },
  {
    "keyword": "Is Alert Present",
    "arguments": "text: str = None,action: str = ACCEPT",
    "description": "Is alert box present, which can be identified with text and action can also be done which by default is ACCEPT. Other possible actions are DISMISS and LEAVE. text check if alert text is matching to this, if None will check if alert is present at all action possible action if alert is present, default ACCEPT Example: ${res}"
  },
  {
    "keyword": "Is Checkbox Selected",
    "arguments": "locator: str",
    "description": "Is checkbox selected locator element locator Example: ${res}"
  },
  {
    "keyword": "Is Element Attribute Equal To",
    "arguments": "locator: str,attribute: str,expected: str",
    "description": "Is element attribute equal to expected value locator element locator attribute element attribute to check for expected is attribute value equal to this Example: ${res}"
  },
  {
    "keyword": "Is Element Disabled",
    "arguments": "locator: str",
    "description": "Is element disabled locator element locator Example: ${res}"
  },
  {
    "keyword": "Is Element Enabled",
    "arguments": "locator: str",
    "description": "Is element enabled locator element locator Example: ${res}"
  },
  {
    "keyword": "Is Element Focused",
    "arguments": "locator: str",
    "description": "Is element focused locator element locator Example: ${res}"
  },
  {
    "keyword": "Is Element Text",
    "arguments": "locator: str,expected: str,ignore_case: bool = False",
    "description": "Is element text expected locator element locator expected expected element text ignore_case should check be case insensitive, default False Example: ${res} ${res}"
  },
  {
    "keyword": "Is Element Visible",
    "arguments": "locator: str",
    "description": "Is element visible locator element locator Example: ${res}"
  },
  {
    "keyword": "Is List Selected",
    "arguments": "locator: str",
    "description": "Is any option selected in the locator element locator Example: ${res}"
  },
  {
    "keyword": "Is List Selection",
    "arguments": "locator: str,*expected: str",
    "description": "Is list selected with expected values locator element locator expected expected selected options Example: ${res}"
  },
  {
    "keyword": "Is Location",
    "arguments": "url: str",
    "description": "Is current URL expected url url expected current URL Example: Open Available Browser ${res}"
  },
  {
    "keyword": "Is Radio Button Selected",
    "arguments": "group_name: str",
    "description": "Is any radio button selected in the button group group_name radio button group name Example: ${res}"
  },
  {
    "keyword": "Is Radio Button Set To",
    "arguments": "group_name: str,value: str",
    "description": "Is radio button group set to expected value group_name radio button group name value expected value Example: ${res}"
  },
  {
    "keyword": "Is Textarea Value",
    "arguments": "locator: str,expected: str",
    "description": "Is textarea matching expected value locator element locator expected expected textarea value Example: ${res}"
  },
  {
    "keyword": "Is Textfield Value",
    "arguments": "locator: str,expected: str",
    "description": "Is textfield value expected locator element locator expected expected textfield value Example: ${res}"
  },
  {
    "keyword": "Is Title",
    "arguments": "title: str",
    "description": "Is page title expected title expected title value Example: ${res}"
  },
  {
    "keyword": "List Selection Should Be",
    "arguments": "locator,*expected",
    "description": "Verifies selection list locator has expected options selected. It is possible to give expected options both as visible labels and as values. Starting from SeleniumLibrary 3.0, mixing labels and values is not possible. Order of the selected options is not validated. If no expected options are given, validates that the list has no selections. A more explicit alternative is using List Should Have No Selections. See the Locating elements section for details about the locator syntax. Examples: List Selection Should Be List Selection Should Be"
  },
  {
    "keyword": "List Should Have No Selections",
    "arguments": "locator",
    "description": "Verifies selection list locator has no options selected. See the Locating elements section for details about the locator syntax."
  },
  {
    "keyword": "Location Should Be",
    "arguments": "url,message=None",
    "description": "Verifies that the current URL is exactly url. The url argument contains the exact url that should exist in browser. The message argument can be used to override the default error message. message argument is new in SeleniumLibrary 3.2.0."
  },
  {
    "keyword": "Location Should Contain",
    "arguments": "expected,message=None",
    "description": "Verifies that the current URL contains expected. The expected argument contains the expected value in url. The message argument can be used to override the default error message. message argument is new in SeleniumLibrary 3.2.0."
  },
  {
    "keyword": "Locator Should Match X Times",
    "arguments": "locator,x,message=None,loglevel=TRACE",
    "description": "DEPRECATED in SeleniumLibrary 4.0., use Page Should Contain Element with limit argument instead."
  },
  {
    "keyword": "Log Location",
    "arguments": "",
    "description": "Logs and returns the current browser window URL."
  },
  {
    "keyword": "Log Source",
    "arguments": "loglevel=INFO",
    "description": "Logs and returns the HTML source of the current page or frame. The loglevel argument defines the used log level. Valid log levels are WARN, INFO (default), DEBUG, TRACE and NONE (no logging)."
  },
  {
    "keyword": "Log Title",
    "arguments": "",
    "description": "Logs and returns the title of the current page."
  },
  {
    "keyword": "Maximize Browser Window",
    "arguments": "",
    "description": "Maximizes current browser window."
  },
  {
    "keyword": "Mouse Down",
    "arguments": "locator",
    "description": "Simulates pressing the left mouse button on the element locator. See the Locating elements section for details about the locator syntax. The element is pressed without releasing the mouse button. See also the more specific keywords Mouse Down On Image and Mouse Down On Link."
  },
  {
    "keyword": "Mouse Down On Image",
    "arguments": "locator",
    "description": "Simulates a mouse down event on an image identified by locator. See the Locating elements section for details about the locator syntax. When using the default locator strategy, images are searched using id, name, src and alt."
  },
  {
    "keyword": "Mouse Down On Link",
    "arguments": "locator",
    "description": "Simulates a mouse down event on a link identified by locator. See the Locating elements section for details about the locator syntax. When using the default locator strategy, links are searched using id, name, href and the link text."
  },
  {
    "keyword": "Mouse Out",
    "arguments": "locator",
    "description": "Simulates moving the mouse away from the element locator. See the Locating elements section for details about the locator syntax."
  },
  {
    "keyword": "Mouse Over",
    "arguments": "locator",
    "description": "Simulates hovering the mouse over the element locator. See the Locating elements section for details about the locator syntax."
  },
  {
    "keyword": "Mouse Up",
    "arguments": "locator",
    "description": "Simulates releasing the left mouse button on the element locator. See the Locating elements section for details about the locator syntax."
  },
  {
    "keyword": "Open Available Browser",
    "arguments": "url: str,use_profile: bool = False,headless: bool = None,maximized: bool = False,browser_selection: typing.Any = AUTO,alias: str = None,profile_name: str = None,profile_path: str = None,preferences: dict = None,proxy: str = None",
    "description": "Opens the first available browser in the system in preferred order, or the given browser (browser_selection). url URL to open use_profile Set browser profile, default False (Chrome/Chromium only) headless Run in headless mode, default False maximized Run window maximized, default False browser_selection browser name, default AUTOMATIC_BROWSER_SELECTION alias Custom name for browser profile_name Name of profile (if profile enabled) profile_path Path to profiles (if profile enabled) preferences Profile preferences (Chrome/Chromium only) proxy Proxy server address (Chrome only) Returns an index of the webdriver session. Process of opening a browser 1. Get the order of browsers 2. Loop the list of preferred browsers a. Set the webdriver options for the browser b. Create the webdriver using existing installation c. (If step b. failed) Download and install webdriver, try again d. (If step c. failed) Try starting webdriver in headless mode 3. Open the URL Returns index or custom alias for the browser instance. Raises BrowserNotFoundError if unable to open the browser. For information about Safari webdriver setup, see https://developer.apple.com/documentation/webkit/testing_with_webdriver_in_safari Example: ${idx1} ${idx2} Open Available Browser"
  },
  {
    "keyword": "Open Browser",
    "arguments": "url=None,browser=firefox,alias=None,remote_url=False,desired_capabilities=None,ff_profile_dir=None,options=None,service_log_path=None,executable_path=None",
    "description": "Opens a new browser instance to the optional url. The browser argument specifies which browser to use. The supported browsers are listed in the table below. The browser names are case-insensitive and some browsers have multiple supported names. Browser Firefox Google Chrome Headless Firefox Headless Chrome Internet Explorer Edge Safari Opera Android Iphone PhantomJS HTMLUnit HTMLUnit with Javascript To be able to actually use one of these browsers, you need to have a matching Selenium browser driver available. See the project documentation for more details. Headless Firefox and Headless Chrome are new additions in SeleniumLibrary 3.1.0 and require Selenium 3.8.0 or newer. After opening the browser, it is possible to use optional url to navigate the browser to the desired address. Optional alias is an alias given for this browser instance and it can be used for switching between browsers. When same alias is given with two Open Browser keywords, the first keyword will open a new browser, but the second one will switch to the already opened browser and will not open a new browser. The alias definition overrules browser definition. When same alias is used but a different browser is defined, then switch to a browser with same alias is done and new browser is not opened. An alternative approach for switching is using an index returned by this keyword. These indices start from 1, are incremented when new browsers are opened, and reset back to 1 when Close All Browsers is called. See Switch Browser for more information and examples. Optional remote_url is the URL for a Selenium Grid. Optional desired_capabilities can be used to configure, for example, logging preferences for a browser or a browser and operating system when using Sauce Labs. Desired capabilities can be given either as a Python dictionary or as a string in the format key1:value1,key2:value2. Selenium documentation lists possible capabilities that can be enabled. Optional ff_profile_dir is the path to the Firefox profile directory if you wish to overwrite the default profile Selenium uses. Notice that prior to SeleniumLibrary 3.0, the library contained its own profile that was used by default. The ff_profile_dir can also be an instance of the selenium.webdriver.FirefoxProfile . As a third option, it is possible to use FirefoxProfile methods and attributes to define the profile using methods and attributes in the same way as with options argument. Example: It is possible to use FirefoxProfile set_preference to define different profile settings. See options argument documentation in below how to handle backslash escaping. Optional options argument allows defining browser specific Selenium options. Example for Chrome, the options argument allows defining the following methods and attributes and for Firefox these methods and attributes are available. Please note that not all browsers, supported by the SeleniumLibrary, have Selenium options available. Therefore please consult the Selenium documentation which browsers do support the Selenium options. If browser argument is android then Chrome options is used. Selenium options are also supported, when remote_url argument is used. The SeleniumLibrary options argument accepts Selenium options in two different formats: as a string and as Python object which is an instance of the Selenium options class. The string format allows defining Selenium options methods or attributes and their arguments in Robot Framework test data. The method and attributes names are case and space sensitive and must match to the Selenium options methods and attributes names. When defining a method, it must be defined in a similar way as in python: method name, opening parenthesis, zero to many arguments and closing parenthesis. If there is a need to define multiple arguments for a single method, arguments must be separated with comma, just like in Python. Example: add_argument(\"--headless\") or add_experimental_option(\"key\", \"value\"). Attributes are defined in a similar way as in Python: attribute name, equal sign, and attribute value. Example, headless=True. Multiple methods and attributes must be separated by a semicolon. Example: add_argument(\"--headless\");add_argument(\"--start-maximized\"). Arguments allow defining Python data types and arguments are evaluated by using Python ast.literal_eval. Strings must be quoted with single or double quotes, example \"value\" or 'value'. It is also possible to define other Python builtin data types, example True or None, by not using quotes around the arguments. The string format is space friendly. Usually, spaces do not alter the defining methods or attributes. There are two exceptions. In some Robot Framework test data formats, two or more spaces are considered as cell separator and instead of defining a single argument, two or more arguments may be defined. Spaces in string arguments are not removed and are left as is. Example add_argument ( \"--headless\" ) is same as add_argument(\"--headless\"). But add_argument(\" --headless \") is not same same as add_argument ( \"--headless\" ), because spaces inside of quotes are not removed. Please note that if options string contains backslash, example a Windows OS path, the backslash needs escaping both in Robot Framework data and in Python side. This means single backslash must be writen using four backslash characters. Example, Windows path: \"C:\\path\\to\\profile\" must be written as \"C:\\\\\\\\path\\\\\\to\\\\\\\\profile\". Another way to write backslash is use Python raw strings and example write: r\"C:\\\\path\\\\to\\\\profile\". As last format, options argument also supports receiving the Selenium options as Python class instance. In this case, the instance is used as-is and the SeleniumLibrary will not convert the instance to other formats. For example, if the following code return value is saved to ${options} variable in the Robot Framework data: options = webdriver.ChromeOptions() options.add_argument('--disable-dev-shm-usage') return options Then the ${options} variable can be used as an argument to options. Example the options argument can be used to launch Chomium-based applications which utilize the Chromium Embedded Framework . To lauch Chomium-based application, use options to define binary_location attribute and use add_argument method to define remote-debugging-port port for the application. Once the browser is opened, the test can interact with the embedded web-content of the system under test. Optional service_log_path argument defines the name of the file where to write the browser driver logs. If the service_log_path argument contain a marker {index}, it will be automatically replaced with unique running index preventing files to be overwritten. Indices start's from 1, and how they are represented can be customized using Python's format string syntax. Optional executable_path argument defines the path to the driver executable, example to a chromedriver or a geckodriver. If not defined it is assumed the executable is in the $PATH. Examples: Open Browser Open Browser Open Browser Open Browser Open Browser Alias examples: ${1_index} = ${2_index} = ${3_index} = ${4_index} = Should Be Equal Should Be Equal Should Be Equal Example when using Chrome options method: Open Browser ${options} = Open Browser Open Browser Open Browser Example for FirefoxProfile Open Browser Open Browser Open Browser If the provided configuration options are not enough, it is possible to use Create Webdriver to customize browser initialization even more. Applying desired_capabilities argument also for local browser is new in SeleniumLibrary 3.1. Using alias to decide, is the new browser opened is new in SeleniumLibrary 4.0. The options and service_log_path are new in SeleniumLibrary 4.0. Support for ff_profile_dir accepting an instance of the selenium.webdriver.FirefoxProfile and support defining FirefoxProfile with methods and attributes are new in SeleniumLibrary 4.0. Making url optional is new in SeleniumLibrary 4.1. The executable_path argument is new in SeleniumLibrary 4.2."
  },
  {
    "keyword": "Open Chrome Browser",
    "arguments": "url: str,use_profile: bool = False,headless: bool = False,maximized: bool = False,alias: str = None,profile_name: str = None,profile_path: str = None,preferences: dict = None,proxy: str = None",
    "description": "Open Chrome browser. See Open Available Browser for descriptions of arguments."
  },
  {
    "keyword": "Open Context Menu",
    "arguments": "locator",
    "description": "Opens the context menu on the element identified by locator."
  },
  {
    "keyword": "Open Headless Chrome Browser",
    "arguments": "url: str",
    "description": "Open Chrome browser in headless mode. url URL to open Example: ${idx}"
  },
  {
    "keyword": "Open User Browser",
    "arguments": "url: str,tab=True",
    "description": "Open URL with user's default browser :param url: URL to open :param tab: defines is url is opened in a tab (default True) or in new window (False) Example: Open User Browser Open User Browser"
  },
  {
    "keyword": "Page Should Contain",
    "arguments": "text,loglevel=TRACE",
    "description": "Verifies that current page contains text. If this keyword fails, it automatically logs the page source using the log level specified with the optional loglevel argument. Valid log levels are DEBUG, INFO (default), WARN, and NONE. If the log level is NONE or below the current active log level the source will not be logged."
  },
  {
    "keyword": "Page Should Contain Button",
    "arguments": "locator,message=None,loglevel=TRACE",
    "description": "Verifies button locator is found from current page. See Page Should Contain Element for an explanation about message and loglevel arguments. See the Locating elements section for details about the locator syntax. When using the default locator strategy, buttons are searched using id, name, and value."
  },
  {
    "keyword": "Page Should Contain Checkbox",
    "arguments": "locator,message=None,loglevel=TRACE",
    "description": "Verifies checkbox locator is found from the current page. See Page Should Contain Element for an explanation about message and loglevel arguments. See the Locating elements section for details about the locator syntax."
  },
  {
    "keyword": "Page Should Contain Element",
    "arguments": "locator,message=None,loglevel=TRACE,limit=None",
    "description": "Verifies that element locator is found on the current page. See the Locating elements section for details about the locator syntax. The message argument can be used to override the default error message. The limit argument can used to define how many elements the page should contain. When limit is None (default) page can contain one or more elements. When limit is a number, page must contain same number of elements. See Page Should Contain for an explanation about the loglevel argument. Examples assumes that locator matches to two elements. Page Should Contain Element Page Should Contain Element Page Should Contain Element Page Should Contain Element The limit argument is new in SeleniumLibrary 3.0."
  },
  {
    "keyword": "Page Should Contain Image",
    "arguments": "locator,message=None,loglevel=TRACE",
    "description": "Verifies image identified by locator is found from current page. See the Locating elements section for details about the locator syntax. When using the default locator strategy, images are searched using id, name, src and alt. See Page Should Contain Element for an explanation about message and loglevel arguments."
  },
  {
    "keyword": "Page Should Contain Link",
    "arguments": "locator,message=None,loglevel=TRACE",
    "description": "Verifies link identified by locator is found from current page. See the Locating elements section for details about the locator syntax. When using the default locator strategy, links are searched using id, name, href and the link text. See Page Should Contain Element for an explanation about message and loglevel arguments."
  },
  {
    "keyword": "Page Should Contain List",
    "arguments": "locator,message=None,loglevel=TRACE",
    "description": "Verifies selection list locator is found from current page. See Page Should Contain Element for an explanation about message and loglevel arguments. See the Locating elements section for details about the locator syntax."
  },
  {
    "keyword": "Page Should Contain Radio Button",
    "arguments": "locator,message=None,loglevel=TRACE",
    "description": "Verifies radio button locator is found from current page. See Page Should Contain Element for an explanation about message and loglevel arguments. See the Locating elements section for details about the locator syntax. When using the default locator strategy, radio buttons are searched using id, name and value."
  },
  {
    "keyword": "Page Should Contain Textfield",
    "arguments": "locator,message=None,loglevel=TRACE",
    "description": "Verifies text field locator is found from current page. See Page Should Contain Element for an explanation about message and loglevel arguments. See the Locating elements section for details about the locator syntax."
  },
  {
    "keyword": "Page Should Not Contain",
    "arguments": "text,loglevel=TRACE",
    "description": "Verifies the current page does not contain text. See Page Should Contain for an explanation about the loglevel argument."
  },
  {
    "keyword": "Page Should Not Contain Button",
    "arguments": "locator,message=None,loglevel=TRACE",
    "description": "Verifies button locator is not found from current page. See Page Should Contain Element for an explanation about message and loglevel arguments. See the Locating elements section for details about the locator syntax. When using the default locator strategy, buttons are searched using id, name, and value."
  },
  {
    "keyword": "Page Should Not Contain Checkbox",
    "arguments": "locator,message=None,loglevel=TRACE",
    "description": "Verifies checkbox locator is not found from the current page. See Page Should Contain Element for an explanation about message and loglevel arguments. See the Locating elements section for details about the locator syntax."
  },
  {
    "keyword": "Page Should Not Contain Element",
    "arguments": "locator,message=None,loglevel=TRACE",
    "description": "Verifies that element locator is not found on the current page. See the Locating elements section for details about the locator syntax. See Page Should Contain for an explanation about message and loglevel arguments."
  },
  {
    "keyword": "Page Should Not Contain Image",
    "arguments": "locator,message=None,loglevel=TRACE",
    "description": "Verifies image identified by locator is not found from current page. See the Locating elements section for details about the locator syntax. When using the default locator strategy, images are searched using id, name, src and alt. See Page Should Contain Element for an explanation about message and loglevel arguments."
  },
  {
    "keyword": "Page Should Not Contain Link",
    "arguments": "locator,message=None,loglevel=TRACE",
    "description": "Verifies link identified by locator is not found from current page. See the Locating elements section for details about the locator syntax. When using the default locator strategy, links are searched using id, name, href and the link text. See Page Should Contain Element for an explanation about message and loglevel arguments."
  },
  {
    "keyword": "Page Should Not Contain List",
    "arguments": "locator,message=None,loglevel=TRACE",
    "description": "Verifies selection list locator is not found from current page. See Page Should Contain Element for an explanation about message and loglevel arguments. See the Locating elements section for details about the locator syntax."
  },
  {
    "keyword": "Page Should Not Contain Radio Button",
    "arguments": "locator,message=None,loglevel=TRACE",
    "description": "Verifies radio button locator is not found from current page. See Page Should Contain Element for an explanation about message and loglevel arguments. See the Locating elements section for details about the locator syntax. When using the default locator strategy, radio buttons are searched using id, name and value."
  },
  {
    "keyword": "Page Should Not Contain Textfield",
    "arguments": "locator,message=None,loglevel=TRACE",
    "description": "Verifies text field locator is not found from current page. See Page Should Contain Element for an explanation about message and loglevel arguments. See the Locating elements section for details about the locator syntax."
  },
  {
    "keyword": "Press Key",
    "arguments": "locator,key",
    "description": "DEPRECATED in SeleniumLibrary 4.0. use Press Keys instead."
  },
  {
    "keyword": "Press Keys",
    "arguments": "locator=None,*keys",
    "description": "Simulates the user pressing key(s) to an element or on the active browser. If locator evaluates as false, see Boolean arguments for more details, then the keys are sent to the currently active browser. Otherwise element is searched and keys are send to the element identified by the locator. In later case, keyword fails if element is not found. See the Locating elements section for details about the locator syntax. keys arguments can contain one or many strings, but it can not be empty. keys can also be a combination of Selenium Keys and strings or a single Selenium Key. If Selenium Key is combined with strings, Selenium key and strings must be separated by the + character, like in CONTROL+c. Selenium Keys are space and case sensitive and Selenium Keys are not parsed inside of the string. Example AALTO, would send string AALTO and ALT not parsed inside of the string. But A+ALT+O would found Selenium ALT key from the keys argument. It also possible to press many Selenium Keys down at the same time, example 'ALT+ARROW_DOWN`. If Selenium Keys are detected in the keys argument, keyword will press the Selenium Key down, send the strings and then release the Selenium Key. If keyword needs to send a Selenium Key as a string, then each character must be separated with + character, example E+N+D. CTRL is alias for Selenium CONTROL and ESC is alias for Selenium ESCAPE New in SeleniumLibrary 3.3 Examples: Press Keys Press Keys Press Keys Press Keys Press Keys Press Keys Press Keys Press Keys Press Keys"
  },
  {
    "keyword": "Radio Button Should Be Set To",
    "arguments": "group_name,value",
    "description": "Verifies radio button group group_name is set to value. group_name is the name of the radio button group."
  },
  {
    "keyword": "Radio Button Should Not Be Selected",
    "arguments": "group_name",
    "description": "Verifies radio button group group_name has no selection. group_name is the name of the radio button group."
  },
  {
    "keyword": "Register Keyword To Run On Failure",
    "arguments": "keyword",
    "description": "Sets the keyword to execute, when a SeleniumLibrary keyword fails. keyword is the name of a keyword that will be executed if a SeleniumLibrary keyword fails. It is possible to use any available keyword, including user keywords or keywords from other libraries, but the keyword must not take any arguments. The initial keyword to use is set when importing the library, and the keyword that is used by default is Capture Page Screenshot. Taking a screenshot when something failed is a very useful feature, but notice that it can slow down the execution. It is possible to use string NOTHING or NONE, case-insensitively, as well as Python None to disable this feature altogether. This keyword returns the name of the previously registered failure keyword or Python None if this functionality was previously disabled. The return value can be always used to restore the original value later. Example: Register Keyword To Run On Failure ${previous kw}= Register Keyword To Run On Failure Changes in SeleniumLibrary 3.0: Possible to use string NONE or Python None to disable the functionality. Return Python None when the functionality was disabled earlier. In previous versions special value No Keyword was returned and it could not be used to restore the original state."
  },
  {
    "keyword": "Reload Page",
    "arguments": "",
    "description": "Simulates user reloading page."
  },
  {
    "keyword": "Remove Location Strategy",
    "arguments": "strategy_name",
    "description": "Removes a previously added custom location strategy. See Custom locators for information on how to create and use custom strategies."
  },
  {
    "keyword": "Screenshot",
    "arguments": "locator: str = None,filename: str =",
    "description": "Capture page and/or element screenshot. locator if defined, take element screenshot, if not takes page screenshot filename filename for the screenshot, by default creates file screenshot-timestamp-element/page.png if set to None then file is not saved at all Example: Screenshot | locator=//img[@alt=\"Google\"] | filename=locator.png |             # element screenshot, defined filename Screenshot | filename=page.png            |                                    # page screenshot, defined filename Screenshot | filename=${NONE}             |                                    # page screenshot, NO file will be created Screenshot |                              |                                    # page screenshot, default filename Screenshot | locator=//img[@alt=\"Google\"] |                                    # element screenshot, default filename Screenshot | locator=//img[@alt=\"Google\"] | filename=${CURDIR}/subdir/loc.png  # element screenshot, create dirs if not existing"
  },
  {
    "keyword": "Scroll Element Into View",
    "arguments": "locator",
    "description": "Scrolls the element identified by locator into view. See the Locating elements section for details about the locator syntax. New in SeleniumLibrary 3.2.0"
  },
  {
    "keyword": "Select All From List",
    "arguments": "locator",
    "description": "Selects all options from multi-selection list locator. See the Locating elements section for details about the locator syntax."
  },
  {
    "keyword": "Select Checkbox",
    "arguments": "locator",
    "description": "Selects the checkbox identified by locator. Does nothing if checkbox is already selected. See the Locating elements section for details about the locator syntax."
  },
  {
    "keyword": "Select Frame",
    "arguments": "locator",
    "description": "Sets frame identified by locator as the current frame. See the Locating elements section for details about the locator syntax. Works both with frames and iframes. Use Unselect Frame to cancel the frame selection and return to the main frame. Example: Select Frame Click Link Unselect Frame Select Frame"
  },
  {
    "keyword": "Select From List By Index",
    "arguments": "locator,*indexes",
    "description": "Selects options from selection list locator by indexes. Indexes of list options start from 0. If more than one option is given for a single-selection list, the last value will be selected. With multi-selection lists all specified options are selected, but possible old selections are not cleared. See the Locating elements section for details about the locator syntax."
  },
  {
    "keyword": "Select From List By Label",
    "arguments": "locator,*labels",
    "description": "Selects options from selection list locator by labels. If more than one option is given for a single-selection list, the last value will be selected. With multi-selection lists all specified options are selected, but possible old selections are not cleared. See the Locating elements section for details about the locator syntax."
  },
  {
    "keyword": "Select From List By Value",
    "arguments": "locator,*values",
    "description": "Selects options from selection list locator by values. If more than one option is given for a single-selection list, the last value will be selected. With multi-selection lists all specified options are selected, but possible old selections are not cleared. See the Locating elements section for details about the locator syntax."
  },
  {
    "keyword": "Select Radio Button",
    "arguments": "group_name,value",
    "description": "Sets the radio button group group_name to value. The radio button to be selected is located by two arguments: group_name is the name of the radio button group. value is the id or value attribute of the actual radio button. Examples: Select Radio Button Select Radio Button"
  },
  {
    "keyword": "Select Window",
    "arguments": "locator=MAIN,timeout=None",
    "description": "DEPRECATED in SeleniumLibrary 4.0. , use Switch Window instead."
  },
  {
    "keyword": "Set Browser Implicit Wait",
    "arguments": "value",
    "description": "Sets the implicit wait value used by Selenium. Same as Set Selenium Implicit Wait but only affects the current browser."
  },
  {
    "keyword": "Set Focus To Element",
    "arguments": "locator",
    "description": "Sets the focus to the element identified by locator. See the Locating elements section for details about the locator syntax. Prior to SeleniumLibrary 3.0 this keyword was named Focus."
  },
  {
    "keyword": "Set Screenshot Directory",
    "arguments": "path",
    "description": "Sets the directory for captured screenshots. path argument specifies the absolute path to a directory where the screenshots should be written to. If the directory does not exist, it will be created. The directory can also be set when importing the library. If it is not configured anywhere, screenshots are saved to the same directory where Robot Framework's log file is written. If path equals to EMBED (case insensitive) and Capture Page Screenshot or capture Element Screenshot keywords filename argument is not changed from the default value, then the page or element screenshot is embedded as Base64 image to the log.html. The previous value is returned and can be used to restore the original value later if needed. Returning the previous value is new in SeleniumLibrary 3.0. The persist argument was removed in SeleniumLibrary 3.2 and EMBED is new in SeleniumLibrary 4.2."
  },
  {
    "keyword": "Set Selenium Implicit Wait",
    "arguments": "value",
    "description": "Sets the implicit wait value used by Selenium. The value can be given as a number that is considered to be seconds or as a human-readable string like 1 second. The previous value is returned and can be used to restore the original value later if needed. This keyword sets the implicit wait for all opened browsers. Use Set Browser Implicit Wait to set it only to the current browser. See the Implicit wait section above for more information. Example: ${orig wait} = Perform AJAX call that is slow Set Selenium Implicit Wait"
  },
  {
    "keyword": "Set Selenium Speed",
    "arguments": "value",
    "description": "Sets the delay that is waited after each Selenium command. The value can be given as a number that is considered to be seconds or as a human-readable string like 1 second. The previous value is returned and can be used to restore the original value later if needed. See the Selenium Speed section above for more information. Example: Set Selenium Speed"
  },
  {
    "keyword": "Set Selenium Timeout",
    "arguments": "value",
    "description": "Sets the timeout that is used by various keywords. The value can be given as a number that is considered to be seconds or as a human-readable string like 1 second. The previous value is returned and can be used to restore the original value later if needed. See the Timeout section above for more information. Example: ${orig timeout} = Open page that loads slowly Set Selenium Timeout"
  },
  {
    "keyword": "Set Window Position",
    "arguments": "x,y",
    "description": "Sets window position using x and y coordinates. The position is relative to the top left corner of the screen, but some browsers exclude possible task bar set by the operating system from the calculation. The actual position may thus be different with different browsers. Values can be given using strings containing numbers or by using actual numbers. See also Get Window Position. Example: Set Window Position"
  },
  {
    "keyword": "Set Window Size",
    "arguments": "width,height,inner=False",
    "description": "Sets current windows size to given width and height. Values can be given using strings containing numbers or by using actual numbers. See also Get Window Size. Browsers have a limit on their minimum size. Trying to set them smaller will cause the actual size to be bigger than the requested size. If inner parameter is set to True, keyword sets the necessary window width and height to have the desired HTML DOM window.innerWidth and window.innerHeight. See Boolean arguments for more details on how to set boolean arguments. The inner argument is new since SeleniumLibrary 4.0. This inner argument does not support Frames. If a frame is selected, switch to default before running this. Example: Set Window Size Set Window Size"
  },
  {
    "keyword": "Simulate Event",
    "arguments": "locator,event",
    "description": "Simulates event on the element identified by locator. This keyword is useful if element has OnEvent handler that needs to be explicitly invoked. See the Locating elements section for details about the locator syntax. Prior to SeleniumLibrary 3.0 this keyword was named Simulate."
  },
  {
    "keyword": "Submit Form",
    "arguments": "locator=None",
    "description": "Submits a form identified by locator. If locator is not given, first form on the page is submitted. See the Locating elements section for details about the locator syntax."
  },
  {
    "keyword": "Switch Browser",
    "arguments": "index_or_alias",
    "description": "Switches between active browsers using index_or_alias. Indices are returned by the Open Browser keyword and aliases can be given to it explicitly. Indices start from 1. Example: Open Browser Location Should Be Open Browser Location Should Be Switch Browser Page Should Contain Switch Browser Page Should Contain Close All Browsers Above example expects that there was no other open browsers when opening the first one because it used index 1 when switching to it later. If you are not sure about that, you can store the index into a variable as below. ${index} = # Do something ... Switch Browser"
  },
  {
    "keyword": "Switch Window",
    "arguments": "locator=MAIN,timeout=None,browser=CURRENT",
    "description": "Switches to browser window matching locator. If the window is found, all subsequent commands use the selected window, until this keyword is used again. If the window is not found, this keyword fails. The previous windows handle is returned and can be used to switch back to it later. Notice that alerts should be handled with Handle Alert or other alert related keywords. The locator can be specified using different strategies somewhat similarly as when locating elements on pages. By default, the locator is matched against window handle, name, title, and URL. Matching is done in that order and the first matching window is selected. The locator can specify an explicit strategy by using the format strategy:value (recommended) or strategy=value. Supported strategies are name, title, and url. These matches windows using their name, title, or URL, respectively. Additionally, default can be used to explicitly use the default strategy explained above. If the locator is NEW (case-insensitive), the latest opened window is selected. It is an error if this is the same as the current window. If the locator is MAIN (default, case-insensitive), the main window is selected. If the locator is CURRENT (case-insensitive), nothing is done. This effectively just returns the current window handle. If the locator is not a string, it is expected to be a list of window handles to exclude. Such a list of excluded windows can be got from Get Window Handles before doing an action that opens a new window. The timeout is used to specify how long keyword will poll to select the new window. The timeout is new in SeleniumLibrary 3.2. Example: Click Link Switch Window Title Should Be Click Button ${handle} = Title Should Be Switch Window Title Should Be Switch Window Title Should Be ${excludes} = Click Link Switch Window Title Should Be The browser argument allows with index_or_alias to implicitly switch to a specific browser when switching to a window. See Switch Browser If the browser is CURRENT (case-insensitive), no other browser is selected. NOTE: The strategy:value syntax is only supported by SeleniumLibrary 3.0 and newer. Prior to SeleniumLibrary 3.0 matching windows by name, title and URL was case-insensitive. Earlier versions supported aliases None, null and the empty string for selecting the main window, and alias self for selecting the current window. Support for these aliases was removed in SeleniumLibrary 3.2."
  },
  {
    "keyword": "Table Cell Should Contain",
    "arguments": "locator,row,column,expected,loglevel=TRACE",
    "description": "Verifies table cell contains text expected. See Get Table Cell that this keyword uses internally for an explanation about accepted arguments."
  },
  {
    "keyword": "Table Column Should Contain",
    "arguments": "locator,column,expected,loglevel=TRACE",
    "description": "Verifies table column contains text expected. The table is located using the locator argument and its column found using column. See the Locating elements section for details about the locator syntax. Column indexes start from 1. It is possible to refer to columns from the end by using negative indexes so that -1 is the last column, -2 is the second last, and so on. If a table contains cells that span multiple columns, those merged cells count as a single column. See Page Should Contain Element for an explanation about the loglevel argument."
  },
  {
    "keyword": "Table Footer Should Contain",
    "arguments": "locator,expected,loglevel=TRACE",
    "description": "Verifies table footer contains text expected. Any <td> element inside <tfoot> element is considered to be part of the footer. The table is located using the locator argument. See the Locating elements section for details about the locator syntax. See Page Should Contain Element for an explanation about the loglevel argument."
  },
  {
    "keyword": "Table Header Should Contain",
    "arguments": "locator,expected,loglevel=TRACE",
    "description": "Verifies table header contains text expected. Any <th> element anywhere in the table is considered to be part of the header. The table is located using the locator argument. See the Locating elements section for details about the locator syntax. See Page Should Contain Element for an explanation about the loglevel argument."
  },
  {
    "keyword": "Table Row Should Contain",
    "arguments": "locator,row,expected,loglevel=TRACE",
    "description": "Verifies that table row contains text expected. The table is located using the locator argument and its column found using column. See the Locating elements section for details about the locator syntax. Row indexes start from 1. It is possible to refer to rows from the end by using negative indexes so that -1 is the last row, -2 is the second last, and so on. If a table contains cells that span multiple rows, a match only occurs for the uppermost row of those merged cells. See Page Should Contain Element for an explanation about the loglevel argument."
  },
  {
    "keyword": "Table Should Contain",
    "arguments": "locator,expected,loglevel=TRACE",
    "description": "Verifies table contains text expected. The table is located using the locator argument. See the Locating elements section for details about the locator syntax. See Page Should Contain Element for an explanation about the loglevel argument."
  },
  {
    "keyword": "Textarea Should Contain",
    "arguments": "locator,expected,message=None",
    "description": "Verifies text area locator contains text expected. message can be used to override default error message. See the Locating elements section for details about the locator syntax."
  },
  {
    "keyword": "Textarea Value Should Be",
    "arguments": "locator,expected,message=None",
    "description": "Verifies text area locator has exactly text expected. message can be used to override default error message. See the Locating elements section for details about the locator syntax."
  },
  {
    "keyword": "Textfield Should Contain",
    "arguments": "locator,expected,message=None",
    "description": "Verifies text field locator contains text expected. message can be used to override the default error message. See the Locating elements section for details about the locator syntax."
  },
  {
    "keyword": "Textfield Value Should Be",
    "arguments": "locator,expected,message=None",
    "description": "Verifies text field locator has exactly text expected. message can be used to override default error message. See the Locating elements section for details about the locator syntax."
  },
  {
    "keyword": "Title Should Be",
    "arguments": "title,message=None",
    "description": "Verifies that the current page title equals title. The message argument can be used to override the default error message. message argument is new in SeleniumLibrary 3.1."
  },
  {
    "keyword": "Unselect All From List",
    "arguments": "locator",
    "description": "Unselects all options from multi-selection list locator. See the Locating elements section for details about the locator syntax. New in SeleniumLibrary 3.0."
  },
  {
    "keyword": "Unselect Checkbox",
    "arguments": "locator",
    "description": "Removes the selection of checkbox identified by locator. Does nothing if the checkbox is not selected. See the Locating elements section for details about the locator syntax."
  },
  {
    "keyword": "Unselect Frame",
    "arguments": "",
    "description": "Sets the main frame as the current frame. In practice cancels the previous Select Frame call."
  },
  {
    "keyword": "Unselect From List By Index",
    "arguments": "locator,*indexes",
    "description": "Unselects options from selection list locator by indexes. Indexes of list options start from 0. This keyword works only with multi-selection lists. See the Locating elements section for details about the locator syntax."
  },
  {
    "keyword": "Unselect From List By Label",
    "arguments": "locator,*labels",
    "description": "Unselects options from selection list locator by labels. This keyword works only with multi-selection lists. See the Locating elements section for details about the locator syntax."
  },
  {
    "keyword": "Unselect From List By Value",
    "arguments": "locator,*values",
    "description": "Unselects options from selection list locator by values. This keyword works only with multi-selection lists. See the Locating elements section for details about the locator syntax."
  },
  {
    "keyword": "Wait And Click Button",
    "arguments": "locator: str,modifier: str = None",
    "description": "Click button identified by locator, once it becomes visible. locator element locator modifier press given keys while clicking the element, e.g. CTRL Example: Click Button When Visible"
  },
  {
    "keyword": "Wait For Condition",
    "arguments": "condition,timeout=None,error=None",
    "description": "Waits until condition is true or timeout expires. The condition can be arbitrary JavaScript expression but it must return a value to be evaluated. See Execute JavaScript for information about accessing content on pages. Fails if the timeout expires before the condition becomes true. See the Timeouts section for more information about using timeouts and their default value. error can be used to override the default error message. Examples: Wait For Condition Wait For Condition Wait For Condition"
  },
  {
    "keyword": "Wait Until Element Contains",
    "arguments": "locator,text,timeout=None,error=None",
    "description": "Waits until the element locator contains text. Fails if timeout expires before the text appears. See the Timeouts section for more information about using timeouts and their default value and the Locating elements section for details about the locator syntax. error can be used to override the default error message."
  },
  {
    "keyword": "Wait Until Element Does Not Contain",
    "arguments": "locator,text,timeout=None,error=None",
    "description": "Waits until the element locator does not contain text. Fails if timeout expires before the text disappears. See the Timeouts section for more information about using timeouts and their default value and the Locating elements section for details about the locator syntax. error can be used to override the default error message."
  },
  {
    "keyword": "Wait Until Element Is Enabled",
    "arguments": "locator,timeout=None,error=None",
    "description": "Waits until the element locator is enabled. Element is considered enabled if it is not disabled nor read-only. Fails if timeout expires before the element is enabled. See the Timeouts section for more information about using timeouts and their default value and the Locating elements section for details about the locator syntax. error can be used to override the default error message. Considering read-only elements to be disabled is a new feature in SeleniumLibrary 3.0."
  },
  {
    "keyword": "Wait Until Element Is Not Visible",
    "arguments": "locator,timeout=None,error=None",
    "description": "Waits until the element locator is not visible. Fails if timeout expires before the element is not visible. See the Timeouts section for more information about using timeouts and their default value and the Locating elements section for details about the locator syntax. error can be used to override the default error message."
  },
  {
    "keyword": "Wait Until Element Is Visible",
    "arguments": "locator,timeout=None,error=None",
    "description": "Waits until the element locator is visible. Fails if timeout expires before the element is visible. See the Timeouts section for more information about using timeouts and their default value and the Locating elements section for details about the locator syntax. error can be used to override the default error message."
  },
  {
    "keyword": "Wait Until Location Contains",
    "arguments": "expected,timeout=None,message=None",
    "description": "Waits until the current URL contains expected. The expected argument contains the expected value in url. Fails if timeout expires before the location contains. See the Timeouts section for more information about using timeouts and their default value. The message argument can be used to override the default error message. New in SeleniumLibrary 4.0"
  },
  {
    "keyword": "Wait Until Location Does Not Contain",
    "arguments": "location,timeout=None,message=None",
    "description": "Waits until the current URL does not contains location. The location argument contains value not expected in url. Fails if timeout expires before the location not contains. See the Timeouts section for more information about using timeouts and their default value. The message argument can be used to override the default error message. New in SeleniumLibrary 4.3"
  },
  {
    "keyword": "Wait Until Location Is",
    "arguments": "expected,timeout=None,message=None",
    "description": "Waits until the current URL is expected. The expected argument is the expected value in url. Fails if timeout expires before the location is. See the Timeouts section for more information about using timeouts and their default value. The message argument can be used to override the default error message. New in SeleniumLibrary 4.0"
  },
  {
    "keyword": "Wait Until Location Is Not",
    "arguments": "location,timeout=None,message=None",
    "description": "Waits until the current URL is not location. The location argument is the unexpected value in url. Fails if timeout expires before the location is not. See the Timeouts section for more information about using timeouts and their default value. The message argument can be used to override the default error message. New in SeleniumLibrary 4.3"
  },
  {
    "keyword": "Wait Until Page Contains",
    "arguments": "text,timeout=None,error=None",
    "description": "Waits until text appears on the current page. Fails if timeout expires before the text appears. See the Timeouts section for more information about using timeouts and their default value. error can be used to override the default error message."
  },
  {
    "keyword": "Wait Until Page Contains Element",
    "arguments": "locator,timeout=None,error=None,limit=None",
    "description": "Waits until the element locator appears on the current page. Fails if timeout expires before the element appears. See the Timeouts section for more information about using timeouts and their default value and the Locating elements section for details about the locator syntax. error can be used to override the default error message. The limit argument can used to define how many elements the page should contain. When limit is None (default) page can contain one or more elements. When limit is a number, page must contain same number of elements. limit is new in SeleniumLibrary 4.4"
  },
  {
    "keyword": "Wait Until Page Does Not Contain",
    "arguments": "text,timeout=None,error=None",
    "description": "Waits until text disappears from the current page. Fails if timeout expires before the text disappears. See the Timeouts section for more information about using timeouts and their default value. error can be used to override the default error message."
  },
  {
    "keyword": "Wait Until Page Does Not Contain Element",
    "arguments": "locator,timeout=None,error=None,limit=None",
    "description": "Waits until the element locator disappears from the current page. Fails if timeout expires before the element disappears. See the Timeouts section for more information about using timeouts and their default value and the Locating elements section for details about the locator syntax. error can be used to override the default error message. The limit argument can used to define how many elements the page should not contain. When limit is None (default) page can`t contain any elements. When limit is a number, page must not contain same number of elements. limit is new in SeleniumLibrary 4.4"
  }
]